!-----------------------------------------------------------------------------
! (c) Crown copyright 2022 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> @brief Initialisation of prognostic fields for the shallow water equations.
!> @details Algorithms to initialise winds, geopotential, and buoyancy, and to
!!          compute potential vorticity during the shallow water simuations.
module swe_init_fields_alg_mod

  ! Constants, Types, Function Space
  use constants_mod,                      only: r_def, i_def
  use field_mod,                          only: field_type
  use field_collection_mod,               only: field_collection_type
  use field_vector_mod,                   only: field_vector_type
  use fs_continuity_mod,                  only: W1
  use function_space_collection_mod,      only: function_space_collection
  use function_space_mod,                 only: function_space_type
  use geometric_constants_mod,            only: get_coordinates, &
                                                get_panel_id
  use log_mod,                            only: log_event,         &
                                                log_scratch_space, &
                                                LOG_LEVEL_INFO,    &
                                                LOG_LEVEL_ERROR
  use mesh_mod,                           only: mesh_type

  ! Configuration options
  use finite_element_config_mod,          only: element_order
  use shallow_water_settings_config_mod,  only: swe_test,              &
                                                swe_test_swe_galewsky, &
                                                swe_test_swe_geostr_balance
  use shallow_water_settings_config_mod,  only: thermal_swe

  ! Algorithms and Kernels
  use enforce_bc_kernel_mod,              only: enforce_bc_kernel_type
  use initial_geopot_kernel_mod,          only: initial_geopot_kernel_type
  use initial_surface_geopot_kernel_mod,  only: initial_surface_geopot_kernel_type
  use initial_swe_buoyancy_kernel_mod,    only: initial_swe_buoyancy_kernel_type
  use initial_swe_streamfunc_kernel_mod,  only: initial_swe_streamfunc_kernel_type
  use initial_swe_u_kernel_mod,           only: initial_swe_u_kernel_type
  use initial_vorticity_v2_kernel_mod,    only: initial_vorticity_v2_kernel_type
  use mass_matrix_solver_alg_mod,         only: mass_matrix_solver_alg
  use strong_curl_kernel_mod,             only: strong_curl_kernel_type
  use w2_to_w1_projection_kernel_mod,     only: w2_to_w1_projection_kernel_type

  ! Quadrature
  use quadrature_xyoz_mod,                only: quadrature_xyoz_type
  use quadrature_rule_gaussian_mod,       only: quadrature_rule_gaussian_type

  implicit none

  private
  type(function_space_type), pointer :: w1_fs => null()

  public :: swe_init_fields_alg
  public :: swe_init_vorticity_alg

contains

  !=============================================================================
  !> @brief Initialise the prognostic fields for the shallow water miniapp.
  !> @details An algorithm for initialising prognostic fields (wind, geopotential,
  !!          buoyancy, potential voriticty) and the surface geopotential for
  !!          the shallow water miniapp.
  !> @param[in]     mesh        Mesh to initialise variables on
  !> @param[in,out] prognostics The prognostic variables
  !!                            (wind, buoyancy, geopotential, potential vorticity)
  !> @param[in,out] s_geopot    The surface geopotential
  subroutine swe_init_fields_alg( mesh,        &
                                  prognostics, &
                                  s_geopot )

    implicit none

    ! Mesh and prognostic fields
    type( mesh_type ), pointer,    intent(in)    :: mesh
    type( field_collection_type ), intent(inout) :: prognostics
    type( field_type ),            intent(inout) :: s_geopot

    ! Individual fields from prognostics
    type( field_type ), pointer           :: wind     => null()
    type( field_type ), pointer           :: geopot   => null()
    type( field_type ), pointer           :: buoyancy => null()
    type( field_type ), pointer           :: q        => null()

    ! Quadrature
    type( quadrature_xyoz_type )          :: qr
    type( quadrature_rule_gaussian_type ) :: quadrature_rule
    type( field_type )                    :: r_u, r_psi, psi

    ! Coordinate fields and panel ID
    type( field_type ), pointer :: chi(:)   => null()
    type( field_type ), pointer :: panel_id => null()

    ! Get references out of the prognostic collection for the prognostic
    ! variables
    wind     => prognostics%get_field("wind")
    buoyancy => prognostics%get_field("buoyancy")
    geopot   => prognostics%get_field("geopot")
    q        => prognostics%get_field("q")

    ! Get coordinates and set up quadrature
    chi => get_coordinates(mesh%get_id())
    panel_id => get_panel_id(mesh%get_id())
    qr  = quadrature_xyoz_type(element_order+3, quadrature_rule)
    w1_fs => function_space_collection%get_fs(mesh, element_order, W1)

    !------- Initialise global prognostic fields ------------------------------!

    call log_event( 'shallow_water: Initialising prognostic fields', LOG_LEVEL_INFO )

    ! Initialise geopotential and surface geopotential
    call invoke( initial_geopot_kernel_type(geopot, chi),           &
                 initial_surface_geopot_kernel_type(s_geopot, chi), &
                 inc_X_minus_Y(geopot, s_geopot) )

    if ( thermal_swe ) then
      call invoke( initial_swe_buoyancy_kernel_type(buoyancy, chi) )
    else
      call invoke( setval_c( buoyancy, 1.0_r_def ) )
    end if

    ! Initialise U according to formulation
    if ( swe_test == swe_test_swe_galewsky .OR. &
         swe_test == swe_test_swe_geostr_balance) then
      call log_event( "Shallow water: Initialising winds from stream function", LOG_LEVEL_INFO )
      call psi%initialise( vector_space = w1_fs )
      call r_psi%initialise( vector_space = w1_fs )
      call invoke( name = 'Initialise U via Psi', &
                   setval_c( psi, 0.0_r_def ),    &
                   setval_c( r_psi, 0.0_r_def ),  &
                   initial_swe_streamfunc_kernel_type( r_psi, chi, panel_id, qr ) )
      call mass_matrix_solver_alg( psi, r_psi )
      call invoke( strong_curl_kernel_type( wind, psi ), &
                   enforce_bc_kernel_type( wind ) )
    else
      call r_u%initialise( vector_space = wind%get_function_space() )
      call invoke( name = 'Initialise U',           &
                   setval_c( wind,     0.0_r_def ), &
                   setval_c( r_u,      0.0_r_def ), &
                   initial_swe_u_kernel_type( r_u, chi, panel_id, qr ) )
      call mass_matrix_solver_alg(wind, r_u)
    end if

    ! Initialise vorticity
    call swe_init_vorticity_alg( wind, geopot, q )

    call log_event( 'shallow_water: Prognostic fields initialised', LOG_LEVEL_INFO )

  end subroutine swe_init_fields_alg

  !=============================================================================
  !> @brief Potential vorticity initialisation.
  !> @details An algorithm for initialising the potential vorticity. Used for field
  !!          initialisation and to resynchronise the vorticity during the run.
  !> @param[in]     wind   The wind field
  !> @param[in]     geopot The geopotential field
  !> @param[in,out] q      The potential vorticity field
  subroutine swe_init_vorticity_alg( wind,   &
                                     geopot, &
                                     q )

    implicit none

    ! Prognostic fields
    type( field_type ), intent(in)    :: wind
    type( field_type ), intent(in)    :: geopot
    type( field_type ), intent(inout) :: q

    ! Internal variables
    type(field_type)                   :: r_q, r_uq, r_u, u_in_w1
    type(function_space_type), pointer :: q_fs => null()

    ! Coordinate fields and quadrature
    type( field_type ), pointer           :: chi(:) => null()
    type( quadrature_xyoz_type )          :: qr
    type( quadrature_rule_gaussian_type ) :: quadrature_rule
    type( field_type ), pointer           :: panel_id => null()

    ! Mesh ID
    integer(i_def) :: mesh_id

    mesh_id = geopot%get_mesh_id()

    chi => get_coordinates(mesh_id)
    panel_id => get_panel_id(mesh_id)
    qr  = quadrature_xyoz_type(element_order+3, quadrature_rule)

    ! Initialise vorticity using velocity and geopotential
    q_fs => q%get_function_space()
    call r_u%initialise( vector_space = wind%get_function_space() )
    call r_q%initialise( vector_space = q_fs  )

    ! Compute the V0 representation of the wind field by galerkin projection and
    ! then compute its strong curl
    call u_in_w1%initialise( vector_space = w1_fs)
    call r_uq%initialise( vector_space = w1_fs)
    call invoke( name = 'Initialise vorticity in V2', &
                 setval_c( r_uq, 0.0_r_def ),         &
                 w2_to_w1_projection_kernel_type( r_uq, wind, qr ) )
    call mass_matrix_solver_alg( u_in_w1, r_uq, .false. )

    call invoke( setval_c( r_u, 0.0_r_def ),              &
                 setval_c( r_q, 0.0_r_def ),              &
                 strong_curl_kernel_type( r_u, u_in_w1 ), &
                 initial_vorticity_v2_kernel_type( r_q, r_u, geopot, chi, panel_id, qr ) )

    call mass_matrix_solver_alg( q, r_q )

    call log_event( 'shallow_water: Initialised potential vorticity', LOG_LEVEL_INFO )

  end subroutine swe_init_vorticity_alg

end module swe_init_fields_alg_mod
