!-----------------------------------------------------------------------------
! (c) Crown copyright 2022 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> @brief Preconditioner for the shallow water system.
!>
!> @details This type is derived from the abstract preconditioner type and
!!          implements a preconditioner for the mixed (thermal) shallow water
!!          system in the variables \f$(\mathbf{U},GP,B)\f$.
!!
!!          The discretised and linearised mixed (thermal) shallow water system
!!          for the velocity (\f$\textbf{U}\f$), geopotential (\f$GP\f$)
!!          and buoyancy (\f$B\f$) unknowns is:
!!
!!   \f[ \mathbf{R}_u = M_2 \mathbf{U} - \alpha\Delta t D^T (GP + ref_gp B) \f]
!!   \f[          R_gp = GP  + \alpha\Delta t ref_gp M_3^{-1} D \mathbf{U}  \f]
!!   \f[          R_b = M_b B                                               \f]
!!
!!          Given the right hand side \f$(\mathbf{R}_u,R_gp,R_b)\f$ this needs
!!          to be solved for the state \f$(\mathbf{U},GP,B)\f$.
!!
!!          To construct a preconditioner, proceed as follows:
!!
!!          * Approximately (via lumping the buoyancy mass matrix) eliminate
!!          buoyancy to obtain an equation for velocity and geopotential only:
!!
!!   \f[ \textbf{R}^*_u = H_B \textbf{U} - \alpha\Delta t D^T GP            \f]
!!   \f[            R_gp = GP + \alpha\Delta t ref_gp M_3^{-1} D \textbf{U} \f]
!!
!!          where
!!
!!   \f[ \textbf{R}^*_u=\textbf{R}_u+\alpha\Delta t ref_gp/2 D\tilde{M}_b^{-1}R_b \f]
!!   \f[ H_B=\tilde{M}_2                                                          \f]
!!
!!          and \f$\tilde{A}\f$ is the lumped version of a matrix \f$A\f$.
!!          Note that any lumped matrix is diagonal, so inversion is straightforward.
!!          The lumped matrices are represented as fields.
!!
!!          * Eliminate velocity to obtain a Helmholtz-equation for geopotential only:
!!
!!   \f[ R^*_gp = H GP \f]
!!
!!          where
!!
!!   \f[ R^*_gp=R_gp-\alpha\Delta t ref_gp M_3^{-1} D H_B^{-1}\textbf{R}_u^* \f]
!!
!!          and the Helmholtz operator is given as
!!
!!   \f[ H = Id + \alpha^2(\Delta t)^2 c_s^2 M_3^{-1} D H_B^{-1} D^T\f]
!!
!!          * Given the solution \f$GP\f$ of the Helmholtz-system, the velocity
!!          and buoyancy are reconstructed as
!!
!!   \f[ \textbf{U} = H_B^{-1} (\mathbf{R}^*_u + \alpha\Delta t D^T GP)    \f]
!!   \f[ B = \tilde{M}_b^{-1}R_b                                           \f]
!!
!!          More specifically, the preconditioner proceeds along the following steps
!!
!!          1. Calculate \f$\textbf{R})u^*\f$ and then \f$R^*_gp\f$
!!          2. Approximately solve the Helmholtz-system \f$R^*_gp = H GP\f$ with
!!             an iterative solver
!!          3. Given \f$GP\f$, reconstruct the velocity \f$\textbf{U}\f$ and
!!             buoyancy \f$B\f$
!!
!!          The Helmholtz system is solved with an iterative solver which is
!!          passed in the constructor.
!!
module swe_mixed_schur_precon_alg_mod

  use constants_mod,                      only: i_def, r_def
  use fem_constants_mod,                  only: get_mass_matrix,            &
                                                get_inverse_w3_mass_matrix, &
                                                get_div
  use field_mod,                          only: field_type
  use field_indices_mod,                  only: isw_u, isw_g, isw_b
  use field_vector_mod,                   only: field_vector_type
  use fs_continuity_mod,                  only: W1, W2, W3
  use io_config_mod,                      only: subroutine_timers
  use iterative_solver_mod,               only: abstract_iterative_solver_type
  use log_mod,                            only: log_event,       &
                                                LOG_LEVEL_ERROR, &
                                                LOG_LEVEL_INFO,  &
                                                LOG_LEVEL_DEBUG, &
                                                log_scratch_space
  use operator_mod,                       only: operator_type
  use preconditioner_mod,                 only: abstract_preconditioner_type
  use shallow_water_settings_config_mod,  only: ref_gp, &
                                                thermal_swe
  use timestepping_config_mod,            only: dt
  use timer_mod,                          only: timer
  use vector_mod,                         only: abstract_vector_type

  implicit none

  private

  !> @brief Mixed preconditioner type.
  !>
  !> @details Implements mixed preconditioner which can be used in the
  !!          iterative solver algorithms.
  type, public, extends(abstract_preconditioner_type) :: &
                        swe_mixed_schur_preconditioner_type

     private
     !> Off-centering parameter \f$\alpha\f$ in timestepping
     real(kind=r_def) :: alpha
     !> \f$Q\f$- matrix (projection in buoyancy equation)
     type(operator_type) :: Q
     !> increments for geopotential, velocity and buoyancy
     type(field_type) :: p_inc, b_inc, u_inc
     !> temporary variable in geopotential construction
     type(field_type) :: rhs_p_tmp
     !> modified right-hand \f$\textbf{R}_u^*\f$
     type(field_type) :: rhs_u
     !> modified right-hand \f$R_gp^*\f$
     type(field_type) :: rhs_p
     !> 1-component field vector for right hand side in geopotential system
     type(field_vector_type) :: geopot_b
     !> 1-component field vector for solution of geopotential system
     type(field_vector_type) :: geopot_x
     !> temporary variable \f$H_B^{-1}\textbf{R}_u\f$
     type(field_type) :: hb_ru
     !> temporary variable \f$\tilde{M}_B^{-1}R_b\f$
     type(field_type) :: mb_rb
     !> lumped inverse \f$\tilde{M}^{-1}_{\theta}\f$
     type(field_type) :: Mb_lumped_inv, Hb_lumped_inv
     !> geopotential (Helmholtz) solver object
     class(abstract_iterative_solver_type), pointer :: &
        swe_geopot_solver

     contains
     ! Override the (abstract interface) for application of
     ! a preconditioner \f$y = P.x\f$
     procedure, public  :: apply => apply_swe_mixed_schur_preconditioner
     procedure, private :: apply_swe_mixed_schur_preconditioner

     !> private methods
     !> Build the right-hand-side for the Helmholtz equation
     procedure, private :: build_geopot_rhs
     !> Reconstruct the velocity and buoyancy from the solution of the
     !> Helmholtz equation
     procedure, private :: back_substitute

     !> Destructor
     final :: destroy_swe_mixed_schur_preconditioner
  end type swe_mixed_schur_preconditioner_type

  ! Overload the default structure constructor
  interface swe_mixed_schur_preconditioner_type
     module procedure swe_mixed_schur_preconditioner_constructor
  end interface

contains
  !> @brief Construct a <code> swe_mixed_schur_preconditioner_type</code> object.
  !>
  !> @details This constructs all required fields and builds operators such as
  !!          the lumped buoyancy mass matrix \f$\tilde{M}_b\f$ and the matrix
  !!          \f$H_B\f$. The current state is passed in as a field vector to be
  !!          able to extract the relevant function spaces.
  !!
  !!          The matrix \f$\tilde{H}_b^{-1}\f$ is passed in as an argument
  !!          since this matrix is already required for and constructed in the
  !!          geopotential operator.
  !>
  !> @param[in] state         Current state (passed as a field-vector)
  !> @param[in] Hb_lumped_inv Lumped inverse \f$\tilde{H}_b^{-1}\f$
  !> @param[in] geopot_solver Solver object for Helmholtz system
  !> @return    self          The constructed preconditioner object
  function swe_mixed_schur_preconditioner_constructor( state,          &
                                                       Hb_lumped_inv,  &
                                                       geopot_solver ) &
                                                       result(self)

    use function_space_mod,              only: function_space_type
    use matrix_vector_kernel_mod,        only: matrix_vector_kernel_type
    use transpose_matrix_vector_kernel_mod, &
                                         only: transpose_matrix_vector_kernel_type

    implicit none

    type(field_vector_type), intent(in) :: state
    type(field_type), intent(in) :: Hb_lumped_inv
    class(abstract_iterative_solver_type), target, intent(in) :: &
      geopot_solver
    type(swe_mixed_schur_preconditioner_type)  :: self
    type(function_space_type), pointer         :: wp => null(), &
                                                  wu => null(), &
                                                  wb => null()
    type(field_type)                           :: ones, M_lumped
    type(operator_type), pointer               :: Mb => null()
    integer(kind=i_def)                        :: mesh_id

    call log_event( 'Constructing shallow water mixed preconditioner...', &
                    LOG_LEVEL_INFO )

    mesh_id = state%vector(isw_u)%get_mesh_id()

    self%alpha = 0.5_r_def

    ! Get required function spaces
    wu => state%vector(isw_u)%get_function_space()
    wp => state%vector(isw_g)%get_function_space()
    wb => state%vector(isw_b)%get_function_space()

    ! Create fields for increments
    call self%p_inc%initialise(vector_space = wp)
    call self%b_inc%initialise(vector_space = wb)
    call self%u_inc%initialise(vector_space = wu)

    ! Create fields for right-hand-side
    call self%rhs_u%initialise(vector_space = wu)
    call self%rhs_p%initialise(vector_space = wp)
    call self%rhs_p_tmp%initialise(vector_space = wp)
    call self%mb_rb%initialise(vector_space = wb)
    call self%hb_ru%initialise(vector_space = wu)

    ! Right-hand side and solution as a one-component field-vector in
    ! geopotential space
    self%geopot_b = field_vector_type(1)
    self%geopot_x = field_vector_type(1)

    ! Compute inverse approximate \f$ \tilde{M}_b^{-1} \f$
    call ones%initialise(vector_space = wb)
    call M_lumped%initialise(vector_space = wb)
    call self%Mb_lumped_inv%initialise(vector_space = wb)
    Mb => get_mass_matrix(W3, mesh_id)

    call invoke( setval_c( ones, 1.0_r_def ),                     &
                 setval_c( M_lumped, 0.0_r_def ),                 &
                 matrix_vector_kernel_type( M_lumped, ones, Mb ), &
                 X_divideby_Y( self%Mb_lumped_inv, ones, M_lumped ) )

    ! Set \f$ \tilde{H}_b^{-1}\f$
    call Hb_lumped_inv%copy_field(self%Hb_lumped_inv)

    ! Set geopotential solver
    self%swe_geopot_solver => geopot_solver

    call log_event( 'done', LOG_LEVEL_INFO )

  end function swe_mixed_schur_preconditioner_constructor

  !> @brief Apply the preconditioner to calculate \f$y = P.x\f$ for the
  !!        mixed system in velocity, geopotential and buoyancy.
  !>
  !> @details Apply the preconditioner in three steps, as described above:
  !!          1. Construct right-hand side for Helmholtz system
  !!          2. Approximately solve Helmholtz-system
  !!          3. Reconstruct velocity and buoyancy from geopotential
  !>
  !> @param[in,out] self Instance of type swe_mixed_schur_preconditioner_type
  !> @param[in]     x    Field-vector containing the residuals
  !!                     \f$(\textbf{R}_u,R_p,r_b)\f$
  !> @param[in,out] y    Field-vector containing the solution
  !!                     \f$(\textbf{U},P,B)\f$ to be calculated
  subroutine apply_swe_mixed_schur_preconditioner(self, x, y)

    implicit none

    class(swe_mixed_schur_preconditioner_type), intent(inout) :: self
    class(abstract_vector_type),                intent(in)    :: x
    class(abstract_vector_type),                intent(inout) :: y

    ! Workaround for PSyclone to get pointers of the correct type for y
    type(field_type), pointer :: y_vec_u => null(), &
                                 y_vec_g => null(), &
                                 y_vec_b => null()

    if ( subroutine_timers ) call timer('swe_mixed_schur_preconditioner_alg')

    select type(x)
    type is(field_vector_type)
      select type(y)
      type is(field_vector_type)

        ! Get pointers to y abstract type
        y_vec_u => y%get_field(isw_u)
        y_vec_g => y%get_field(isw_g)
        y_vec_b => y%get_field(isw_b)

        call invoke( setval_c( y_vec_u, 0.0_r_def ), &
                     setval_c( y_vec_g, 0.0_r_def ), &
                     setval_c( y_vec_b, 0.0_r_def ) )

        ! STEP 1: Build RHS for Helmholtz system
        call self%build_geopot_rhs(x)

        ! STEP 2: Solve Helmholtz system
        ! Krylov solver to obtain geopotential increment
        call invoke (setval_c(self%p_inc, 0.0_r_def) )
        call self%geopot_x%import_field(self%p_inc,1)
        ! (import required to initialise field)
        ! Copy RHS into 1-component field-vector
        call self%geopot_b%import_field(self%rhs_p,1)
        call log_event('Schur preconditioner geopotential solve:', LOG_LEVEL_INFO)
        call self%swe_geopot_solver%apply(self%geopot_x,self%geopot_b)
        ! Copy solution out of 1-component field-vector
        call self%geopot_x%export_field(self%p_inc,1)

        ! STEP 3: Back substitute to obtain other fields
        call self%back_substitute(y, x)
      class default
        write(log_scratch_space, '(A)') &
              "swe_mixed_schur_preconditioner_mod: incorrect vector_type argument y"
        call log_event(log_scratch_space, LOG_LEVEL_ERROR)
      end select

    class default
      write(log_scratch_space, '(A)') &
            "swe_mixed_schur_preconditioner_mod: incorrect vector_type argument x"
      call log_event(log_scratch_space, LOG_LEVEL_ERROR)
    end select

    nullify( y_vec_u, y_vec_g, y_vec_b )

    if ( subroutine_timers ) call timer('swe_mixed_schur_preconditioner_alg')

  end subroutine apply_swe_mixed_schur_preconditioner

  !> @brief Compute the right-hand-side for the Helmholtz-equation.
  !>
  !> @details Given the right-hand side \f$(\textbf{R}_u,R_p,R_b)\f$ for the
  !!          mixed system, build the right hand side \f$R^*_p\f$ for the
  !!          Helmholtz equation.
  !>
  !> @param[in,out] self Instance of type swe_mixed_schur_preconditioner_type
  !> @param[in]     rhs0 Initial residuals \f$(\textbf{R}_u,R_p,R_b)\f$ of the
  !!                     mixed system
  subroutine build_geopot_rhs(self,rhs0)

    use matrix_vector_kernel_mod,    only: matrix_vector_kernel_type
    use dg_matrix_vector_kernel_mod, only: dg_matrix_vector_kernel_type
    use enforce_bc_kernel_mod,       only: enforce_bc_kernel_type
    use transpose_matrix_vector_kernel_mod, &
                                     only: transpose_matrix_vector_kernel_type

    implicit none

    class(swe_mixed_schur_preconditioner_type), intent(inout) :: self
    type(field_vector_type),                    intent(in)    :: rhs0

    type(operator_type), pointer :: div => null(), M3_inv => null()
    real(kind=r_def) :: const1, const2

    ! Mesh ID
    integer(kind=i_def) :: mesh_id

    ! Thermal shallow water case
    ! rhs_u = R_u + alpha * dt * ref_gp/2 * D^T * Mb^-1 * R_b
    ! rhs_p = R_p - alpha * dt * ref_gp * M3^-1 * D * HB^-1 * rhs_u
    ! Non-thermal shallow water case
    ! rhs_u = R_u
    ! rhs_p = R_p - alpha * dt * ref_gp * M3^-1 * D * HB^-1 * rhs_u

    mesh_id = rhs0%vector(isw_u)%get_mesh_id()

    div => get_div(mesh_id)

    ! Compute rhs_u and enforce boundary conditions
    if ( thermal_swe ) then
      const1 = self%alpha*dt*ref_gp/2.0_r_def
      call invoke( X_times_Y( self%mb_rb,rhs0%vector(isw_b),self%Mb_lumped_inv ),      &
                   setval_c( self%rhs_u, 0.0_r_def ),                                  &
                   transpose_matrix_vector_kernel_type( self%rhs_u, self%mb_rb, div ), &
                   inc_aX_plus_Y( const1, self%rhs_u, rhs0%vector(isw_u) ),            &
                   enforce_bc_kernel_type( self%rhs_u ) )
    else
      call invoke( setval_c( self%rhs_u, 0.0_r_def ),              &
                   inc_X_plus_Y( self%rhs_u, rhs0%vector(isw_u) ), &
                   enforce_bc_kernel_type( self%rhs_u ) )
    end if

    ! Compute rhs_p
    M3_inv => get_inverse_w3_mass_matrix(mesh_id)
    const2 = -self%alpha*dt*ref_gp
    call invoke( X_times_Y( self%hb_ru, self%rhs_u, self%Hb_lumped_inv ),          &
                 dg_matrix_vector_kernel_type( self%rhs_p_tmp,self%hb_ru, div ),   &
                 dg_matrix_vector_kernel_type( self%rhs_p,self%rhs_p_tmp,M3_inv ), &
                 inc_aX_plus_Y( const2, self%rhs_p, rhs0%vector(isw_g) ) )

    call self%rhs_p%log_minmax(LOG_LEVEL_DEBUG,  'swe_geopot_rhs ')

  end subroutine build_geopot_rhs

  !> @brief Reconstruct velocity and buoyancy from geopotential.
  !>
  !> @details Given the geopotential \f$P\f$ from the solution of the
  !!          Helmholtz equation, reconstruct the velocity \f$\textbf{U}\f$
  !!          and buoyancy \f$B\f$.
  !>
  !> @param[in,out] self  instance of type swe_mixed_schur_preconditioner_type
  !> @param[in,out] state Solution \f$(\textbf{U},P,B)\f$ of the mixed system
  !> @param[in]     rhs   Initial right hand side \f$(\textbf{R}_u,R_p,R_b)\f$
  subroutine back_substitute(self, state, rhs)

    use transpose_matrix_vector_kernel_mod, &
                                  only: transpose_matrix_vector_kernel_type
    use enforce_bc_kernel_mod,    only: enforce_bc_kernel_type

    implicit none

    class(swe_mixed_schur_preconditioner_type), intent(inout) :: self
    type(field_vector_type),                    intent(inout) :: state
    type(field_vector_type),                    intent(in)    :: rhs

    type(operator_type), pointer :: div => null()
    real(kind=r_def) :: const1

    ! Mesh ID
    integer(kind=i_def) :: mesh_id

    ! U increment
    mesh_id = rhs%vector(isw_u)%get_mesh_id()
    div => get_div(mesh_id)
    const1 = self%alpha*dt
    call invoke( setval_c(self%u_inc, 0.0_r_def),                &
                 transpose_matrix_vector_kernel_type(self%u_inc, &
                                                     self%p_inc, &
                                                     div),       &
                 inc_aX_plus_Y(const1, self%u_inc, self%rhs_u),  &
                 inc_X_times_Y(self%u_inc, self%Hb_lumped_inv),  &
                 enforce_bc_kernel_type(self%u_inc) )
    ! b increment
    call invoke( setval_c(self%b_inc, 0.0_r_def) )
    if ( thermal_swe ) then
      call invoke( inc_X_plus_Y(self%b_inc, rhs%vector(isw_b)), &
                   inc_X_times_Y(self%b_inc, self%Mb_lumped_inv) )
    end if

    call self%u_inc%log_minmax(LOG_LEVEL_DEBUG,  'u increment')
    call self%p_inc%log_minmax(LOG_LEVEL_DEBUG,  'p increment')
    call self%b_inc%log_minmax(LOG_LEVEL_DEBUG,  'b increment')

    call invoke( inc_X_plus_Y(state%vector(isw_u), self%u_inc), &
                 inc_X_plus_Y(state%vector(isw_g), self%p_inc), &
                 inc_X_plus_Y(state%vector(isw_b), self%b_inc) )

    nullify(div)

  end subroutine back_substitute

  !> @brief Destructor
  !>
  !> @param[in,out] self Instance of type to be destroyed
  subroutine destroy_swe_mixed_schur_preconditioner(self)
    implicit none
    type(swe_mixed_schur_preconditioner_type), intent(inout) :: self

  end subroutine destroy_swe_mixed_schur_preconditioner

end module swe_mixed_schur_precon_alg_mod
