' Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
' For further details please refer to the file LICENCE.original which you
' should have received as part of this distribution.

interface ugrid_file_mod::ugrid_file_type{

  +{abstract} read_mesh( <<in>> mesh_name: string, <<out>> geometry: string, <<out>> topology: string, <<out>> coord_sys: string,
 <<out>> periodic_x: logical, <<out>> periodic_y: logical, <<out>> constructor_inputs: string, <<out>> node_coordinates: real[::], <<out>> face_coordinates: real[::], <<out>> coord_units_x: string, <<out>> coord_units_y: string, <<out>> face_node_connectivity: integer[::], <<out>> edge_node_connectivity: integer[::], <<out>> face_edge_connectivity: integer[::], <<out>> face_face_connectivity: integer[::], <<out>> num_targets: integer,<<out>> target_mesh_names: string[:] <<allocatable>> )
  +{abstract} read_map( <<in>> source_mesh_name: string, <<in>> target_mesh_name: string, <<out>> mesh_map: integer[:::] <<allocatable>> )

+{abstract} write_mesh(<<in>> mesh_name: string,<<in>> geometry: string,<<in>> topology: string,<<in>> coord_sys: string,<<in>> periodic_x: logical,<<in>> periodic_y: logical,<<in>> constructor_inputs: string,<<in>> num_nodes: integer,<<in>> num_edges: integer,<<in>> num_faces: integer,<<in>> node_coordinates: real[::],<<in>> face_coordinates: real[::],<<in>> coord_units_x: string,<<in>> coord_units_y: string,<<in>> face_node_connectivity: integer[::],<<in>> edge_node_connectivity: integer[::],<<in>> face_edge_connectivity: integer[::],<<in>> face_face_connectivity: integer[::],<<in>> num_targets: integer,<<in, allocatable>> target_mesh_names: string[:],<<in, pointer>> target_mesh_maps: global_mesh_map_collection_type )

  +{abstract} append_mesh(<<in>> mesh_name: string,<<in>> geometry: string,<<<in>> topology: string,<<in>> coord_sys: string,<<in>> periodic_x: logical,<<in>> periodic_y: logical,<<in>> constructor_inputs: string,<<in>> num_nodes: integer,<<in>> num_edges: integer,<<in>> num_faces: integer,<<in>> node_coordinates: real[::],<<in>> face_coordinates: real[::],<<in>> coord_units_x: string,<<in>> coord_units_y: string,<<in>> face_node_connectivity: integer[::],<<in>> edge_node_connectivity: integer[::],<<in>> face_edge_connectivity: integer[::],<<in>> face_face_connectivity: integer[::],<<in>> num_targets: integer,
<<in, allocatable>> target_mesh_names: string[:],<<in>, pointer> target_mesh_maps: global_mesh_map_collection_type )

  +{abstract} get_dimensions( <<in>> mesh_name: string, <<out>> num_nodes: integer, <<out>> num_edges: integer, <<out>> num_faces: integer, <<out>> num_nodes_per_face: integer, <<out>> num_edges_per_face: integer, <<out>> num_nodes_per_edge: integer, <<out>> max_num_faces_per_node: integer )

  +{abstract} get_mesh_names( <<out>> mesh_names: string[:] )

  +{abstract} get_n_meshes() :  integer

  +{abstract} is_mesh_present( <<in>> mesh_name:string ): logical

}


ugrid_file_mod::ugrid_file_type -left-|> file_mod::file_type

