' Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
' For further details please refer to the file LICENCE.original which you
' should have received as part of this distribution.

class mesh_mod::mesh_type {
  -mesh_name: string
  -reference_element : reference_element_type <<allocatable>>
  -local_mesh : local_mesh_type <<pointer>>
  -domain_size : domain_size_type
  -nlayers : integer
  -domain_top : real
  -domain_bottom : real
  -extrusion_id : integer
  -eta : real[:] <<allocatable>>
  -dz : real[:] <<allocatable>>
  -vertex_coords : real[::] <<allocatable>>
  -nverts_2d : integer
  -nedges_2d : integer
  -ncells_2d : integer
  -ncells_2d_with_ghost : integer
  -nverts_per_2d_cell : integer
  -nverts_per_edge : integer
  -nedges_per_2d_cell : integer
  -nverts : integer
  -nedges : integer
  -nfaces : integer
  -ncells : integer
  -ncells_with_ghost : integer
  -nverts_per_cell : integer
  -nedges_per_cell : integer
  -nfaces_per_cell : integer
  -cell_next : integer[::] <<allocatable>>
  -vert_on_cell : integer[::] <<allocatable>>
  -face_on_cell : integer[::] <<allocatable>>
  -edge_on_cell : integer[::] <<allocatable>>
  -vert_cell_owner : integer[::] <<allocatable>>
  -edge_cell_owner : integer[::] <<allocatable>>
  -vertex_ownership : integer[::] <<allocatable>>
  -edge_ownership : integer[::] <<allocatable>>
  -face_id_in_adjacent_cell : integer[::] <<allocatable>>
  -ncolours : integer
  -ncells_per_colour : integer[:] <<allocatable>>
  -cells_in_colour : integer[::] <<allocatable>>
  -ncells_per_colour_subset : integer[::] <<allocatable>>
  -last_inner_cell_per_colour : integer[::] <<allocatable>>
  -last_halo_cell_per_colour : integer[::] <<allocatable>>
  -last_edge_cell_per_colour : integer[:] <<allocatable>>
  -mesh_maps : mesh_map_collection_type <<allocatable>>

  +<<create>>  mesh_constructor( <<in>>local_mesh: local_mesh_type <<pointer>>, <<in>>extrusion: extrusion_type, <<in,optional>>mesh_name:string ) : mesh_type
  +<<create>>  mesh_constructor_unit_test_data( <<in>>mesh_cfg: integer, <<in>>local_mesh: local_mesh_type <<pointer>> ) : mesh_type
  +<<destroy>> mesh_destructor()
  +clear()

  +get_mesh_name() : string
  +get_reference_element() : reference_element_type <<pointer>>
  +get_partition() <<deprecated>> : partition_type <<pointer>>
  +get_local_mesh() : local_mesh_type <<pointer>>
  +get_nlayers() : integer
  +get_ncells_2d() : integer
  +get_ncells_2d_with_ghost() : integer
  +get_nedges_2d() : integer
  +get_nverts_2d() : integer
  +get_ncells() : integer
  +get_nverts() : integer
  +get_nedges() : integer
  +get_nfaces() : integer
  +get_vert_coords( <<in>>vert_lid: integer, <<out>>vertex_coords: real[:] )
  +get_cell_coords( <<in>>cell_lid: integer, <<out>>cell_coords: real[::] )
  +get_column_coords( <<in>>cell_lid: integer, <<out>>column_coords: real[:::] )
  +get_nverts_per_cell() : integer
  +get_nverts_per_cell_2d() : integer
  +get_nverts_per_edge() : integer
  +get_nedges_per_cell() : integer
  *get_nedges_per_cell_2d() : integer
  +get_nfaces_per_cell() : integer
  +get_cell_next( <<in>>iface: integer, <<in>>cell_lid: integer ) : integer
  +get_face_on_cell( <<in>>iface: integer, <<in>>icell: integer ) : integer
  +get_edge_on_cell( <<in>>iedge: integer, <<in>>icell: integer ) : integer
  +get_vert_on_cell( <<in>>ivert: integer, <<in>>icell: integer ) : integer
  +get_domain_size() : domain_size_type
  +get_domain_top() : real
  +get_extrusion_id() : integer
  +get_dz( <<out>>dz: real[:] )
  +get_eta( <<out>>eta: real[:] )
  +get_vertex_cell_owner( <<in>>vertex_index: integer, <<in>>cell_lid: integer ) : integer
  +get_edge_cell_owner( <<in>>edge_index: integer, <<in>>cell_lid: integer ) : integer
  +is_vertex_owned( <<in>>vertex_index: integer, <<in>>cell_lid: integer ) : logical
  +is_edge_owned( <<in>>edge_index: integer, <<in>>cell_lid: integer ) : logical
  +is_cell_owned( <<in>>cell_lid: integer) : integer
  +get_num_edges_owned_2d() : integer
  +get_num_verts_owned_2d() : integer
  +get_inner_depth() : integer
  +get_num_cells_inner( <<in>>depth: integer ) : integer
  +get_last_inner_cell( <<in>>depth: integer ) : integer
  +get_last_inner_cell_per_colour( <<in>>colour: integer, <<in>>colour: depth ) : integer
  +get_last_inner_cell_all_colours() : integer[::]
  +get_num_cells_edge() : integer
  +get_last_edge_cell() : integer
  +get_last_edge_cell_per_colour( <<in>>colour: integer ) : integer
  +get_last_edge_cell_all_colours() : integer[:]
  +get_halo_depth() : integer
  +get_num_cells_halo( <<in>>depth: integer ) : integer
  +get_last_halo_cell() : integer
  +get_last_halo_cell( <<in>>depth: integer ) : integer
  +get_last_halo_cell_per_colour( <<in>>colour: integer ) : integer
  +get_last_halo_cell_per_colour( <<in>>colour: integer, <<in>>depth: integer ) : integer
  +get_last_halo_cell_all_colours() : integer[::]
  +get_last_halo_cell_all_colours_deepest() : integer[:]
  +get_num_cells_ghost() : integer
  +get_gid_from_lid( <<in>>cell_lid: integer ) : integer
  +get_mesh_map( <<in>>target_mesh: mesh_type <<pointer>> ) : mesh_map_type <<pointer>>
  +add_mesh_map( <<in>>target_mesh: mesh_type <<pointer>> )
  +get_adjacent_face() : integer <<pointer>>
  +get_ncolours() : integer
  +get_colours( <<out>>ncolours: integer, <<out>>ncells_per_colour: integer[:] <<pointer>>, <<out>>colour_map: integer[::] <<pointer>> )
  +get_colour_map() : integer <<pointer>>
  +is_coloured() : logical
  +is_geometry_spherical(): logical
  +is_geometry_planar(): logical
  +is_topology_non_periodic(): logical
  +is_topology_channel(): logical
  +is_topology_periodic(): logical
  +is_coord_sys_xyz(): logical
  +is_coord_sys_ll(): logical
}
