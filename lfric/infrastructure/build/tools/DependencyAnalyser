#!/usr/bin/env python
# -*- coding: utf-8 -*-
##############################################################################
# Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
# For further details please refer to the file LICENCE.original which you
# should have received as part of this distribution.
##############################################################################
'''
Examine a file and determine any dependencies it has. Both Fortran source and
namelist description files are supporetd.

This snippet consists of a dependency list built up from the modules a
file "use"s.

This snippet may then be "include"ed into other make files.
'''

import argparse
import logging
from pathlib import Path

from dependerator import __version__
import dependerator.analyser as analyser
import dependerator.database as database

###############################################################################
# Entry point

if __name__ == '__main__':
    parser = argparse.ArgumentParser(add_help=False, description=__doc__)
    parser.add_argument('-help', '-h', '--help', action='help',
                        help='Show this help message and exit')
    parser.add_argument('-version', action='version',
                        version='%(prog)s {}'.format(__version__))
    parser.add_argument('-verbose', action='store_true',
                        help='Provide a running commentry')
    parser.add_argument('-debug', action='store_true',
                        help='Illucidate the minutia of execution')
    parser.add_argument('-ignore', metavar='MODULE', action='append',
                        default=[],
                        help='A 3rd party module name to be ignored. '
                             + 'This may appear multiple times.')
    parser.add_argument('-macro', metavar='NAME[=MACRO]', action='append',
                        default=[],
                        help='Macro definitions to be passed to preprocessor.')
    parser.add_argument('database', metavar='database-file',
                        help='Database file to use')
    parser.add_argument('source', metavar='source-file',
                        help='The source file.')
    args = parser.parse_args()

    logger = logging.getLogger('dependerator')
    logger.addHandler(logging.StreamHandler())
    if args.debug:
        logger.setLevel(logging.DEBUG)
    elif args.verbose:
        logger.setLevel(logging.INFO)
    else:
        logger.setLevel(logging.WARNING)

    macroDictionary = {}
    for macroString in args.macro:
        if '=' in macroString:
            equals = macroString.index('=')
            name = macroString[:equals]
            macro = macroString[equals + 1:]
            macroDictionary[name] = macro
        else:
            macroDictionary[macroString] = None

    backend = database.SQLiteDatabase(args.database)
    namelistStore = database.FileDependencies(backend)
    namelistAnalyser = analyser.NamelistDescriptionAnalyser(namelistStore)
    fortranStore = database.FortranDependencies(backend)
    fortranAnalyser = analyser.FortranAnalyser(args.ignore, fortranStore)
    if args.source.endswith('.nld'):
        namelistAnalyser.analyse(args.source)
    else:
        fortranAnalyser.analyse(Path(args.source), macroDictionary)
