#!/usr/bin/env python
# -*- coding: utf-8 -*-
##############################################################################
# Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
# For further details please refer to the file LICENCE.original which you
# should have received as part of this distribution.
##############################################################################
"""
Generate a make file snippet holding build information about a Fortran
program.

This snippet consists of a list of objects required to link an program.

This snippet may then be "include"ed into other make files.
"""

import argparse
import logging
import os
import sys
import traceback
from time import time

import dependerator.database as database
import dependerator.process as process
from dependerator import __version__

###############################################################################
# Entry point

if __name__ == '__main__':
    parser = argparse.ArgumentParser(add_help=False,
                                     description=__doc__)
    parser.add_argument('-help', '-h', '--help', action='help',
                        help='Show this help message and exit')
    parser.add_argument('-version', action='version',
                        version='%(prog)s {}'.format(__version__))
    parser.add_argument('-verbose', action='store_true',
                        help='Provide a running commentary')
    parser.add_argument('-debug', action='store_true',
                        help='Illucidate the minutia of execution')
    parser.add_argument('-database', metavar='database-file',
                        help='Database file to use')
    parser.add_argument('-objectdir', metavar='object-directory',
                        help='Object files are here. '
                             + 'Defaults to the output directory.')
    parser.add_argument('output', metavar='output-file',
                        help='Dependency details are put here')
    args = parser.parse_args()

    logger = logging.getLogger('dependerator')
    logger.addHandler(logging.StreamHandler())
    if args.debug:
        logger.setLevel(logging.DEBUG)
    elif args.verbose:
        logger.setLevel(logging.INFO)
    else:
        logger.setLevel(logging.WARNING)

    if os.path.exists(args.output):
        os.unlink(args.output)

    outputDirectory = os.path.dirname(args.output)
    if outputDirectory and not os.path.exists(outputDirectory):
        os.makedirs(outputDirectory)

    if not args.database:
        args.database = os.path.join(outputDirectory, 'dependencies.db')
    if not args.objectdir:
        args.objectdir = outputDirectory

    dependencyBackend = database.SQLiteDatabase(args.database)
    dependencyStore = database.FortranDependencies(dependencyBackend)
    processor = process.FortranProcessor(dependencyStore, args.objectdir, None)

    start_time = time()
    try:
        with open(args.output, 'wt') as listFile:
            print('# Program objects', file=listFile)
            programs = []
            for program, objects in processor.determineLinkDependencies():
                programs.append(program + '.o')
                text = '{program}_OBJS = {objects}'
                print(text.format(program=os.path.basename(program).upper(),
                                  objects=' '.join(objects)),
                      file=listFile)
                print(file=listFile)

            text = 'PROG_OBJS = {objects}'
            print(text.format(objects=' '.join(programs)),
                  file=listFile)
    except:
        os.unlink(args.output)
        traceback.print_exc(file=sys.stdout)
        sys.exit(1)
    finally:
        message = 'Time to write out program objects: {0}'
        logger.debug(message.format(time() - start_time))
