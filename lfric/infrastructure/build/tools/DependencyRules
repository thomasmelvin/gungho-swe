#!/usr/bin/env python
# -*- coding: utf-8 -*-
##############################################################################
# Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
# For further details please refer to the file LICENCE.original which you
# should have received as part of this distribution.
##############################################################################
'''
Generate a make file snippet holding dependency information about a Fortran
program.

This snippet may then be "include"ed into other make files.
'''

import argparse
import logging
import os
import sys
import traceback
from time import time

import dependerator.database as database
import dependerator.process as process
from dependerator import __version__
from utilities.path import replaceExtension

###############################################################################
# Entry point

if __name__ == '__main__':
    parser = argparse.ArgumentParser(add_help=False,
                                     description=__doc__)
    parser.add_argument('-help', '-h', '--help', action='help',
                        help='Show this help message and exit')
    parser.add_argument('-version', action='version',
                        version='%(prog)s {}'.format(__version__))
    parser.add_argument('-verbose', action='store_true',
                        help='Provide a running commentary')
    parser.add_argument('-debug', action='store_true',
                        help='Illucidate the minutia of execution')
    parser.add_argument('-database', metavar='database-file',
                        help='Database file to use')
    parser.add_argument('-moduledir', metavar='module-directory',
                        help='Fortran module files are here.'
                             + 'Defaults to the output directory. ')
    parser.add_argument('-objectdir', metavar='object-directory',
                        help='Object files are here. '
                             + 'Defaults to the output directory.')
    parser.add_argument('-moduleobjects', action='store_true',
                        help='The compiler puts module information in object '
                             'files.')
    parser.add_argument('output', metavar='output-file',
                        help='Dependency details are put here')
    args = parser.parse_args()

    logger = logging.getLogger('dependerator')
    logger.addHandler(logging.StreamHandler())
    if args.debug:
        logger.setLevel(logging.DEBUG)
    elif args.verbose:
        logger.setLevel(logging.INFO)
    else:
        logger.setLevel(logging.WARNING)

    if os.path.exists(args.output):
        os.unlink(args.output)

    outputDirectory = os.path.dirname(args.output)
    if outputDirectory and not os.path.exists(outputDirectory):
        os.makedirs(outputDirectory)

    if not args.database:
        args.database = os.path.join(outputDirectory, 'dependencies.db')
    if not args.moduledir:
        args.moduledir = outputDirectory
    if not args.objectdir:
        args.objectdir = outputDirectory

    backend = database.SQLiteDatabase(args.database)
    fortranStore = database.FortranDependencies(backend)
    processor = process.FortranProcessor(fortranStore,
                                         args.objectdir, args.moduledir)

    fileStore = database.FileDependencies(backend)
    processor.determineCompileFileDependencies(fileStore, args.moduleobjects)

    start_time = time()
    try:
        with open(args.output, 'wt') as listFile:
            print('# Object dependencies', file=listFile)

            for filenames, prerequisites in fileStore.getDependencies():

                prereq_strings = [str(prereq) for prereq in prerequisites]
                print('{} : {}'.format(filenames, ' '.join(prereq_strings)),
                      file=listFile)
    except:
        os.unlink(args.output)
        traceback.print_exc(file=sys.stdout)
        sys.exit(1)
    finally:
        message = 'Time to write out dependencies: {0}'
        logger.debug(message.format(time() - start_time))
