{#- This is the skeleton of the namelist loading module.                   -#}
{#- The Jinja templating library is used to insert the actual code.        -#}

!-----------------------------------------------------------------------------
! (C) Crown copyright 2022 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!> Manages the {{listname}} namelist.
!>
module {{listname}}_config_mod

  use constants_mod, only: {{all_kinds | sort | join( ', &\n' + ' '*27 )}}
  use log_mod,       only: log_event, log_scratch_space &
                         , LOG_LEVEL_ERROR, LOG_LEVEL_WARNING, LOG_LEVEL_INFO
  use mpi_mod,       only: broadcast
  use mpi,           only: MPI_SUCCESS
{%- for module, symbols in use_from | dictsort %}
{%-   if loop.first %}{{'\n'}}{% endif %}
  use {{module}}, only: {{symbols | sort | join(', ')}}
{%- endfor %}

  implicit none

  private
  public ::
{%- for name in enumerations | sort %}
{{- ' '}}{{name}}_from_key, key_from_{{name}}, &{{'\n'}}{{' ' * 11}}
{%- endfor %}
{{- ' '}}read_{{listname}}_namelist, postprocess_{{listname}}_namelist, &
{{' '*12}}{{listname}}_is_loadable, {{listname}}_is_loaded, {{listname}}_final

{%- for name in enumerations | sort %}
{%-   if loop.first %}{{'\n'}}{%- endif %}
{%-   for key, value in parameters[name].mapping | dictsort %}
  integer(i_native), public, parameter :: {{name}}_{{key}} = {{value}}
{%-   endfor %}
{%- endfor %}

{%- if arrays %}{{ '\n' }}
  integer(i_native), parameter, public :: max_array_size = 100
{%- endif %}

{%- for name, parameter in parameters | dictsort %}
{%-   if loop.first %}{{'\n'}}{%- endif %}
{%-   if parameter.get_configure_type() == 'enumeration' %}
  integer(i_native), public, protected :: {{parameter.name}} = {{parameter.missing_data_indicator}}
{%-   elif parameter.get_configure_type() == 'array' %}
{%-     if parameter.is_immediate_size() %}
  {{parameter.fortran_type.declaration()}}, public, protected :: {{parameter.name}}({{parameter.bounds[0]}}) = {{parameter.missing_data_indicator}}
{%-     else %}
  {{parameter.fortran_type.declaration()}}, public, protected, allocatable :: {{parameter.name}}(:)
{%-     endif %}
{%-   else %}
  {{parameter.fortran_type.declaration()}}, public, protected :: {{parameter.name}} = {{parameter.missing_data_indicator}}
{%-   endif %}
{%- endfor %}

  logical :: namelist_loaded = .false.

{%- for name in enumerations | sort %}
{%-   if loop.first %}{{'\n'}}{%- endif %}
  character(str_def), parameter :: {{name}}_key({{parameters[name].mapping | length()}}) &
{%    set indent = '          = [character(len=str_def) :: ' %}
{%-   for key, value in parameters[name].mapping | dictsort %}
{%-       if not loop.first %}
{%-         set indent = ' ' * indent | length() -%}
, &{{'\n'}}
{%-        endif %}
{{- indent }}'{{ key }}'
{%-     endfor %}]
{%-   endfor %}

{%- for name in enumerations | sort %}
{%-   if loop.first %}{{'\n'}}{%- endif %}
  integer(i_native), parameter :: {{name}}_value({{parameters[name].mapping | length()}}) &
{%    set indent = '          = [' %}
{%-   for key, value in parameters[name].mapping | dictsort %}
{%-       if not loop.first %}
{%-         set indent = ' ' * indent | length() -%}
, &{{'\n'}}
{%-        endif %}
{{- indent }}{{ value }}_i_native
{%-     endfor %}]
{%-   endfor %}

contains

{%- for name in enumerations | sort %}
{%-   if loop.first %}{{'\n'}}{%- endif %}
  !> Gets the enumeration value from the key string.
  !>
  !> An error is reported if the key is not actually a key.
  !>
  !> @param[in] key Enumeration key.
  !>
  integer(i_native) function {{name}}_from_key( key )

    implicit none

    character(*), intent(in) :: key

    integer(i_native) :: key_index

    if (key == unset_key) then
      write( log_scratch_space, '(A)') &
          'Missing key for {{name}} enumeration in {{listname}} namelist.'
      {{name}}_from_key = emdi
      call log_event( log_scratch_space, LOG_LEVEL_WARNING )
      return
    end if

    key_index = 1
    do
      if (trim({{name}}_key(key_index)) == trim(key)) then
        {{name}}_from_key = {{name}}_value(key_index)
        return
      else
        key_index = key_index + 1
        if (key_index > ubound({{name}}_key, 1)) then
          write( log_scratch_space, &
              '("Key ''", A, "'' not recognised for {{listname}} {{name}}")' ) &
              trim(adjustl(key))
          call log_event( log_scratch_space, LOG_LEVEL_ERROR )
        end if
      end if
    end do

  end function {{name}}_from_key

  !> Gets the enumeration key corresponding to a particular value.
  !>
  !> An error is reported if the value is not within range.
  !>
  !> @param[in] value Enumeration value.
  !>
  character(str_def) function key_from_{{name}}( value )

    implicit none

    integer(i_native), intent(in) :: value

    integer(i_native) :: value_index

    value_index = 1
    do
      if ({{name}}_value(value_index) == emdi) then
        key_from_{{name}} = unset_key
        return
      else if ({{name}}_value(value_index) == value) then
        key_from_{{name}} = {{name}}_key(value_index)
        return
      else
        value_index = value_index + 1
        if (value_index > ubound({{name}}_key, 1)) then
          write( log_scratch_space, &
                 '("Value ", I0, " is not in {{listname}} {{name}}")' ) value
          call log_event( log_scratch_space, LOG_LEVEL_ERROR )
        end if
      end if
    end do

  end function key_from_{{name}}
{%-   if not loop.last %}{{'\n'}}{% endif %}
{%- endfor %}

  !> Populates this module from a namelist file.
  !>
  !> An error is reported if the namelist could not be read.
  !>
  !> @param [in] file_unit Unit number of the file to read from.
  !> @param [in] local_rank Rank of current process.
  !>
  subroutine read_{{listname}}_namelist( file_unit, local_rank )

    implicit none

    integer(i_native), intent(in) :: file_unit
    integer(i_native), intent(in) :: local_rank

    call read_namelist( file_unit, local_rank
{%- if enumerations -%}
{%-   for name in enumerations | sort %}
{%-     if loop.first %}{{', &\n'}}{%- endif -%}
{{' ' * 24}}{{name}}
{%-     if not loop.last %}{{', &\n'}}{%- endif -%}
{%-   endfor %} )
{%- else -%}
{{' )'}}
{%- endif %}

  end subroutine read_{{listname}}_namelist

  ! Reads the namelist file.
  !
  subroutine read_namelist( file_unit, local_rank
{%- if enumerations -%}
{%-   for name in enumerations | sort | decorate( 'dummy_' ) %}
{%-     if loop.first %}{{', &\n'}}{%- endif -%}
{{' ' * 28}}{{name}}
{%-     if not loop.last %}{{', &\n'}}{%- endif -%}
{%-   endfor %} )
{%- else -%}
{{' )'}}
{%- endif %}

{%- set ns = namespace(drefvars=false) %}
{%- for name, parameter in parameters | dictsort %}
{%-   if parameter.dereferenced_list_vars %}
{%-     set ns.drefvars = true %}{%- endif %}
{%- endfor %}
{{'\n'}}
{%- if ns.drefvars -%}
{{'    use constants_mod, only: i_def, r_def'}}
{%- else -%} 
{{'    use constants_mod, only: i_def'}}
{%- endif %}

    implicit none

    integer(i_native), intent(in) :: file_unit
    integer(i_native), intent(in) :: local_rank
    integer(i_def)                :: missing_data
{%- for name in enumerations | sort %}
    integer(i_native), intent(out) :: dummy_{{name}}
{%- endfor %}

{%- for ftype, count in lonekindtally|dictsort %}
{%-   if loop.first %}{{'\n'}}{% endif %}
{%-   if ftype.intrinsic_type == 'logical' %}
    integer(i_native) :: buffer_{{ftype.label()}}({{count}})
{%-   else %}
    {{ftype.declaration()}} :: buffer_{{ftype.label()}}({{count}})
{%-   endif %}
{%- endfor %}

{%- for name in enumerations | sort %}
{%-   if loop.first %}{{'\n'}}{%- endif %}
    character(str_def) :: {{name}}
{%- endfor %}

    namelist /{{listname}}/ {{namelist|sort|join(', &\n' + ' '*(16+listname|length))}}

    integer(i_native) :: condition

    missing_data = 0
{%- if arrays %}
{{-   '\n'}}
{%-   for name in arrays %}
{%-     if not parameters[name].is_immediate_size() %}
    allocate( {{name}}(max_array_size), stat=condition )
    if (condition /= 0) then
      write( log_scratch_space, '(A)' ) &
            'Unable to allocate temporary array for "{{name}}"'
      call log_event( log_scratch_space, LOG_LEVEL_ERROR )
    end if
{%-     endif %}
{%-   endfor %}
{%- endif %}

{%- for name, parameter in parameters | dictsort %}
{%-   if loop.first %}{{'\n'}}{%- endif %}
{%-   if parameter.fortran_type.intrinsic_type == "integer" %}
{%-     if parameter.get_configure_type() == 'enumeration' %}
    {{name}} = unset_key
{%-     else %}
    {{name}} = imdi
{%-     endif %}
{%-   elif parameter.fortran_type.intrinsic_type == "real" %}
    {{name}} = rmdi
{%-   elif parameter.fortran_type.intrinsic_type == "logical" %}
    {{name}} = .false.
{%-   elif parameter.fortran_type.intrinsic_type == "character" %}
    {{name}} = cmdi
{%-   endif %}
{%- endfor %}

    if (local_rank == 0) then

      read( file_unit, nml={{listname}}, iostat=condition, iomsg=log_scratch_space )
      if (condition /= 0) then
        call log_event( log_scratch_space, LOG_LEVEL_ERROR )
      end if

{%- for name in enumerations | sort %}
{%-   if loop.first %}{{'\n'}}{%- endif %}
      dummy_{{name}} = {{name}}_from_key( {{name}} )
{%- endfor %}

    end if

{%- for name, index in lonekindindex|dictsort %}
{%-   if loop.first %}{{'\n'}}{% endif %}
{%-   if parameters[name].get_configure_type() == 'enumeration' %}
    buffer_{{parameters[name].fortran_type.label()}}({{index}}) = dummy_{{name}}
{%-   elif parameters[name].fortran_type.intrinsic_type == 'logical' %}
    buffer_{{parameters[name].fortran_type.label()}}({{index}}) = merge( 1, 0, {{name}} )
{%-   else %}
    buffer_{{parameters[name].fortran_type.label()}}({{index}}) = {{name}}
{%-   endif %}
{%- endfor %}

{%- for ftype, count in lonekindtally|dictsort %}
{%-   if loop.first %}{{'\n'}}{%- endif %}
    call broadcast(
{{-   ' buffer_' + ftype.intrinsic_type + '_' + ftype.kind }}
{{-   ', '}}{{count}}
{%-   if ftype.intrinsic_type == 'character' %}
{{-     '*' + ftype.kind }}
{%-   endif %}
{{-   ', 0 )'}}
{%- endfor %}

{%- for name, index in lonekindindex|dictsort %}
{%-   if loop.first %}{{'\n'}}{%- endif %}
{%-   if parameters[name].get_configure_type() == 'enumeration' %}
    dummy_{{name}} = buffer_{{parameters[name].fortran_type.label()}}({{index}})
{%-   elif parameters[name].fortran_type.intrinsic_type == 'logical' %}
    {{name}} = buffer_{{parameters[name].fortran_type.label()}}({{index}}) /= 0
{%-   else %}
    {{name}} = buffer_{{parameters[name].fortran_type.label()}}({{index}})
{%-   endif %}
{%- endfor %}

{%- for name, parameter in parameters | dictsort %}
{%-   if loop.first %}{{'\n'}}{% endif %}
{%-   if parameter.get_configure_type() == 'computed' %}
{%-     if parameter.dereferenced_list_vars %}
   ! Parameter name {{name}}: dereferenced_list_vars are: {{parameter.dereferenced_list_vars}}
    missing_data = 0
{%-       for var in parameter.dereferenced_list_vars %}
    if (kind({{var}}) == r_def) then
       if (real({{var}}, r_def) == rmdi) missing_data = missing_data + 1
    else if (kind({{var}}) == i_def) then
       if (int({{var}}, i_def)  == imdi) missing_data = missing_data + 1
    end if
{%-       endfor %}
    if ( missing_data >=1 ) then
       {{parameter.name}} = {{parameter.missing_data_indicator}}
    else
       {{parameter.name}} = {{parameter.computation}}
    end if
{%-     else %}
   ! Parameter name {{name}}: derived by computation
    {{parameter.name}} = {{parameter.computation}}
{%-     endif %}
{%-   endif %}
{%- endfor %}

{%- for name in arrays|sort %}
{%-   if loop.first %}{{'\n'}}{% endif %}
    call broadcast( {{name}}, size({{name}}, 1)
{%-   if parameters[name].fortran_type.intrinsic_type == 'character' %}
{{-   '*' + parameters[name].fortran_type.kind }}
{%-  endif %}
{{-   ', 0 )' }}
{%- endfor %}

    namelist_loaded = .true.

  end subroutine read_namelist

  !> Performs any processing to be done once all namelists are loaded
  !>
  subroutine postprocess_{{listname}}_namelist()

    implicit none

{%- if arrays %}{{'\n'}}
    integer(i_native) :: condition
    integer(i_native) :: array_size
{%- endif %}

{%- for name in arrays %}
{%-   set parameter = parameters[name] %}
{%-   if not parameter.is_immediate_size() %}
    {{parameter.fortran_type.declaration()}}, allocatable :: new_{{name}}(:)
{%-   endif %}
{%-   if parameter.is_arbitrary_size() %}
    integer(i_native) :: index_{{name}}
{%-   endif %}
{%- endfor %}
{%- if arrays %}{{'\n'}}
    condition  = 0
    array_size = 0
{%- endif %}
{{- '\n'}}
{%-  for name in arrays %}
{%-   set parameter = parameters[name] %}
{%-   if parameter.is_arbitrary_size() %}
    do index_{{name}}=ubound({{name}}, 1), 1, -1
      if ({{name}}(index_{{name}}) /= {{parameter.content.missing_data_indicator}}) exit
    end do
    array_size = index_{{name}}
{%-   endif %}
{%-   if parameter.is_deferred_size() %}
    array_size = {{parameter.bounds}}
{%-   endif %}
{%-   if not parameter.is_immediate_size() %}
    allocate( new_{{name}}(array_size), stat=condition )
    if (condition /= 0) then
      write(log_scratch_space, '(A)') 'Unable to allocate "{{name}}"'
      call log_event( log_scratch_space, LOG_LEVEL_ERROR )
    end if
    new_{{name}}(:array_size) = {{name}}(:array_size)
    call move_alloc( new_{{name}}, {{name}} )
    if (allocated(new_{{name}})) deallocate( new_{{name}})
{%-   endif %}
{%- endfor %}

  end subroutine postprocess_{{listname}}_namelist

  !> Can this namelist be loaded?
  !>
  !> @return True if it is possible to load the namelist.
  !>
  function {{listname}}_is_loadable()

    implicit none

    logical :: {{listname}}_is_loadable

    {{listname}}_is_loadable = .not. namelist_loaded

  end function {{listname}}_is_loadable

  !> Has this namelist been loaded?
  !>
  !> @return True if the namelist has been loaded.
  !>
  function {{listname}}_is_loaded()

    implicit none

    logical :: {{listname}}_is_loaded

    {{listname}}_is_loaded = namelist_loaded

  end function {{listname}}_is_loaded

  !> Clear out any allocated memory
  !>
  subroutine {{listname}}_final()

    implicit none

{%- for name, parameter in parameters | dictsort %}
{%-   if loop.first %}{{'\n'}}{%- endif %}
{%-   if name not in allocatables %}
{%-     if parameter.fortran_type.intrinsic_type == "integer" %}
{%-       if parameter.get_configure_type() == 'enumeration' %}
    {{name}} = emdi
{%-       else %}
    {{name}} = imdi
{%-       endif %}
{%-     elif parameter.fortran_type.intrinsic_type == "real" %}
    {{name}} = real(rmdi,{{parameters[name].fortran_type.kind}})
{%-     elif parameter.fortran_type.intrinsic_type == "logical" %}
    {{name}} = .false.
{%-     elif parameter.fortran_type.intrinsic_type == "character" %}
    {{name}} = cmdi
{%-     endif %}
{%-   endif %}
{%- endfor %}

{%- if allocatables %}
{%-   for name in allocatables | sort %}
{%-   set parameter = parameters[name] %}
{%-     if loop.first %}{{'\n'}}{%- endif %}
    if ( allocated({{parameter.name}}) ) deallocate({{parameter.name}})
{%-   endfor %}
{%- endif %}

    return
  end subroutine {{listname}}_final


end module {{listname}}_config_mod
