#!/usr/bin/env python
# -*- coding: utf-8 -*-
##############################################################################
# Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
# For further details please refer to the file LICENCE.original which you
# should have received as part of this distribution.
##############################################################################
'''
Process the Cylc logs generated by building the Doxygen API documentation and
generate a web page of results.
'''
from __future__ import print_function

import argparse
import os
import os.path
import re
import stat

import parserender.parser as parser
import parserender.renderer as renderer

_FOLLOWING_PARAMETERS_PATTERN \
    = re.compile(r'The following parameters of (.+?)'
                 r' are not documented:\s+(.*)')
_NOT_FOUND_IN_ARGUMENT_LIST_PATTERN \
    = re.compile(r'argument (\S+) of command (\S+)'
                 r' is not found in the argument list of (.+)')


def _capture_events(event):
    '''
    Examine events and captures interesting things for publication.
    '''
    match = _FOLLOWING_PARAMETERS_PATTERN.match(event.message)
    if match:
        message = 'The following parameters are not documented: {0}'
        event.set_message(message.format(match.group(2)))
        event.set_source(match.group(1))

    match = _NOT_FOUND_IN_ARGUMENT_LIST_PATTERN.match(event.message)
    if match:
        message = 'Argument {0} of command {1} is not found' \
                  ' in the argument list.'
        event.set_message(message.format(match.group(1), match.group(2)))
        event.set_source(match.group(3))

    return event


def _main():
    description = 'Render Dynamo build output to a web page'
    cli_parser = argparse.ArgumentParser(add_help=False,
                                         description=description)
    cli_parser.add_argument('output', help='HTML output file.')
    cli_parser.add_argument('statusfile',
                            help='Cylc status file from the build.')
    cli_parser.add_argument('errorfile',
                            help='Standard error from the build.')
    cli_parser.add_argument('-help', '-h', '--help', action='help',
                            help='Show this help message and exit')
    arguments = cli_parser.parse_args()

    working_filename = arguments.output + '.work'
    working_directory = os.path.dirname(working_filename)
    if working_directory and not os.path.exists(working_directory):
        os.makedirs(os.path.dirname(working_filename))
    with open(arguments.statusfile, 'rt') as status_file:
        with open(arguments.errorfile, 'rt') as error_file:
            with open(working_filename, 'wt') as working_file:
                status_parser = parser.CylcParser(status_file, 'Doxygen')
                error_parser = parser.DoxygenParser(error_file)
                error_parser.process_events(_capture_events)

                page_renderer = renderer.HtmlCompileRenderer(None,
                                                             status_parser,
                                                             status_parser,
                                                             error_parser)
                page_renderer.render(None, working_file)

    os.rename(working_filename, arguments.output)
    os.chmod(arguments.output,
             stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH)


if __name__ == '__main__':
    _main()
