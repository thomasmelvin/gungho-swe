#!/usr/bin/env python
# -*- coding: utf-8 -*-
##############################################################################
# Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
# For further details please refer to the file LICENCE.original which you
# should have received as part of this distribution.
##############################################################################
'''
Rewrite any href arguments found in an XHTML document.
'''
from __future__ import print_function

import argparse
import parserender.mirrorer
import parserender.renderer


def _main():
    description = 'Rewrite HREF arguments in HTML documents'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('source', metavar='directory',
                        help='File tree to mirror.')
    parser.add_argument('target', metavar='url', help='Target for upload.')
    parser.add_argument('-external', action='store_true',
                        help='Remove tags in the "internal" class.')
    parser.add_argument('-prefix',
                        help='Add this in front of all relative URLs')
    message = 'URLs not ending in ".html" have an index page added'
    parser.add_argument('-indexify', action='store_true', help=message)
    parser.add_argument('-treeindex', action='store_true',
                        help='Genrate index pages for subtrees without one')
    arguments = parser.parse_args()

    file_transforms = []
    if arguments.external:
        transform_external \
            = parserender.mirrorer.RemoveTagsWithClass('internal')
        file_transforms.append(transform_external)
    if arguments.prefix:
        transform_prefix \
            = parserender.mirrorer.AddRelativePrefix(arguments.prefix)
        file_transforms.append(transform_prefix)
    if arguments.indexify:
        transform_indexify = parserender.mirrorer.NoNakedURLs('index.html')
        file_transforms.append(transform_indexify)

    tree_transforms = []
    if arguments.treeindex:
        renderer = parserender.renderer.HtmlIndexRenderer()
        indexer = parserender.mirrorer.GenerateTreeIndices(renderer)
        tree_transforms.append(indexer)

    mirror_engine = parserender.mirrorer.Mirrorer(arguments.target,
                                                  file_transforms,
                                                  tree_transforms)
    mirror_engine.mirror(arguments.source)


if __name__ == '__main__':
    _main()
