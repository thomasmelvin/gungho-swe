#!/usr/bin/env python
# -*- coding: utf-8 -*-
##############################################################################
# Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
# For further details please refer to the file LICENCE.original which you
# should have received as part of this distribution.
##############################################################################
'''
Process the logs generated by Cylc when running Dynamo and generate a web page
of results.
'''
from __future__ import print_function

import argparse
import os
import os.path
import stat

import parserender.parser as parser
import parserender.renderer as renderer

ERROR_PARSER_MAP = {'cray':     parser.CrayRunParser,
                    'gnu':      parser.GnuRunParser,
                    'intel':    parser.IntelRunParser,
                    'Portland': parser.PortlandRunParser}


def _main():
    description = 'Render Dynamo run output to a web page'
    cli_parser = argparse.ArgumentParser(add_help=False,
                                         description=description)
    cli_parser.add_argument('output', help='HTML output file.')
    cli_parser.add_argument('statusfile',
                            help='Cylc status file from the build.')
    cli_parser.add_argument('errfile',
                            help='Standard error from the run.')
    cli_parser.add_argument('-compiler', default='Intel',
                            help='Compiler runtime used by application.')
    cli_parser.add_argument('-context',
                            help='Arbitrary string used to identify log')
    cli_parser.add_argument('-help', '-h', '--help', action='help',
                            help='Show this help message and exit')
    arguments = cli_parser.parse_args()

    working_filename = arguments.output + '.work'
    if not os.path.exists(os.path.dirname(working_filename)):
        os.makedirs(os.path.dirname(working_filename))
    with open(arguments.statusfile, 'rt') as status_file:
        with open(arguments.errfile, 'rt') as errfile:
            with open(working_filename, 'wt') as working_file:
                status_parser = parser.CylcParser(status_file,
                                                  compiler=arguments.compiler)
                error_parser_class = ERROR_PARSER_MAP[status_parser.compiler]
                error_parser = error_parser_class(errfile)

                page_renderer = renderer.HtmlRunRenderer(arguments.context,
                                                         status_parser,
                                                         error_parser)
                page_renderer.render(working_file)

    os.rename(working_filename, arguments.output)
    os.chmod(arguments.output,
             stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH)


if __name__ == '__main__':
    _main()
