#!/usr/bin/env python
# -*- coding: utf-8 -*-
##############################################################################
# Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
# For further details please refer to the file LICENCE.original which you
# should have received as part of this distribution.
##############################################################################
'''
Walk the web site generated by other publishing tools and generate a master
index page.
'''
from __future__ import print_function

import argparse
import os
import os.path
import stat

import parserender.indexer  as indexer
import parserender.renderer as renderer

if __name__ == '__main__':
    cliParser = argparse.ArgumentParser( add_help=False,
   description='Generate an index page for LFRic nightly test suite results' )
    cliParser.add_argument( 'output', help='HTML output file.' )
    cliParser.add_argument( '-bush', help='Rose Bush URL.' )
    cliParser.add_argument( '-ignore', action='append',
                            help='Ignore files with this prefix' )
    cliParser.add_argument( '-help', '-h', '--help', action='help', \
                            help='Show this help message and exit' )
    arguments = cliParser.parse_args()

    ignore   = ['./index.html', './hashes.txt']
    if arguments.ignore: ignore.extend( arguments.ignore )

    lfricIndexer = indexer.LFRicIndexer( os.path.dirname( arguments.output ),
                                         ignorePrefixes=ignore )
    lfricIndexer.examine()

    hashFilename = os.path.join( os.path.dirname( arguments.output ), 'hashes.txt' )

    if os.path.exists( hashFilename ):
        with open( hashFilename, 'rt' ) as hashFile:
            for line in hashFile:
                filename, digest = line.split()
                lfricIndexer.addPreviousHash( filename, digest )

    with open( hashFilename, 'wt' ) as hashFile:
        for filename, digest in lfricIndexer.getCurrentHashes():
            print( '{} {}'.format( filename, digest ), file=hashFile )

    workingFilename = arguments.output + '.work'
    if not os.path.exists( os.path.dirname( workingFilename ) ):
      os.makedirs( os.path.dirname( workingFilename ) )
    with open( workingFilename, 'wt' ) as outfile:
        if arguments.bush and 'CYLC_SUITE_NAME' in os.environ:
            suiterun = '{}/jobs/{}/{}'.format( arguments.bush,     \
                                               os.environ['USER'], \
                                               os.environ['CYLC_SUITE_NAME'] )
        else:
            suiterun = None

        pageRenderer = renderer.HtmlSiteIndexRenderer( lfricIndexer, suiterun )
        pageRenderer.render( outfile )

    os.rename( workingFilename, arguments.output )
    os.chmod( arguments.output, \
              stat.S_IRUSR|stat.S_IWUSR|stat.S_IRGRP|stat.S_IROTH )
