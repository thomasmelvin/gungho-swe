#!/usr/bin/env python
# -*- coding: utf-8 -*-
##############################################################################
# Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
# For further details please refer to the file LICENCE.original which you
# should have received as part of this distribution.
##############################################################################
'''
Process the logs generated by Cylc when compiling Dynamo and generate a web
page of results.
'''
from __future__ import print_function

import argparse
import os
import os.path
import stat

import parserender.parser   as parser
import parserender.renderer as renderer

if __name__ == '__main__':
    cliParser = argparse.ArgumentParser( add_help=False, \
                      description='Render Dynamo build output to a web page' )
    cliParser.add_argument( 'output', help='HTML output file.' )
    cliParser.add_argument( 'statusfile',
                            help='Cylc status file from the build.' )
    cliParser.add_argument( 'outfile', \
                            help='Standard output from the build.' )
    cliParser.add_argument( 'errfile', \
                            help='Standard error from the build.' )
    cliParser.add_argument( '-context', \
                            help='Arbitrary string used to identify log' )
    cliParser.add_argument( '-help', '-h', '--help', action='help', \
                            help='Show this help message and exit' )
    arguments = cliParser.parse_args()

    errParserMap = {'Cray':     parser.CrayCompileParser,  \
                    'GNU':      parser.GnuCompileParser,   \
                    'Intel':    parser.IntelCompileParser, \
                    'Portland': parser.PortlandCompileParser}
    errIgnoreMap = {'Cray':     [],             \
                    'GNU':      ['surprising'], \
                    'Intel':    [],             \
                    'Portland': []}

    workingFilename = arguments.output + '.work'
    if not os.path.exists( os.path.dirname( workingFilename ) ):
      os.makedirs( os.path.dirname( workingFilename ) )
    with open( arguments.statusfile, 'rt' ) as statusfile, \
         open( arguments.outfile, 'rt' ) as outfile,       \
         open( arguments.errfile, 'rt' ) as errfile,       \
         open( workingFilename, 'wt' ) as workingFile:

        statusParser = parser.CylcParser( statusfile )
        outParser = parser.BuildParser( outfile )
        errParser = errParserMap[outParser.compiler]( errfile )

        pageRenderer = renderer.HtmlCompileRenderer( arguments.context,
                                                     statusParser,
                                                     outParser,
                                                     errParser )
        pageRenderer.render( errIgnoreMap[outParser.compiler], workingFile )

    os.rename( workingFilename, arguments.output )
    os.chmod( arguments.output, \
              stat.S_IRUSR|stat.S_IWUSR|stat.S_IRGRP|stat.S_IROTH )
