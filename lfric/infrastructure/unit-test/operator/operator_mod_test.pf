!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the Operator representation
!>

module operator_mod_test

  use constants_mod,                 only : i_def, r_def
  use function_space_collection_mod, only : function_space_collection_type, &
                                            function_space_collection
  use local_mesh_mod,                only : local_mesh_type
  use mesh_collection_mod,           only : mesh_collection_type, &
                                            mesh_collection
  use mesh_mod,                      only : mesh_type

  use mpi_mod,                       only : store_comm, clear_comm
  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(MPITestCase), public :: operator_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type operator_test_type

  integer(i_def), parameter :: element_order = 0
contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(operator_test_type), intent(inout) :: this

    !Store the MPI communicator for later use
    call store_comm(this%getMpiCommunicator())

    ! Create top level mesh collection
    mesh_collection = mesh_collection_type()
    ! Create top level function space collection
    function_space_collection = function_space_collection_type()

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(operator_test_type), intent(inout) :: this

    call function_space_collection%clear()
    call mesh_collection%clear()

    ! Clear the stored MPI communicator
    call clear_comm()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test( npes=[1] )
  subroutine test_all( this )

    use operator_mod,       only: operator_type, operator_proxy_type
    use mesh_mod,           only: mesh_type, PLANE_BI_PERIODIC
    use function_space_mod, only: function_space_type
    use fs_continuity_mod,  only: W1, W2

    implicit none

    class(operator_test_type), intent(inout) :: this

    type( operator_type )       :: Op
    type( operator_proxy_type ) :: Op_p

    type(local_mesh_type), target  :: unit_test_local_mesh
    type(local_mesh_type), pointer :: unit_test_local_mesh_ptr

    type(mesh_type) :: unit_test_mesh

    type(mesh_type), pointer :: mesh_out => null()
    type(mesh_type), pointer :: mesh     => null()

    type( function_space_type ), pointer :: fs1  => null()
    type( function_space_type ), pointer :: fs2  => null()

    integer(i_def) :: err
    integer(i_def) :: i, iface, iedge, lid, test_integer
    integer(i_def) :: ncell_3d_1, ncell_3d_2, ls_size
    integer(i_def) :: mesh_id


    call unit_test_local_mesh%initialise()
    unit_test_local_mesh_ptr => unit_test_local_mesh

    ! Dummy mesh mod has 9 cells, 3 layers and is uniform in vertical
    unit_test_mesh = mesh_type( PLANE_BI_PERIODIC, unit_test_local_mesh_ptr )
    mesh_id =  mesh_collection%add_new_mesh( unit_test_mesh )
    mesh    => mesh_collection%get_mesh( mesh_id )

    fs1 => function_space_collection%get_fs( mesh, element_order, W1 )
    fs2 => function_space_collection%get_fs( mesh, element_order, W2 )

    ! make an operator
    call Op%initialise( fs2, fs1 )  ! fs1 --> fs2

    ! get the proxy
    Op_p = Op%get_proxy()

    ! Check we get back what we sowed
    @assertEqual( Op%which_fs_from(), W1 )
    @assertEqual( Op%which_fs_to(),   W2 )

    ! Only meaningful test without PSy and Kernel layers is to check array
    ! sizes on the proxy.
    ncell_3d_1 = Op_p%fs_from%get_ncell() * Op_p%fs_from%get_nlayers()
    ncell_3d_2 = Op_p%fs_to%get_ncell() * Op_p%fs_to%get_nlayers()
    @assertEqual( Op_p%ncell_3d, ncell_3d_1 )
    @assertEqual( Op_p%ncell_3d, ncell_3d_2 )
    ls_size = ncell_3d_1 * Op_p%fs_from%get_ndf() * Op_p%fs_to%get_ndf()
    @assertEqual( size( Op_p%local_stencil ), ls_size )

    ! Test if the operator returns the correct mesh
    ! Use a subset of the tests from mesh_mod_test.pf
    mesh_out => Op%get_mesh()

    !-------------------------------------------------------------------
    ! Test get_face_on_cell()
    iface=3
    lid=9
    test_integer = mesh_out%get_face_on_cell(iface, lid)
    @assertEqual ( 28, test_integer )

    !-------------------------------------------------------------------
    ! Test get_edge_on_cell()
    iedge=1
    lid=5
    test_integer = mesh_out%get_edge_on_cell(iedge, lid)
    @assertEqual ( 27, test_integer )

    iedge=5
    lid=5
    test_integer = mesh_out%get_edge_on_cell(iedge, lid)
    @assertEqual ( 11, test_integer )

    iedge=9
    lid=5
    test_integer = mesh_out%get_edge_on_cell(iedge, lid)
    @assertEqual ( 28, test_integer )

    iedge=12
    lid=5
    test_integer = mesh_out%get_edge_on_cell(iedge, lid)
    @assertEqual ( 36, test_integer )

    iedge=6
    lid=9
    test_integer = mesh_out%get_edge_on_cell(iedge, lid)
    @assertEqual ( 32, test_integer )

    nullify(mesh)

  end  subroutine test_all

end module operator_mod_test
