!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the function space collection object
!>
module function_space_collection_mod_test

  use constants_mod,                 only : i_def, r_def
  use function_space_collection_mod, only : function_space_collection_type, &
                                            function_space_collection
  use local_mesh_mod,                only : local_mesh_type
  use mesh_collection_mod,           only : mesh_collection_type, &
                                            mesh_collection
  use mesh_mod,                      only : mesh_type
  use fs_continuity_mod,             only : W0, W2, W3
  use function_space_mod,            only : function_space_type
  use pFUnit_Mod

  use mpi_mod, only: store_comm, clear_comm

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(MPITestCase), public :: function_space_collection_test_type
    private
    type(function_space_type), pointer :: w0_fs => null()
    type(function_space_type), pointer :: w2_fs => null()
    type(function_space_type), pointer :: w3_fs => null()
    type(function_space_type), pointer :: temp_w0_fs => null()
    type(local_mesh_type)              :: unit_test_local_mesh
    type(mesh_type), pointer           :: mesh => null()

    integer, allocatable :: dummy_for_gcc

  contains
    procedure setUp
    procedure tearDown
    procedure get_local_mesh_ptr
    procedure test_all
  end type function_space_collection_test_type

  integer(i_def), parameter :: element_order = 0

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use mesh_mod, only : mesh_type, PLANE_BI_PERIODIC

    implicit none

    class(function_space_collection_test_type), intent(inout) :: this

    type(local_mesh_type), pointer :: unit_test_local_mesh_ptr
    type(mesh_type) :: unit_test_mesh
    integer(i_def)  :: mesh_id


    ! Store the MPI communicator for later use
    call store_comm(this%getMpiCommunicator())

    ! Create top level mesh collection
    mesh_collection = mesh_collection_type()
    ! Create top level function space collection
    function_space_collection = function_space_collection_type()

    call this%unit_test_local_mesh%initialise()
    unit_test_local_mesh_ptr => this%get_local_mesh_ptr()

    call this%unit_test_local_mesh%initialise()
    unit_test_local_mesh_ptr => this%get_local_mesh_ptr()

    ! create the mesh
    ! Dummy mesh mod has 9 cells, 3 layers and is uniform in vertical
    unit_test_mesh = mesh_type( PLANE_BI_PERIODIC, unit_test_local_mesh_ptr )
    mesh_id   =  mesh_collection%add_new_mesh( unit_test_mesh )
    this%mesh => mesh_collection%get_mesh( mesh_id )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use configuration_mod, only: final_configuration

    implicit none

    class(function_space_collection_test_type), intent(inout) :: this

    call function_space_collection%clear()
    call mesh_collection%clear()

    ! Clear the stored MPI communicator
    call clear_comm()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  function get_local_mesh_ptr(this) result(unit_test_local_mesh_ptr)
    implicit none
    class(function_space_collection_test_type), intent(inout), target :: this
    type(local_mesh_type), pointer :: unit_test_local_mesh_ptr
    unit_test_local_mesh_ptr => this%unit_test_local_mesh
  end function get_local_mesh_ptr

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  @test(npes=[1])
  subroutine test_all( this )


    implicit none

    class(function_space_collection_test_type), intent(inout) :: this

    integer(i_def) :: answer = 3

    ! Create 3 function spaces
    this%w0_fs => function_space_collection%get_fs( this%mesh,     &
                                                    element_order, &
                                                    W0 )
    this%w2_fs => function_space_collection%get_fs( this%mesh,     &
                                                    element_order, &
                                                    W2 )
    this%w3_fs => function_space_collection%get_fs( this%mesh,     &
                                                    element_order, &
                                                    W3,            &
                                                    ndata=3 )

    ! Check we have 3 function spaces in the collection

    @assertEqual(answer, function_space_collection%get_fs_collection_size())

    ! Try to get a function space already in the list.
    ! The number of function spaces in the collection should not increase

    this%temp_w0_fs => function_space_collection%get_fs( this%mesh,     &
                                                         element_order, &
                                                         W0 )

    @assertEqual(answer, function_space_collection%get_fs_collection_size())

  end subroutine test_all

end module function_space_collection_mod_test
