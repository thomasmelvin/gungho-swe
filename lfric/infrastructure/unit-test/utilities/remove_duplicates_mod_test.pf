!-----------------------------------------------------------------------------
! (c) Crown copyright 2017 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!> Test the remove_duplicates module
!>
module remove_duplicates_mod_test

  use constants_mod,         only: i_def, str_def
  use pFUnit_Mod
  use remove_duplicates_mod, only: remove_duplicates

  implicit none

  private
  public :: test_get_unique_str_array, &
            test_get_unique_int_array, &
            setUp, tearDown

  @testCase
  type, public, extends( TestCase ) :: remove_duplicates_test_type
  contains
    procedure :: setUp
    procedure :: tearDown
    procedure :: test_get_unique_str_array
    procedure :: test_get_unique_int_array
  end type remove_duplicates_test_type

  character(str_def), parameter :: str_array(9) = [ 'The    ', &
                                                    'tinker ', &
                                                    'the    ', &
                                                    'tailor ', &
                                                    'the    ', &
                                                    'sailor ', &
                                                    'and    ', &
                                                    'another', &
                                                    'tailor ' ]
  integer(i_def), parameter :: int_array(14) = &
      [ 1, 1, 2, 3, 2, 3, 5, 3, 5, 8, 7, 3, 5, 12 ]

contains

  subroutine setup( this )

    implicit none

    class( remove_duplicates_test_type ), intent( inout ) :: this

    return
  end subroutine setup

  subroutine teardown( this )

    implicit none

    class( remove_duplicates_test_type ), intent( inout ) :: this

    return
  end subroutine teardown

  !> Test get unique array module functionality for characters arrays
  !>
  @test
  subroutine test_get_unique_str_array( this )

    implicit none

    class( remove_duplicates_test_type ), intent( inout ) :: this

    character(str_def), allocatable :: test_unique_str_arr(:)
    character(str_def), parameter   :: unique_str_arr(7) =                   &
                                        [character(len=str_def) :: 'The',    &
                                                                   'tinker', &
                                                                   'the',    &
                                                                   'tailor', &
                                                                   'sailor', &
                                                                   'and',    &
                                                                   'another' ]


    test_unique_str_arr = remove_duplicates(str_array)
    @assertTrue( unique_str_arr == test_unique_str_arr )

    if (allocated(test_unique_str_arr)) deallocate(test_unique_str_arr)

    return
  end subroutine test_get_unique_str_array

  !> Test get unique array module functionality for integer arrays
  !>
  @test
  subroutine test_get_unique_int_array( this )

    implicit none

    class( remove_duplicates_test_type ), intent( inout ) :: this

    integer(i_def), allocatable :: test_unique_int_arr(:)
    integer(i_def), parameter :: unique_int_arr(7) =     &
        [ 1, 2, 3, 5, 8, 7, 12 ]

    test_unique_int_arr = remove_duplicates(int_array)
    @assertTrue( unique_int_arr==test_unique_int_arr )

    if (allocated(test_unique_int_arr)) deallocate(test_unique_int_arr)
    return
  end subroutine test_get_unique_int_array

end module remove_duplicates_mod_test
