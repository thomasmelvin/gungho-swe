!-----------------------------------------------------------------------------
! (C) Crown copyright 2020 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> Test the local_mesh module
!>
module local_mesh_mod_test

  use constants_mod,              only: i_def, i_native, r_def, l_def, &
                                        str_max_filename, str_def
  use global_mesh_collection_mod, only: global_mesh_collection_type, &
                                        global_mesh_collection
  use global_mesh_mod,            only: global_mesh_type
  use halo_comms_mod,             only: initialise_halo_comms, &
                                        finalise_halo_comms
  use local_mesh_map_mod,         only: local_mesh_map_type
  use local_mesh_mod,             only: local_mesh_type
  use mpi_mod,                    only: store_comm, clear_comm, &
                                        get_comm_size, get_comm_rank
  use partition_mod,              only: partition_type, &
                                        partitioner_planar, &
                                        partitioner_cubedsphere_serial, &
                                        partitioner_interface
  use pFUnit_Mod
  use ugrid_mesh_data_mod,        only: ugrid_mesh_data_type

  implicit none

  private
  public :: setUp,           &
            tearDown,        &
            test_local_mesh, &
            test_local_mesh_maps

  @testCase
  type, public, extends( MPITestCase ) :: local_mesh_test_type
    private
    integer :: total_ranks
    integer :: local_rank
  contains
    procedure :: setUp
    procedure :: tearDown
    procedure :: test_local_mesh
    procedure :: test_local_mesh_maps
  end type local_mesh_test_type

contains

  subroutine setUp( this )

    implicit none

    class(local_mesh_test_type), intent( inout ) :: this

    global_mesh_collection = global_mesh_collection_type()

    !Store the MPI communicator for later use
    call store_comm(this%getMpiCommunicator())
    ! Initialise halo functionality
    call initialise_halo_comms( this%getMpiCommunicator() )

    this%total_ranks = get_comm_size()
    this%local_rank  = get_comm_rank()

  end subroutine setUp

  subroutine tearDown( this )

    implicit none

    class(local_mesh_test_type), intent( inout ) :: this

    call global_mesh_collection%clear()

    ! Finalise halo functionality
    call finalise_halo_comms()
    ! Clear the stored MPI communicator
    call clear_comm()

  end subroutine teardown

  !> Test local mesh module functionality
  !>
  @Test(npes=[1, 4] )
  subroutine test_local_mesh( this )

    implicit none

    class(local_mesh_test_type), intent( inout ) :: this

    integer(i_native) :: num_processes
    character(len = str_max_filename) :: filename
    character(str_def) :: mesh_name
    integer(i_def) :: npanels
    type(ugrid_mesh_data_type) :: ugrid_mesh_data
    type(global_mesh_type) :: global_mesh
    type(global_mesh_type), pointer :: global_mesh_ptr => null()
    integer(i_def) :: global_mesh_id
    integer(i_def) :: xproc
    integer(i_def) :: yproc
    integer(i_def) :: max_stencil_depth
    procedure (partitioner_interface), pointer :: partitioner_ptr => null()
    type(partition_type) :: partition
    type(local_mesh_type) :: local_mesh

    character(str_def) :: name

    integer(i_def) :: nverts_per_edge
    integer(i_def) :: nedges_per_cell
    integer(i_def) :: nverts_per_cell
    integer(i_def) :: num_panels_global_mesh
    integer(i_def) :: ncells_global_mesh
    integer(i_def) :: num_cells_in_layer
    integer(i_def) :: inner_depth
    integer(i_def) :: halo_depth
    integer(i_def) :: num_cells_inner
    integer(i_def) :: last_inner_cell
    integer(i_def) :: num_cells_edge
    integer(i_def) :: last_edge_cell
    integer(i_def) :: num_cells_halo
    integer(i_def) :: last_halo_cell
    integer(i_def) :: num_cells_ghost
    integer(i_def) :: cell_owner
    integer(i_def) :: lid
    integer(i_def) :: gid
    integer(i_def) :: vert_gid
    integer(i_def) :: edge_gid
    integer(i_def) :: vert_lid
    integer(i_def) :: edge_lid
    integer(i_def) :: n_unique_vertices
    integer(i_def) :: n_unique_edges
    integer(i_def) :: vert_cell_owner
    integer(i_def) :: edge_cell_owner
    integer(i_def) :: cell_next(4)
    integer(i_def) :: known_cell_next(4)
    real(r_def)    :: vert_coords(2)
    real(r_def)    :: known_vert_coords(2)

    logical(l_def) :: answer

    ! Create a local mesh from partitioning a global mesh on 1 and 4 processors

    num_processes = this%context%getNumProcesses()

    filename = 'data/mesh_BiP8x8-750x250.nc'
    mesh_name = 'unit_test'
    npanels  = 1
    call ugrid_mesh_data%read_from_file(trim(filename), mesh_name)
    global_mesh = global_mesh_type( ugrid_mesh_data, npanels )
    call ugrid_mesh_data%clear()
    global_mesh_id = global_mesh%get_id()
    call global_mesh_collection%add_new_global_mesh( global_mesh )
    global_mesh_ptr => global_mesh_collection%get_global_mesh( global_mesh_id )

    partitioner_ptr => partitioner_planar
    select case ( num_processes )
      case (1)
        xproc = 1
        yproc = 1
      case (4)
        xproc = 2
        yproc = 2
    end select
    max_stencil_depth = 1

    partition = partition_type( global_mesh_ptr, &
                                partitioner_ptr, &
                                xproc, &
                                yproc, &
                                max_stencil_depth, &
                                this%local_rank, &
                                this%total_ranks )

    call local_mesh%initialise( global_mesh_ptr, partition )
    call local_mesh%init_cell_owner()

    ! Check the local mesh has the correct name
    name = local_mesh%get_mesh_name()
    @assertEqual( trim(mesh_name), trim(name) )

    ! Check the local mesh has the correct class
    answer = local_mesh%is_geometry_planar()
    @assertEqual( .true., answer )

    answer = local_mesh%is_topology_periodic()
    @assertEqual( .true., answer )

    answer = local_mesh%is_coord_sys_xyz()
    @assertEqual( .true., answer )

    ! Check the local_mesh has the correct properties
    nverts_per_edge = local_mesh%get_nverts_per_edge()
    @assertEqual( 2, nverts_per_edge )
    nedges_per_cell = local_mesh%get_nedges_per_cell()
    @assertEqual( 4, nedges_per_cell )
    nverts_per_cell = local_mesh%get_nverts_per_cell()
    @assertEqual( 4, nverts_per_cell )
    num_panels_global_mesh = local_mesh%get_num_panels_global_mesh()
    @assertEqual( 1, num_panels_global_mesh )
    ncells_global_mesh = local_mesh%get_ncells_global_mesh()
    @assertEqual( 64, ncells_global_mesh )

    select case ( num_processes )

    ! Test functionality of the local_mesh object we've just created on both 1
    ! and 4 processes
      case (1)
        num_cells_in_layer = local_mesh%get_num_cells_in_layer()
        @assertEqual( 64, num_cells_in_layer )

        inner_depth = local_mesh%get_inner_depth()
        @assertEqual( 2, inner_depth )

        num_cells_inner = local_mesh%get_num_cells_inner(1)
        @assertEqual( 20, num_cells_inner )

        last_inner_cell = local_mesh%get_last_inner_cell(1)
        @assertEqual( 36, last_inner_cell )

        num_cells_edge = local_mesh%get_num_cells_edge()
        @assertEqual( 28, num_cells_edge )

        last_edge_cell = local_mesh%get_last_edge_cell()
        @assertEqual( 64, last_edge_cell )

        halo_depth = local_mesh%get_halo_depth()
        @assertEqual( 2, halo_depth )

        num_cells_halo = local_mesh%get_num_cells_halo(1)
        @assertEqual( 0, num_cells_halo )

        last_halo_cell = local_mesh%get_last_halo_cell(1)
        @assertEqual( 64, last_halo_cell )

        num_cells_ghost = local_mesh%get_num_cells_ghost()
        @assertEqual( 0, num_cells_ghost )

        cell_owner = local_mesh%get_cell_owner( 1 )
        @assertEqual( 0, cell_owner )

        vert_gid = local_mesh%get_vert_gid_on_cell( 1, 6 )
        @assertEqual ( 36, vert_gid )

        edge_gid = local_mesh%get_edge_gid_on_cell( 4, 5 )
        @assertEqual ( 46, edge_gid )

        known_vert_coords(:) = [ -750.0, 500.0 ]
        call local_mesh%get_vert_coords( 3, vert_coords )
        @assertEqual ( known_vert_coords, vert_coords, 1.0e-2_r_def )

        n_unique_vertices = local_mesh%get_n_unique_vertices()
        @assertEqual ( 64, n_unique_vertices )

        n_unique_edges = local_mesh%get_n_unique_edges()
        @assertEqual ( 128, n_unique_edges )

        vert_lid = local_mesh%get_vert_on_cell( 1, 6 )
        @assertEqual ( 12, vert_lid )

        edge_lid = local_mesh%get_edge_on_cell( 4, 5 )
        @assertEqual ( 2, edge_lid )

        known_cell_next(:) = [ 2, 7, 4, 20 ]
        call local_mesh%get_cell_next( 3, cell_next )
        @assertEqual ( known_cell_next, cell_next )

        vert_cell_owner = local_mesh%get_vert_cell_owner ( 5 )
        @assertEqual ( 7, vert_cell_owner )

        edge_cell_owner = local_mesh%get_edge_cell_owner ( 5 )
        @assertEqual ( 6, edge_cell_owner )

        lid = 1
        gid = local_mesh%get_gid_from_lid( lid )
        @assertEqual( 19, gid )

        gid = 30
        lid = local_mesh%get_lid_from_gid( gid )
        @assertEqual( 8, lid )

      case (4)
        num_cells_in_layer = local_mesh%get_num_cells_in_layer()
        @assertEqual( 64, num_cells_in_layer )

        inner_depth = local_mesh%get_inner_depth()
        @assertEqual( 2, inner_depth )

        num_cells_inner = local_mesh%get_num_cells_inner(1)
        @assertEqual( 4, num_cells_inner )

        last_inner_cell = local_mesh%get_last_inner_cell(1)
        @assertEqual( 4, last_inner_cell )

        num_cells_edge = local_mesh%get_num_cells_edge()
        @assertEqual( 12, num_cells_edge )

        last_edge_cell = local_mesh%get_last_edge_cell()
        @assertEqual( 16, last_edge_cell )

        halo_depth = local_mesh%get_halo_depth()
        @assertEqual( 2, halo_depth )

        num_cells_halo = local_mesh%get_num_cells_halo(1)
        @assertEqual( 20, num_cells_halo )

        last_halo_cell = local_mesh%get_last_halo_cell(1)
        @assertEqual( 36, last_halo_cell )

        num_cells_ghost = local_mesh%get_num_cells_ghost()
        @assertEqual( 0, num_cells_ghost )

        cell_owner = local_mesh%get_cell_owner(1)
        @assertEqual( this%local_rank, cell_owner )

        vert_gid = local_mesh%get_vert_gid_on_cell( 1, 6 )
        select case ( this%local_rank )
          case (0)
            @assertEqual( 42, vert_gid )
          case (1)
            @assertEqual( 46, vert_gid )
          case (2)
            @assertEqual( 2, vert_gid )
          case (3)
            @assertEqual( 11, vert_gid )
        end select

        edge_gid = local_mesh%get_edge_gid_on_cell( 4, 5 )
        select case ( this%local_rank )
          case (0)
            @assertEqual( 58, edge_gid )
          case (1)
            @assertEqual( 66, edge_gid )
          case (2)
            @assertEqual( 4, edge_gid )
          case (3)
            @assertEqual( 16, edge_gid )
        end select

        call local_mesh%get_vert_coords( 3, vert_coords )
        select case ( this%local_rank )
          case (0)
            known_vert_coords(:) = [ -1500.0, -250.0 ]
            @assertEqual( known_vert_coords, vert_coords, 1.0e-2_r_def )
          case (1)
            known_vert_coords(:) = [  1500.0, -250.0 ]
            @assertEqual( known_vert_coords, vert_coords, 1.0e-2_r_def )
          case (2)
            known_vert_coords(:) = [ -1500.0,  750.0 ]
            @assertEqual( known_vert_coords, vert_coords, 1.0e-2_r_def )
          case (3)
            known_vert_coords(:) = [  1500.0,  750.0 ]
            @assertEqual( known_vert_coords, vert_coords, 1.0e-2_r_def )
        end select

        n_unique_vertices = local_mesh%get_n_unique_vertices()
        @assertEqual ( 64, n_unique_vertices )

        n_unique_edges = local_mesh%get_n_unique_edges()
        @assertEqual ( 128, n_unique_edges )

        vert_lid = local_mesh%get_vert_on_cell( 1, 6 )
        @assertEqual( 4, vert_lid )

        edge_lid = local_mesh%get_edge_on_cell( 4, 5 )
        @assertEqual( 16, edge_lid )

        known_cell_next(:) = [ 11, 14, 4, 1 ]
        call local_mesh%get_cell_next( 3, cell_next )
        @assertEqual ( known_cell_next, cell_next )

        lid = 1
        gid = local_mesh%get_gid_from_lid( lid )
        select case ( this%local_rank )
          case (0)
            @assertEqual( 42, gid )
          case (1)
            @assertEqual( 46, gid )
          case (2)
            @assertEqual( 10, gid )
          case (3)
            @assertEqual( 14, gid )
        end select

        gid = 30
        lid = local_mesh%get_lid_from_gid( gid )
        select case ( this%local_rank )
          case (0)
            @assertEqual( 55, lid )
          case (1)
            @assertEqual( 26, lid )
          case (2)
            @assertEqual( 43, lid )
          case (3)
            @assertEqual( 14, lid )
        end select

    end select

  end subroutine test_local_mesh

  !> Test local mesh module functionality
  !>
  @Test(npes=[1] )
  subroutine test_local_mesh_maps( this )

    use ncdf_quad_mod,     only: ncdf_quad_type

    implicit none

    class(local_mesh_test_type), intent( inout ) :: this

    type(ugrid_mesh_data_type)  :: ugrid_mesh_data
    character(len = str_max_filename) :: filename
    character(str_def), allocatable :: target_mesh_names(:)
    type(ncdf_quad_type) :: file_handler
    integer(i_def)       :: i
    character(str_def), parameter :: mesh_names(2) = ['C8 ','C4 ']
    integer(i_def) :: npanels

    type(global_mesh_type), target  :: global_mesh
    type(global_mesh_type), pointer :: global_mesh_ptr => null()

    type(partition_type) :: partition
    procedure (partitioner_interface), pointer :: partitioner_ptr => null()

    type(local_mesh_type), target :: local_mesh(2)
    type(local_mesh_map_type), pointer :: local_mesh_map
    integer(i_def), allocatable     :: mesh_map(:,:,:)

    npanels  = 6
    filename='data/mesh_C32_MG.nc'

    ! Read in two meshes
    partitioner_ptr => partitioner_cubedsphere_serial
    do i=1, size(mesh_names)
      call ugrid_mesh_data%read_from_file(trim(filename), mesh_names(i))
      global_mesh = global_mesh_type( ugrid_mesh_data, npanels )
      call ugrid_mesh_data%clear()
      global_mesh_ptr => global_mesh
      partition = partition_type( global_mesh_ptr, partitioner_ptr, &
                                  1, 1, 0, 0, 1 )
      call local_mesh(i)%initialise( global_mesh_ptr, partition )
    end do

    ! Read in mesh map between the two meshes
    call file_handler%file_open(filename)
    call file_handler%read_map( local_mesh(1)%get_mesh_name(), &
                                local_mesh(2)%get_mesh_name(), &
                                mesh_map )
    call file_handler%file_close()

    ! Add the mesh map to the local mesh
    call local_mesh(1)%add_local_mesh_map(local_mesh(2)%get_id(), &
                                          mesh_map )

    local_mesh_map => local_mesh(1)%get_local_mesh_map( local_mesh(2)%get_id() )

    ! Check the returned local mesh map is the correct one
    @assertEqual( local_mesh(1)%get_id(), local_mesh_map%get_source_id() )
    @assertEqual( local_mesh(2)%get_id(), local_mesh_map%get_target_id() )

  end subroutine test_local_mesh_maps

end module local_mesh_mod_test
