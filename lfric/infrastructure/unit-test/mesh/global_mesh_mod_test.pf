!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the global_mesh module
!>
module global_mesh_mod_test

  use constants_mod,              only: r_def, i_def, str_max_filename, &
                                        str_def, l_def
  use reference_element_mod,      only: reference_cube_type
  use global_mesh_mod,            only: global_mesh_type
  use global_mesh_map_mod,        only: global_mesh_map_type
  use global_mesh_collection_mod, only: global_mesh_collection_type, &
                                        global_mesh_collection
  use ugrid_mesh_data_mod,        only: ugrid_mesh_data_type

  use pFUnit_Mod

  implicit none

  private
  public :: test_cubedsphere_global_mesh,           &
            test_cubedsphere_single_file_intergrid, &
            test_cubedsphere_adding_intergrid_map,  &
            test_biperiodic_global_mesh,            &
            setUp, tearDown

  @testCase
  type, public, extends( TestCase ) :: global_mesh_test_type
    private
  contains
    private
    procedure, public :: setUp
    procedure, public :: tearDown
    procedure, public :: test_cubedsphere_global_mesh
    procedure, public :: test_biperiodic_global_mesh
    procedure, public :: test_cubedsphere_single_file_intergrid
    procedure, public :: test_cubedsphere_adding_intergrid_map

  end type global_mesh_test_type

  character(str_def), parameter :: mesh_name = 'unit_test'
  integer(i_def),     parameter :: npanels = 6

contains

  subroutine setUp( this )

    implicit none

    class( global_mesh_test_type ), intent( inout ) :: this

    ! Create top level collections
    global_mesh_collection = global_mesh_collection_type()

  end subroutine setUp

  subroutine tearDown( this )

    use configuration_mod, only: final_configuration

    implicit none

    class( global_mesh_test_type ), intent( inout ) :: this

    call global_mesh_collection%clear()

    call final_configuration()

  end subroutine tearDown

  ! Test global_mesh module functionality
  !
  @test
  subroutine test_biperiodic_global_mesh( this )

    implicit none

    class( global_mesh_test_type ), intent( inout ) :: this

    type(ugrid_mesh_data_type) :: ugrid_mesh_data
    type(global_mesh_type)     :: global_mesh

    integer(i_def) :: cell_id
    integer(i_def) :: verts(4)
    integer(i_def) :: edges(4)
    integer(i_def) :: cells(4)
    integer(i_def) :: ncells
    integer(i_def) :: max_cells_on_vert
    integer(i_def) :: global_mesh_id1
    logical(l_def) :: periodic_x
    logical(l_def) :: periodic_y

    integer(i_def), allocatable :: edge_on_cells(:,:)
    integer(i_def), allocatable :: vert_on_cells(:,:)
    integer(i_def), allocatable :: cell_next(:,:)

    character(len = str_max_filename) :: filename

    integer(i_def) :: npanels = 1

    !-------------------------------------
    ! Test construction of a biperiodic mesh
    !-------------------------------------

    filename = 'data/mesh_BiP8x8-750x250.nc'
    call ugrid_mesh_data%read_from_file(trim(filename), mesh_name)
    global_mesh = global_mesh_type( ugrid_mesh_data, npanels )
    call ugrid_mesh_data%clear()

    ! Check the global mesh id
    global_mesh_id1 = global_mesh%get_id()
    @assertTrue(global_mesh_id1 > 0)

    ! Check periodic flags are read in correctly
    call global_mesh%get_mesh_periodicity(periodic_x, periodic_y)
    @assertTrue(periodic_x)
    @assertTrue(periodic_y)

    ! Generate the global_mesh
    cell_id = global_mesh%get_cell_id( 1, 0, 0 )
    @assertEqual( 1, cell_id )
    !
    ! Test functionality of the global_mesh object we've just created
    cell_id = global_mesh%get_cell_id( 1, 2, 2 )
    @assertEqual( 51, cell_id )

    call global_mesh%get_vert_on_cell( 6, verts )
    @assertEqual( 11, verts(1) )
    @assertEqual( 13, verts(2) )
    @assertEqual( 14, verts(3) )
    @assertEqual( 12, verts(4) )

    call global_mesh%get_cell_on_vert( 15, cells )
    @assertEqual(  7, cells(1) )
    @assertEqual(  8, cells(2) )
    @assertEqual( 15, cells(3) )
    @assertEqual( 16, cells(4) )

    call global_mesh%get_edge_on_cell( 6, edges )
    @assertEqual( 15, edges(1) )
    @assertEqual( 17, edges(2) )
    @assertEqual( 18, edges(3) )
    @assertEqual( 19, edges(4) )

    call global_mesh%get_cell_on_edge( 17, cells(1:2) )
    @assertEqual(  6, cells(1) )
    @assertEqual( 14, cells(2) )

    ncells = global_mesh%get_ncells()
    @assertEqual( 64, ncells )

    max_cells_on_vert=global_mesh%get_max_cells_per_vertex()
    @assertEqual( 4, max_cells_on_vert )

    allocate( edge_on_cells(4,64) )
    edge_on_cells = global_mesh%get_edge_on_all_cells()
    @assertEqual( [  1,  2,   3,   4], edge_on_cells(:,1)  )
    @assertEqual( [ 21, 23,   1,  24], edge_on_cells(:,8)  )
    @assertEqual( [ 31, 32,  33,  11], edge_on_cells(:,12) )
    @assertEqual( [121,  4, 122, 106], edge_on_cells(:,57) )
    @assertEqual( [128, 24, 121, 120], edge_on_cells(:,64) )
    deallocate( edge_on_cells )

    allocate( vert_on_cells(4,64) )
    vert_on_cells = global_mesh%get_vert_on_all_cells()
    @assertEqual( [  1,  2,  3,   4], vert_on_cells(:,1)  )
    @assertEqual( [ 15,  1,  4,  16], vert_on_cells(:,8)  )
    @assertEqual( [ 20, 21,  9,   7], vert_on_cells(:,12) )
    @assertEqual( [  4,  3, 58,  57], vert_on_cells(:,57) )
    @assertEqual( [ 16,  4, 57,  64], vert_on_cells(:,64) )
    deallocate( vert_on_cells )

    allocate( cell_next(4,64) )
    cell_next = global_mesh%get_all_cells_next()
    @assertEqual( [  8, 9,  2, 57], cell_next(:,1)  )
    @assertEqual( [  7, 16, 1, 64], cell_next(:,8)  )
    @assertEqual( [ 11, 20, 13, 4], cell_next(:,12) )
    @assertEqual( [ 64, 1, 58, 49], cell_next(:,57) )
    @assertEqual( [ 63, 8, 57, 56], cell_next(:,64) )
    deallocate( cell_next )

    ! Check number of panels
    npanels = global_mesh%get_npanels( )
    @assertEqual(  1, npanels )

  end subroutine test_biperiodic_global_mesh


  @test
  subroutine test_cubedsphere_global_mesh( this )

    implicit none

    class( global_mesh_test_type ), intent( inout ) :: this

    type(ugrid_mesh_data_type)        :: ugrid_mesh_data
    type(global_mesh_type)            :: global_mesh
    character(len = str_max_filename) :: filename

    integer(i_def) :: cell_id
    integer(i_def) :: verts(4)
    integer(i_def) :: edges(4)
    integer(i_def) :: cells(4)
    integer(i_def) :: ncells
    integer(i_def) :: max_cells_on_vert
    integer(i_def) :: cell_owner
    integer(i_def) :: global_mesh_id1
    integer(i_def) :: global_mesh_id2

    integer(i_def), allocatable :: edge_on_cells(:,:)
    integer(i_def), allocatable :: vert_on_cells(:,:)
    integer(i_def), allocatable :: cell_next(:,:)

    integer(i_def) :: npanels = 6

    !---------------------------------------
    ! Test construction of a cubed-sphere mesh
    !---------------------------------------
    filename = 'data/mesh_C4.nc'
    call ugrid_mesh_data%read_from_file(trim(filename), mesh_name)
    global_mesh = global_mesh_type( ugrid_mesh_data, npanels )
    call ugrid_mesh_data%clear()

    ! Check the global mesh id
    global_mesh_id2 = global_mesh%get_id()
    @assertTrue(global_mesh_id1 /= global_mesh_id2)

    !
    ! Generate the global_mesh
    cell_id = global_mesh%get_cell_id( 1, 0, 0 )
    @assertEqual( 1, cell_id )
    !
    ! Test functionality of the global_mesh object we've just created
    cell_id = global_mesh%get_cell_id( 1, 2, 2 )
    @assertEqual( 74, cell_id )

    call global_mesh%get_vert_on_cell( 6, verts )
    @assertEqual( 10, verts(1) )
    @assertEqual( 11, verts(2) )
    @assertEqual(  7, verts(3) )
    @assertEqual(  6, verts(4) )

    call global_mesh%get_cell_on_vert( 16, cells )
    @assertEqual( 11, cells(1) )
    @assertEqual( 12, cells(2) )
    @assertEqual( 15, cells(3) )
    @assertEqual( 16, cells(4) )

    call global_mesh%get_edge_on_cell( 6, edges )
    @assertEqual( 15, edges(1) )
    @assertEqual( 16, edges(2) )
    @assertEqual( 17, edges(3) )
    @assertEqual(  6, edges(4) )

    call global_mesh%get_cell_on_edge( 13, cells(1:2) )
    @assertEqual(  5, cells(1) )
    @assertEqual( 56, cells(2) )

    ncells = global_mesh%get_ncells()
    @assertEqual( 96, ncells )

    max_cells_on_vert=global_mesh%get_max_cells_per_vertex()
    @assertEqual( 4, max_cells_on_vert )

    cell_owner=global_mesh%get_vert_cell_owner(1)
    @assertEqual( 65, cell_owner )

    cell_owner=global_mesh%get_edge_cell_owner(1)
    @assertEqual( 65, cell_owner )


    allocate( edge_on_cells(4,ncells) )
    edge_on_cells = global_mesh%get_edge_on_all_cells()
    @assertEqual( [   2,   3,   5,   1], edge_on_cells(:, 1) )
    @assertEqual( [  71,  72, 101,  64], edge_on_cells(:,32) )
    @assertEqual( [ 120,   2, 118, 119], edge_on_cells(:,52) )
    @assertEqual( [ 136,  21, 128, 135], edge_on_cells(:,60) )
    @assertEqual( [ 156, 168,  46,  73], edge_on_cells(:,80) )
    deallocate( edge_on_cells )

    allocate( vert_on_cells(4,ncells) )
    vert_on_cells = global_mesh%get_vert_on_all_cells()
    @assertEqual( [  5,  6,  2,  1], vert_on_cells(:, 1) )
    @assertEqual( [ 77, 94, 45, 32], vert_on_cells(:,32) )
    @assertEqual( [  5,  1, 52, 56], vert_on_cells(:,52) )
    @assertEqual( [ 13,  9, 60, 64], vert_on_cells(:,60) )
    @assertEqual( [ 73, 20, 33, 34], vert_on_cells(:,80) )
    deallocate( vert_on_cells )

    allocate( cell_next(4,ncells) )
    cell_next = global_mesh%get_all_cells_next()
    @assertEqual( [ 52,  5,  2, 65], cell_next(:, 1) )
    @assertEqual( [ 31, 84, 45, 28], cell_next(:,32) )
    @assertEqual( [ 56,  1, 65, 51], cell_next(:,52) )
    @assertEqual( [ 64,  9, 56, 59], cell_next(:,60) )
    @assertEqual( [ 76, 79, 20, 33], cell_next(:,80) )
    deallocate( cell_next )

    ! Check number of panels
    npanels = global_mesh%get_npanels( )
    @assertEqual(  6, npanels )

  end subroutine test_cubedsphere_global_mesh


  @test
  subroutine test_cubedsphere_single_file_intergrid(this)

    use configuration_mod, only: final_configuration
    use ncdf_quad_mod,     only: ncdf_quad_type

    implicit none

    class( global_mesh_test_type ), intent( inout ) :: this

    type(ugrid_mesh_data_type)  :: ugrid_mesh_data

    character(len = str_max_filename) :: filename

    integer(i_def) :: cell_id
    integer(i_def) :: verts(4)
    integer(i_def) :: edges(4)
    integer(i_def) :: cells(4)
    integer(i_def) :: ncells

    integer(i_def) :: max_cells_on_vert
    integer(i_def) :: cell_owner
    integer(i_def) :: global_mesh_id1
    integer(i_def) :: global_mesh_id2

    integer(i_def), allocatable :: edge_on_cells(:,:)
    integer(i_def), allocatable :: vert_on_cells(:,:)
    integer(i_def), allocatable :: cell_next(:,:)

    type(global_mesh_type) :: global_mesh
    character(str_def)     :: mesh_name = 'C4'

    filename='data/mesh_C32_MG.nc'
    !-------------------------------------------------
    ! Test construction of a cubed-sphere mesh is same
    !-------------------------------------------------
    mesh_name = 'C4'
    call ugrid_mesh_data%read_from_file(trim(filename), mesh_name)
    global_mesh = global_mesh_type( ugrid_mesh_data, npanels )
    call ugrid_mesh_data%clear()

    ! Check details of C4 mesh

    ! Check the global mesh id
    global_mesh_id2 = global_mesh%get_id()
    @assertTrue(global_mesh_id1 /= global_mesh_id2)

    ! Generate the global_mesh
    cell_id = global_mesh%get_cell_id( 1, 0, 0 )
    @assertEqual( 1, cell_id )
    !
    ! Test functionality of the global_mesh object we've just created
    cell_id = global_mesh%get_cell_id( 1, 2, 2 )
    @assertEqual( 74, cell_id )

    call global_mesh%get_vert_on_cell( 6, verts )
    @assertEqual( 10, verts(1) )
    @assertEqual( 11, verts(2) )
    @assertEqual(  7, verts(3) )
    @assertEqual(  6, verts(4) )

    call global_mesh%get_cell_on_vert( 16, cells )
    @assertEqual( 11, cells(1) )
    @assertEqual( 12, cells(2) )
    @assertEqual( 15, cells(3) )
    @assertEqual( 16, cells(4) )

    call global_mesh%get_edge_on_cell( 6, edges )
    @assertEqual( 15, edges(1) )
    @assertEqual( 16, edges(2) )
    @assertEqual( 17, edges(3) )
    @assertEqual(  6, edges(4) )

    call global_mesh%get_cell_on_edge( 13, cells(1:2) )
    @assertEqual(  5, cells(1) )
    @assertEqual( 56, cells(2) )

    ncells = global_mesh%get_ncells()
    @assertEqual( 96, ncells )

    max_cells_on_vert=global_mesh%get_max_cells_per_vertex()
    @assertEqual( 4, max_cells_on_vert )

    cell_owner=global_mesh%get_vert_cell_owner(1)
    @assertEqual( 65, cell_owner )

    cell_owner=global_mesh%get_edge_cell_owner(1)
    @assertEqual( 65, cell_owner )


    allocate( edge_on_cells(4,ncells) )
    edge_on_cells = global_mesh%get_edge_on_all_cells()
    @assertEqual( [   2,   3,   5,   1], edge_on_cells(:, 1) )
    @assertEqual( [  71,  72, 101,  64], edge_on_cells(:,32) )
    @assertEqual( [ 120,   2, 118, 119], edge_on_cells(:,52) )
    @assertEqual( [ 136,  21, 128, 135], edge_on_cells(:,60) )
    @assertEqual( [ 156, 168,  46,  73], edge_on_cells(:,80) )
    deallocate( edge_on_cells )

    allocate( vert_on_cells(4,ncells) )
    vert_on_cells = global_mesh%get_vert_on_all_cells()
    @assertEqual( [  5,  6,  2,  1], vert_on_cells(:, 1) )
    @assertEqual( [ 77, 94, 45, 32], vert_on_cells(:,32) )
    @assertEqual( [  5,  1, 52, 56], vert_on_cells(:,52) )
    @assertEqual( [ 13,  9, 60, 64], vert_on_cells(:,60) )
    @assertEqual( [ 73, 20, 33, 34], vert_on_cells(:,80) )
    deallocate( vert_on_cells )

    allocate( cell_next(4,ncells) )
    cell_next = global_mesh%get_all_cells_next()
    @assertEqual( [ 52,  5,  2, 65], cell_next(:, 1) )
    @assertEqual( [ 31, 84, 45, 28], cell_next(:,32) )
    @assertEqual( [ 56,  1, 65, 51], cell_next(:,52) )
    @assertEqual( [ 64,  9, 56, 59], cell_next(:,60) )
    @assertEqual( [ 76, 79, 20, 33], cell_next(:,80) )
    deallocate( cell_next )

  end subroutine test_cubedsphere_single_file_intergrid


  @test
  subroutine test_cubedsphere_adding_intergrid_map(this)

    use configuration_mod, only: final_configuration
    use ncdf_quad_mod,     only: ncdf_quad_type

    implicit none

    class( global_mesh_test_type ), intent( inout ) :: this

    type(ugrid_mesh_data_type)  :: ugrid_mesh_data

    character(len = str_max_filename) :: filename

    character(str_def), allocatable :: target_mesh_names(:)

    integer(i_def)     :: kgo_integer
    integer(i_def)     :: test_integer

    type(ncdf_quad_type) :: file_handler
    integer(i_def)       :: i, j
    character(str_def), parameter :: &
        MultiGrid_mesh_names(4) = ['C32','C16','C8 ','C4 ']

    character(str_def)   :: mesh_name
    character(str_def)   :: target_name

    integer(i_def) :: multigrid_ids(4), npanels

    type(global_mesh_type),     pointer :: global_mesh_ptr => null()
    type(global_mesh_type),     pointer :: target_mesh_ptr => null()
    type(global_mesh_map_type), pointer :: global_mesh_map => null()
    type(global_mesh_type)              :: global_mesh
    integer(i_def), allocatable         :: mesh_map(:,:,:)

    !-------------------------------------------------
    ! Test construction of a cubed-sphere mesh is same
    !-------------------------------------------------
    ! Adding the follow meshed from file to global mesh colleciotn

    npanels  = 6
    filename='data/mesh_C32_MG.nc'

    ! 1.0 First read all the requested global meshes into memory.
    ! This is done because the intergrid map ids are based
    ! on the global mesh ids. So all the required global mesh
    ! topologies must be read in first.
    do i=1, size(multigrid_mesh_names)
      call ugrid_mesh_data%read_from_file(trim(filename), multigrid_mesh_names(i))
      global_mesh = global_mesh_type( ugrid_mesh_data, npanels )
      call ugrid_mesh_data%clear()
      MultiGrid_ids(i) = global_mesh%get_id()
      call global_mesh_collection%add_new_global_mesh( global_mesh )
    end do

    ! 2.0 Now extract each global mesh, retrieve and add it's target mesh
    ! maps from the mesh file
    call file_handler%file_open(filename)
    do i=1, size(multigrid_mesh_names)

      global_mesh_ptr => global_mesh_collection%get_global_mesh( multigrid_mesh_names(i) )

      call global_mesh_ptr%get_target_mesh_names(target_mesh_names)

      do j=1, size(target_mesh_names)
        if (global_mesh_collection%check_for(target_mesh_names(j))) then

          call file_handler%read_map( multigrid_mesh_names(i), &
                                      target_mesh_names(j),    &
                                      mesh_map )

          target_mesh_ptr => global_mesh_collection%get_global_mesh( target_mesh_names(j) )

          call global_mesh_ptr%add_global_mesh_map(target_mesh_ptr, mesh_map)
        end if
      end do

    end do
    call file_handler%file_close()

    ! 3.0 Check that the retrieved maps are as expected
    do i=1, size(multigrid_mesh_names)

      global_mesh_ptr => global_mesh_collection%get_global_mesh( multigrid_mesh_names(i) )
      call global_mesh_ptr%get_target_mesh_names(target_mesh_names)

      do j=1, size(target_mesh_names)
        if (global_mesh_collection%check_for(target_mesh_names(j))) then
          target_mesh_ptr => global_mesh_collection%get_global_mesh( target_mesh_names(j) )
          global_mesh_map => global_mesh_ptr%get_global_mesh_map( target_mesh_ptr%get_id() )

          ! Is this map the same as what we expect from the file
          @assertTrue(global_mesh_ptr%get_id()     == global_mesh_map%get_source_id())
          @assertTrue(target_mesh_ptr%get_id()     == global_mesh_map%get_target_id())
          @assertTrue(global_mesh_ptr%get_ncells() == global_mesh_map%get_nsource_cells())
          kgo_integer  = max(target_mesh_ptr%get_ncells()/global_mesh_ptr%get_ncells(),1)
          test_integer = global_mesh_map%get_ntarget_cells_per_source_cell()
          @assertTrue( kgo_integer == test_integer )
        end if
      end do

    end do

    ! 4.0 Now we know the right mesh maps have been added,
    ! check that the contents of the mappings match those
    ! that are in the test mesh file.
    !
    ! The 'C16' is chosen t test as it will have 2 targets,
    ! one coarser and on finer than itself.
    mesh_name='C16'
    global_mesh_ptr => global_mesh_collection%get_global_mesh( mesh_name )

    ! Check map array for C16 -> C8
    target_name='C8'
    target_mesh_ptr => global_mesh_collection%get_global_mesh( target_name )
    global_mesh_map => global_mesh_ptr%get_global_mesh_map( target_mesh_ptr%get_id() )

    ! Check map array for C16 -> C32
    target_name='C32'
    target_mesh_ptr => global_mesh_collection%get_global_mesh( target_name )
    global_mesh_map => global_mesh_ptr%get_global_mesh_map( target_mesh_ptr%get_id() )


  end subroutine test_cubedsphere_adding_intergrid_map

end module global_mesh_mod_test
