!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the global mesh map collection object
!>
module global_mesh_map_collection_mod_test

  use constants_mod,                  only: i_def, str_max_filename
  use global_mesh_map_mod,            only: global_mesh_map_type
  use global_mesh_map_collection_mod, only: global_mesh_map_collection_type

  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: global_mesh_map_collection_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type global_mesh_map_collection_test_type

  integer(i_def), parameter :: source_id     = 1
  integer(i_def), parameter :: target_id     = 2
  integer(i_def), parameter :: ncells_source = 4
  integer(i_def), parameter :: cell_factor_x_SourceToTarget = 2
  integer(i_def), parameter :: cell_factor_y_SourceToTarget = 2
  integer(i_def), parameter :: cell_factor_SourceToTarget = &
                  cell_factor_x_SourceToTarget * cell_factor_y_SourceToTarget

  integer(i_def) :: SourceToTarget_gid_map( 2, 2, 4  )

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(global_mesh_map_collection_test_type), intent(inout) :: this

    SourceToTarget_gid_map =      &
      reshape([  1,  2,  5,  6,   &! Map for Source Gid Cell 1
                 3,  4,  7,  8,   &! Map for Source Gid Cell 2
                 9, 10, 13, 14,   &! Map for Source Gid Cell 3
                11, 12, 15, 16 ]  &! Map for Source Gid Cell 4
              , [ cell_factor_x_SourceToTarget, &
                  cell_factor_y_SourceToTarget, &
                  ncells_source ] )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(global_mesh_map_collection_test_type), intent(inout) :: this

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @test
  subroutine test_all( this )

    implicit none

    class(global_mesh_map_collection_test_type), intent(inout) :: this

    type(global_mesh_map_collection_type) :: global_mesh_map_collection
    type(global_mesh_map_type), pointer :: test_global_mesh_map => null()

    integer(i_def) :: tmp_gid_map(cell_factor_x_SourceToTarget, cell_factor_y_SourceToTarget, 1)
    integer(i_def) :: data_gid_map(cell_factor_x_SourceToTarget, cell_factor_y_SourceToTarget, 1)
    integer(i_def) :: tmp_int
    integer(i_def) :: i

    ! Create a mesh map collection
    global_mesh_map_collection = global_mesh_map_collection_type()

    ! Test api to add and retrieve a global_mesh_map object from the collection
    call global_mesh_map_collection %        &
             add_global_mesh_map( source_id, &
                                  target_id, &
                                  SourceToTarget_gid_map )

    test_global_mesh_map =>                  &
        global_mesh_map_collection %         &
            get_global_mesh_map( source_id,  &
                                 target_id )

    ! Test that the global mesh map returned has the correct info
    tmp_int = test_global_mesh_map%get_source_id()
    @assertEqual( tmp_int, source_id )

    tmp_int = test_global_mesh_map%get_target_id()
    @assertEqual( tmp_int, target_id )

    tmp_int = test_global_mesh_map%get_nsource_cells()
    @assertEqual( tmp_int, ncells_source )

    tmp_int = test_global_mesh_map%get_ntarget_cells_per_source_cell()
    @assertEqual( tmp_int, cell_factor_SourceToTarget )

    do i=1, ncells_source
      call test_global_mesh_map%get_cell_map([i], tmp_gid_map)
      data_gid_map(:,:,1) = SourceToTarget_gid_map(:,:,i)
      @assertEqual( tmp_gid_map, data_gid_map )
    end do

    ! Test that a null pointer is returned if no map is present
    test_global_mesh_map =>                                         &
        global_mesh_map_collection%get_global_mesh_map( source_id,  &
                                                        source_id )
    @assertNotAssociated(test_global_mesh_map)

    ! Tear down the collection
    call global_mesh_map_collection%clear()

  end subroutine test_all

end module global_mesh_map_collection_mod_test
