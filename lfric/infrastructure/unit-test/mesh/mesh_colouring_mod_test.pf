!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------
!> @brief Test suite to verify computation of colour map.
!>
!-------------------------------------------------------------------------------
module mesh_colouring_mod_test
!-------------------------------------------------------------------------------
  use constants_mod,              only : i_def, imdi, r_def, &
                                         str_def, str_max_filename
  use extrusion_mod,              only : uniform_extrusion_type, PRIME_EXTRUSION
  use global_mesh_mod,            only : global_mesh_type
  use halo_comms_mod,             only : initialise_halo_comms, &
                                         finalise_halo_comms
  use local_mesh_mod,             only : local_mesh_type
  use mpi_mod,                    only : store_comm, clear_comm
  use ugrid_mesh_data_mod,        only : ugrid_mesh_data_type

  use pFUnit_Mod

  implicit none

  private
  public setUp, tearDown, test_compute_colours_cubedsphere, &
                          test_compute_colours_biperiodic,  &
                          test_compute_colours_generic

  @testCase
  type, public, extends(MPITestCase) :: compute_colours_test_type
    integer       :: total_ranks, local_rank
    integer       :: xproc, yproc
    integer       :: num_layers
    integer       :: element_order
  contains
    procedure     :: setUp
    procedure     :: tearDown
    procedure     :: test_compute_colours_cubedsphere
    procedure     :: test_compute_colours_biperiodic
    procedure     :: test_compute_colours_generic
  end type compute_colours_test_type

  character(str_def), parameter :: mesh_name ='unit_test'

!-------------------------------------------------------------------------------
contains
!-------------------------------------------------------------------------------
subroutine setUp(this)

  implicit none

  class(compute_colours_test_type), intent(inout)  :: this

  !Store the MPI communicator for later use
  call store_comm(this%getMpiCommunicator())
  ! Initialise halo functionality
  call initialise_halo_comms( this%getMpiCommunicator() )

  this%total_ranks = 1
  this%local_rank = 0
  this%xproc = 1
  this%yproc = 1
  this%num_layers = 5
  this%element_order = 0

end subroutine setUp
!-------------------------------------------------------------------------------
subroutine tearDown(this)

  implicit none

  class(compute_colours_test_type), intent(inout) :: this

  integer  :: rc

  ! Finalise halo functionality
  call finalise_halo_comms()
  ! Clear the stored MPI communicator
  call clear_comm()

end subroutine tearDown
!-------------------------------------------------------------------------------
@Test( npes=[1] )
! Note that the amount of testing that can be done is limited as the serial partitioner
! does not set up halos.
subroutine test_compute_colours_cubedsphere(this)

  use mesh_mod,             only : mesh_type
  use partition_mod,        only : partition_type, &
                                   partitioner_interface, &
                                   partitioner_cubedsphere_serial

  implicit none

  class(compute_colours_test_type), intent(inout)  :: this

  character(len=str_max_filename)  :: filename
  integer(i_def)                   :: total_colours, total_cells, colour_idx
  integer(i_def)                   :: nc_colour, cic_colour, nc_colour_subset
  integer(i_def), allocatable      :: nc_all_colours_array(:,:)
  integer(i_def), allocatable      :: nc_all_colours_edge_array(:)
  integer(i_def), allocatable      :: nc_all_colours_deepest_array(:)
  integer(i_def), allocatable      :: nc_all_colours_inner_array(:,:)
  ! Halo of 1 required till partitioned mesh can be tested
  integer(i_def), parameter        :: halo_depth = 1
  type(partition_type)             :: partition
  type(ugrid_mesh_data_type)       :: ugrid_mesh_data
  type(global_mesh_type), pointer  :: global_mesh_ptr => null()
  type(global_mesh_type), target   :: global_mesh
  type(local_mesh_type), target    :: local_mesh
  type(local_mesh_type), pointer   :: local_mesh_ptr
  type(uniform_extrusion_type)     :: extrusion
  procedure(partitioner_interface), pointer  :: partitioner_ptr => null()

  integer(i_def)                   :: num_cells
  integer(i_def)                   :: num_colours
  integer(kind=i_def), pointer :: num_cell_per_colour(:) => null()
  integer(kind=i_def), pointer :: cells_in_colour(:,:)   => null()

  integer(i_def)   :: npanels
  type(mesh_type)  :: mesh
  integer(i_def)   :: err
  character( 200 ) :: message

  npanels = 6
  filename = "data/mesh_C4.nc"
  call ugrid_mesh_data%read_from_file(trim(filename), mesh_name)
  global_mesh = global_mesh_type( ugrid_mesh_data, npanels )
  call ugrid_mesh_data%clear()
  global_mesh_ptr => global_mesh

  partitioner_ptr => partitioner_cubedsphere_serial
  partition = partition_type( global_mesh_ptr, &
                            partitioner_ptr, &
                            this%xproc, &
                            this%yproc, &
                            halo_depth, &
                            this%local_rank, &
                            this%total_ranks)

  call local_mesh%initialise( global_mesh_ptr, partition )
  call local_mesh%init_cell_owner()
  local_mesh_ptr => local_mesh

  extrusion = uniform_extrusion_type( 100.0_r_def,     &
                                      10000.0_r_def,   &
                                      this%num_layers, &
                                      PRIME_EXTRUSION )

  ! Construct a mesh which is  uniform in vertical for purpose of the test
  mesh = mesh_type( local_mesh_ptr, extrusion )
  @assertTrue(mesh%is_coloured(), "Mesh uncoloured")

  num_cells = partition%get_num_cells_in_layer()

  call mesh%get_colours(num_colours, num_cell_per_colour, cells_in_colour)

  ! Is there storage for colour maps...
  @assertTrue(associated(cells_in_colour), "Colours not set for function space.")
  ! Is total number of colours used meaningful...
  write(message,'(A,I5)')"Failed to colour cubed-sphere with 4 colours. Used ",num_colours
  @assertTrue(num_colours == 4, message)

  ! Did we colour everything...
  total_cells = sum(num_cell_per_colour)
  @assertEqual(total_cells, num_cells, "Not all cells coloured.")

  ! Did we use all claimed colours...
  total_colours = size(cells_in_colour, 1)
  @assertEqual(total_colours, num_colours, "Reported used colours unequal to actual used total.")

  ! Extract arrays of from various functions that give number of cells for a given colour
  ! and area of the domain.
  ! Array for holding cells per colour per halo depth
  nc_all_colours_array = mesh%get_last_halo_cell_all_colours()
  ! Array for holding cells per colour for the deepest halo
  nc_all_colours_deepest_array = mesh%get_last_halo_cell_all_colours_deepest()
  ! Array for holding cells per colour for the edge of the domain
  nc_all_colours_edge_array = mesh%get_last_edge_cell_all_colours()
  ! Array for holding cells per colour for the inner halos of the domain
  nc_all_colours_inner_array = mesh%get_last_inner_cell_all_colours()

  ! Check a range of functions for each colour
  do colour_idx=1, num_colours
    ! Does the total in each colour match the cells in the colour map...
    nc_colour = num_cell_per_colour(colour_idx)
    cic_colour = count(cells_in_colour(colour_idx,:) /= 0)
    @assertEqual(nc_colour, cic_colour, "Mismatch between num-per-colour total and cell count.")
    ! For an unpartitioned mesh all the following should be equal to
    ! the number of cells in the colour, so they are not terribly
    ! meaningful tests. It is beneficial that they will break once the
    ! test is attempted on a parallel setup, and the tests can then be
    ! extended to be more useful.
    nc_colour_subset = mesh%get_last_edge_cell_per_colour(colour_idx)
    @assertEqual(nc_colour, nc_colour_subset, "Mismatch between num-per-colour total and no. up to last edge cell.")
    nc_colour_subset = mesh%get_last_halo_cell_per_colour( colour_idx, halo_depth )
    @assertEqual(nc_colour, nc_colour_subset, "Mismatch between num-per-colour total and no. up to last halo cell.")
    nc_colour_subset = nc_all_colours_array( colour_idx, halo_depth )
    @assertEqual(nc_colour, nc_colour_subset, "Mismatch between num-per-colour total and no. up to last halo cell from all_colours call")
    nc_colour_subset = nc_all_colours_deepest_array( colour_idx )
    @assertEqual(nc_colour, nc_colour_subset, "Mismatch between num-per-colour total and no. up to last halo cell from all_colours_deepest call")
    nc_colour_subset = nc_all_colours_edge_array( colour_idx )
    @assertEqual(nc_colour, nc_colour_subset, "Mismatch between num-per-colour total and no. up to last halo cell from edge_all_colours call")
    nc_colour_subset = nc_all_colours_inner_array( colour_idx, halo_depth )
    @assertEqual(nc_colour, nc_colour_subset, "Mismatch between num-per-colour total and no. up to last halo cell from inner_cell_all_colours call")
  end do

  deallocate( nc_all_colours_array, nc_all_colours_edge_array, &
       nc_all_colours_deepest_array, nc_all_colours_inner_array  )

  return
end subroutine test_compute_colours_cubedsphere
!-------------------------------------------------------------------------------
@Test( npes=[1] )
subroutine test_compute_colours_biperiodic(this)

  use mesh_mod,             only : mesh_type
  use partition_mod,        only : partition_type, &
                                   partitioner_interface, &
                                   partitioner_planar

  implicit none

  class(compute_colours_test_type), intent(inout)  :: this

  character(len=str_max_filename)  :: filename
  integer                          :: total_colours, total_cells, colour_idx
  integer                          :: nc_colour, cic_colour, nc_colour_subset
  type(partition_type)             :: partition
  type(uniform_extrusion_type)     :: extrusion
  type(ugrid_mesh_data_type)       :: ugrid_mesh_data
  type(global_mesh_type), pointer  :: global_mesh_ptr => null()
  type(global_mesh_type), target   :: global_mesh
  type(local_mesh_type), target    :: local_mesh
  type(local_mesh_type), pointer   :: local_mesh_ptr
  procedure(partitioner_interface), pointer  :: partitioner_ptr => null()

  integer(i_def)                   :: num_cells
  integer(i_def)                   :: num_colours
  integer(kind=i_def), pointer :: num_cell_per_colour(:) => null()
  integer(kind=i_def), pointer :: cells_in_colour(:,:)   => null()

  integer(i_def)  :: npanels
  type(mesh_type) :: mesh
  integer(i_def)  :: err

  npanels = 1
  filename = "data/mesh_BiP8x8-750x250.nc"
  call ugrid_mesh_data%read_from_file(trim(filename), mesh_name)
  global_mesh = global_mesh_type( ugrid_mesh_data, npanels )
  call ugrid_mesh_data%clear()
  global_mesh_ptr => global_mesh

  partitioner_ptr => partitioner_planar
  partition = partition_type(global_mesh_ptr, &
                            partitioner_ptr, &
                            this%xproc, &
                            this%yproc, &
                            1, &
                            this%local_rank, &
                            this%total_ranks)

  call local_mesh%initialise( global_mesh_ptr, partition )
  call local_mesh%init_cell_owner()
  local_mesh_ptr => local_mesh

  extrusion = uniform_extrusion_type( 100.00_r_def,    &
                                      10000.0_r_def,   &
                                      this%num_layers, &
                                      PRIME_EXTRUSION )

  ! Construct a mesh which is  uniform in vertical for purpose of the test
  mesh = mesh_type( local_mesh_ptr, extrusion )
  @assertTrue(mesh%is_coloured(), "Mesh uncoloured")

  num_cells = partition%get_num_cells_in_layer()

  call mesh%get_colours(num_colours, num_cell_per_colour, cells_in_colour)

  ! Is there storage for colour maps...
  @assertTrue(associated(cells_in_colour), "Colours not set for function space.")

  ! Is total number of colours used meaningful...
  @assertTrue(num_colours == 4, "Failed to colour biperiodic mesh with 4 colours")

  ! Did we colour everything...
  total_cells = sum(num_cell_per_colour)
  @assertEqual(total_cells, num_cells, "Not all cells coloured.")

  ! Did we use all claimed colours...
  total_colours = size(cells_in_colour, 1)
  @assertEqual(total_colours, num_colours, "Reported used colours unequal to actual used total.")

  ! Does the total in each colour match the cells in the colour map...
  do colour_idx=1, num_colours
    nc_colour = num_cell_per_colour(colour_idx)
    cic_colour = count(cells_in_colour(colour_idx,:) /= 0)
    @assertEqual(nc_colour, cic_colour, "Mismatch between num-per-colour total and cell count.")
    ! For an unpartitioned mesh all the following should be equal to the number of cells in the colour
    ! So they are not terribly meaningful tests
    nc_colour_subset = mesh%get_last_edge_cell_per_colour(colour_idx)
    @assertEqual(nc_colour, nc_colour_subset, "Mismatch between num-per-colour total and no. upto last edge cell.")
    nc_colour_subset = mesh%get_last_halo_cell_per_colour(colour_idx,1)
    @assertEqual(nc_colour, nc_colour_subset, "Mismatch between num-per-colour total and no. upto last halo cell.")
  end do


  return
end subroutine test_compute_colours_biperiodic
! This test uses a cubed sphere mesh but sneakily does not set panel number to 6 so
! forcing the colour algorithm to use the generic colour test
@Test( npes=[1] )
subroutine test_compute_colours_generic(this)

  use mesh_mod,             only : mesh_type
  use partition_mod,        only : partition_type, &
                                   partitioner_interface, &
                                   partitioner_cubedsphere_serial

  implicit none

  class(compute_colours_test_type), intent(inout)  :: this

  character(len=str_max_filename)  :: filename
  integer                          :: total_colours, total_cells, colour_idx
  integer                          :: nc_colour, cic_colour
  type(partition_type)             :: partition
  type(uniform_extrusion_type)     :: extrusion
  type(ugrid_mesh_data_type)       :: ugrid_mesh_data
  type(global_mesh_type), pointer  :: global_mesh_ptr => null()
  type(global_mesh_type), target   :: global_mesh
  procedure(partitioner_interface), pointer  :: partitioner_ptr => null()
  type(local_mesh_type), target    :: local_mesh
  type(local_mesh_type), pointer   :: local_mesh_ptr

  integer(i_def)                   :: num_cells
  integer(i_def)                   :: num_colours
  integer(kind=i_def), pointer :: num_cell_per_colour(:) => null()
  integer(kind=i_def), pointer :: cells_in_colour(:,:)   => null()

  integer(i_def)  :: npanels
  type(mesh_type) :: mesh
  integer(i_def)  :: err

  ! Force colour generator to use generic colour routine by not saying
  ! it's a cubed sphere
  npanels = IMDI
  filename = "data/mesh_C4.nc"
  call ugrid_mesh_data%read_from_file(trim(filename), mesh_name)
  global_mesh = global_mesh_type( ugrid_mesh_data, npanels )
  call ugrid_mesh_data%clear()
  global_mesh_ptr => global_mesh

  partitioner_ptr => partitioner_cubedsphere_serial
  partition = partition_type( global_mesh_ptr, &
                            partitioner_ptr, &
                            this%xproc, &
                            this%yproc, &
                            1, &
                            this%local_rank, &
                            this%total_ranks)

  call local_mesh%initialise( global_mesh_ptr, partition )
  call local_mesh%init_cell_owner()
  local_mesh_ptr => local_mesh

  extrusion = uniform_extrusion_type( 100.0_r_def,     &
                                      10000.0_r_def,   &
                                      this%num_layers, &
                                      PRIME_EXTRUSION )

  ! Construct a mesh which is  uniform in vertical for purpose of the test
  mesh = mesh_type( local_mesh_ptr, extrusion )
  @assertTrue(mesh%is_coloured(), "Mesh uncoloured")

  num_cells = partition%get_num_cells_in_layer()

  call mesh%get_colours(num_colours, num_cell_per_colour, cells_in_colour)

  ! Is there storage for colour maps...
  @assertTrue(associated(cells_in_colour), "Colours not set for function space.")

  ! Is total number of colours used meaningful...
  @assertTrue(num_colours > 0, "Non-positive used colour count.")

  ! Did we colour everything...
  total_cells = sum(num_cell_per_colour)
  @assertEqual(total_cells, num_cells, "Not all cells coloured.")

  ! Did we use all claimed colours...
  total_colours = size(cells_in_colour, 1)
  @assertEqual(total_colours, num_colours, "Reported used colours unequal to actual used total.")

  ! Does the total in each colour match the cells in the colour map...
  do colour_idx=1, num_colours
    nc_colour = num_cell_per_colour(colour_idx)
    cic_colour = count(cells_in_colour(colour_idx,:) /= 0)
    @assertEqual(nc_colour, cic_colour, "Mismatch between num-per-colour total and cell count.")
  end do


  return
end subroutine test_compute_colours_generic
!-------------------------------------------------------------------------------
!-------------------------------------------------------------------------------
end module mesh_colouring_mod_test
!-------------------------------------------------------------------------------
