!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> @brief pFunit tests for the mesh map collection
!>
module mesh_map_collection_mod_test

  use constants_mod,              only: r_def, i_def, IMDI, &
                                        str_max_filename, str_def
  use extrusion_mod,              only: uniform_extrusion_type, PRIME_EXTRUSION
  use global_mesh_mod,            only: global_mesh_type
  use halo_comms_mod,             only: initialise_halo_comms, &
                                        finalise_halo_comms
  use local_mesh_mod,             only: local_mesh_type
  use mesh_map_collection_mod,    only: mesh_map_collection_type
  use mesh_map_mod,               only: mesh_map_type
  use mesh_mod,                   only: mesh_type
  use mpi_mod,                    only: store_comm, clear_comm
  use partition_mod,              only: partition_type, partitioner_interface, &
                                        partitioner_cubedsphere_serial
  use ugrid_mesh_data_mod,        only: ugrid_mesh_data_type

  use pFUnit_Mod

  implicit none

  private
  public :: mesh_map_collection_test_type, test_mesh_map_collection

  @testCase
  type, extends( MPITestCase ) :: mesh_map_collection_test_type
    private
    type(mesh_type) :: coarse_mesh
    type(mesh_type) :: fine_mesh
  contains
    procedure :: setUp
    procedure :: tearDown
    procedure :: test_mesh_map_collection
  end type mesh_map_collection_test_type

  character(str_max_filename), &
                  parameter :: filename    = 'data/mesh_C32_MG.nc'
  integer(i_def), parameter :: local_rank  = 0_i_def
  integer(i_def), parameter :: total_ranks = 1_i_def
  integer(i_def), parameter :: max_stencil_depth = 0_i_def
  integer(i_def), parameter :: xproc       = 1_i_def
  integer(i_def), parameter :: yproc       = 1_i_def
  integer(i_def), parameter :: nlayers     = 5_i_def
  real(r_def),    parameter :: domain_top  = 10000.0_r_def
  real(r_def),    parameter :: radius      = 6371229.0_r_def


contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class( mesh_map_collection_test_type ), intent( inout ) :: this

    type(uniform_extrusion_type)    :: extrusion
    type(ugrid_mesh_data_type)      :: ugrid_mesh_data
    type(global_mesh_type), target  :: coarse_global_mesh
    type(global_mesh_type), pointer :: coarse_global_mesh_ptr => null()
    type(global_mesh_type), target  :: fine_global_mesh
    type(global_mesh_type), pointer :: fine_global_mesh_ptr => null()
    type(partition_type)            :: coarse_partition
    type(partition_type)            :: fine_partition
    type(local_mesh_type), target   :: coarse_local_mesh
    type(local_mesh_type), pointer  :: coarse_local_mesh_ptr => null()
    type(local_mesh_type), target   :: fine_local_mesh
    type(local_mesh_type), pointer  :: fine_local_mesh_ptr => null()

    character(str_def)     :: name
    type(global_mesh_type) :: global_mesh
    type(mesh_type)        :: mesh

    procedure (partitioner_interface), pointer :: partitioner_ptr => null()
    integer(i_def)         :: npanels

    !Store the MPI communicator for later use
    call store_comm(this%getMpiCommunicator())
    ! Initialise halo functionality
    call initialise_halo_comms( this%getMpiCommunicator() )

    partitioner_ptr => partitioner_cubedsphere_serial
    npanels = 6

    ! Extrussion to be used for all meshes
    extrusion = uniform_extrusion_type( radius, domain_top, nlayers, &
                                        PRIME_EXTRUSION )

    ! Get coarse mesh
    name = 'C4'
    call ugrid_mesh_data%read_from_file(trim(filename), name)
    coarse_global_mesh = global_mesh_type( ugrid_mesh_data, npanels)
    coarse_global_mesh_ptr => coarse_global_mesh
    call ugrid_mesh_data%clear()

    coarse_partition = partition_type( coarse_global_mesh_ptr, &
                                       partitioner_ptr,        &
                                       xproc, yproc,           &
                                       max_stencil_depth,      &
                                       local_rank, total_ranks )

    call coarse_local_mesh%initialise( coarse_global_mesh_ptr, &
                                       coarse_partition )
    call coarse_local_mesh%init_cell_owner()
    coarse_local_mesh_ptr => coarse_local_mesh

    this%coarse_mesh = mesh_type( coarse_local_mesh_ptr, extrusion )
    ! Get fine mesh
    name = 'C8'
    call ugrid_mesh_data%read_from_file(trim(filename), name)
    fine_global_mesh = global_mesh_type( ugrid_mesh_data, npanels)
    fine_global_mesh_ptr => fine_global_mesh
    call ugrid_mesh_data%clear()

    fine_partition   = partition_type( fine_global_mesh_ptr,   &
                                       partitioner_ptr,        &
                                       xproc, yproc,           &
                                       max_stencil_depth,      &
                                       local_rank, total_ranks )

    call fine_local_mesh%initialise( fine_global_mesh_ptr, &
                                     fine_partition )
    call fine_local_mesh%init_cell_owner()
    fine_local_mesh_ptr => fine_local_mesh

    this%fine_mesh = mesh_type( fine_local_mesh_ptr, extrusion )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use configuration_mod, only: final_configuration

    implicit none

    class( mesh_map_collection_test_type ), intent( inout ) :: this

    ! Finalise halo functionality
    call finalise_halo_comms()
    ! Clear the stored MPI communicator
    call clear_comm()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test( npes=[1] )
  subroutine test_mesh_map_collection( this )

    implicit none

    class( mesh_map_collection_test_type ), intent( inout ) :: this

    type (mesh_map_collection_type) :: mesh_map_collection

    type (mesh_map_type),  pointer :: mesh_map  => null()
    type (mesh_map_type),  pointer :: mesh_map2 => null()

    integer(i_def) :: ntarget_cells_per_source_cell_x
    integer(i_def) :: ntarget_cells_per_source_cell_y
    integer(i_def) :: nsource_cells

    integer(i_def), allocatable :: cell_map(:,:,:)

    mesh_map_collection = mesh_map_collection_type()

    ntarget_cells_per_source_cell_x = 2
    ntarget_cells_per_source_cell_y = 2
    nsource_cells                 = this%coarse_mesh%get_ncells_2d()
    allocate(cell_map(ntarget_cells_per_source_cell_x, &
                      ntarget_cells_per_source_cell_y, &
                      nsource_cells))

    ! For this test we don't care what's in the map
    cell_map(:,:,:) = IMDI

    call mesh_map_collection%add_mesh_map( this%coarse_mesh%get_id(), &
                                           this%fine_mesh%get_id(),   &
                                           cell_map )
    mesh_map => mesh_map_collection%get_mesh_map( this%coarse_mesh%get_id(), &
                                                  this%fine_mesh%get_id() )
    @assertAssociated ( mesh_map )

    call mesh_map_collection%add_mesh_map( this%coarse_mesh%get_id(), &
                                           this%fine_mesh%get_id(),   &
                                           cell_map )
    mesh_map2 => mesh_map_collection%get_mesh_map( this%coarse_mesh%get_id(), &
                                                   this%fine_mesh%get_id() )

    @assertAssociated ( mesh_map2 )

    @assertEqual ( associated(mesh_map, mesh_map2), .true. )

    deallocate(cell_map)
    call mesh_map_collection%clear()

  end subroutine test_mesh_map_collection

end module mesh_map_collection_mod_test


