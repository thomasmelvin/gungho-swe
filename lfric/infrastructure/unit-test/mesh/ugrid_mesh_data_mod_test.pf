!-----------------------------------------------------------------------------
! (c) Crown copyright 2020 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> Test the ugrid_mesh_data module
!>
module ugrid_mesh_data_mod_test

  use constants_mod,              only: r_def, i_def, str_def, l_def
  use ugrid_mesh_data_mod,        only: ugrid_mesh_data_type

  use mpi_mod, only: store_comm, clear_comm
  use pFUnit_Mod

  implicit none

  private
  public :: test_ugrid_mesh_data, &
            setUp, tearDown

  @testCase
  type, public, extends( MPITestCase ) :: ugrid_mesh_data_test_type
    private
  contains
    private
    procedure, public :: setUp
    procedure, public :: tearDown
    procedure, public :: test_ugrid_mesh_data
  end type ugrid_mesh_data_test_type

contains

  subroutine setUp( this )

    implicit none

    class( ugrid_mesh_data_test_type ), intent( inout ) :: this

    !Store the MPI communicator for later use
    call store_comm(this%getMpiCommunicator())

  end subroutine setUp

  subroutine tearDown( this )

    use configuration_mod, only: final_configuration

    implicit none

    class( ugrid_mesh_data_test_type ), intent( inout ) :: this

    call final_configuration()

    ! Clear the stored MPI communicator
    call clear_comm()

  end subroutine tearDown

  ! Test global_mesh module functionality
  !
  @test( npes=[1] )
  subroutine test_ugrid_mesh_data( this )

    implicit none

    class( ugrid_mesh_data_test_type ), intent( inout ) :: this

    type(ugrid_mesh_data_type)  :: ugrid_mesh_data

    character(str_def) :: filename
    character(str_def) :: mesh_name_in
    character(str_def) :: mesh_name_out
    integer(i_def) :: nnode
    integer(i_def) :: nedge
    integer(i_def) :: nface
    integer(i_def) :: nnodes_per_face
    integer(i_def) :: nnodes_per_edge
    integer(i_def) :: nedges_per_face
    integer(i_def) :: max_faces_per_node

    character(str_def) :: geometry
    character(str_def) :: topology
    character(str_def) :: coord_sys

    logical(l_def) :: periodic_x
    logical(l_def) :: periodic_y
    integer(i_def) :: ntarget_meshes
    integer(i_def) :: max_stencil_depth

    character(str_def), allocatable :: target_global_mesh_names(:)
    real(r_def), allocatable :: node_coords(:,:)
    real(r_def), allocatable :: face_coords(:,:)
    integer(i_def), allocatable :: face_next_2d(:,:)
    integer(i_def), allocatable :: node_on_face_2d(:,:)
    integer(i_def), allocatable :: edge_on_face_2d(:,:)

    !-------------------------------------
    ! Test ugrid_mesh_data object
    !-------------------------------------

    mesh_name_in = 'unit_test'
    filename = 'data/mesh_BiP8x8-750x250.nc'
    call ugrid_mesh_data%read_from_file(trim(filename), mesh_name_in)

    call ugrid_mesh_data%get_data( mesh_name_out, &
                              geometry,  &
                              topology,  &
                              coord_sys, &
                              nnode, &
                              nedge, &
                              nface, &
                              nnodes_per_face, &
                              nnodes_per_edge, &
                              nedges_per_face, &
                              max_faces_per_node, &
                              periodic_x, &
                              periodic_y, &
                              ntarget_meshes, &
                              target_global_mesh_names, &
                              node_coords, &
                              face_coords, &
                              face_next_2d, &
                              node_on_face_2d, &
                              edge_on_face_2d,&
                              max_stencil_depth )

    @assertEqual(mesh_name_in, mesh_name_out)
    @assertEqual(64_i_def, nnode)
    @assertEqual(128_i_def, nedge)
    @assertEqual(64_i_def, nface)
    @assertEqual(4_i_def, nnodes_per_face)
    @assertEqual(2_i_def, nnodes_per_edge)
    @assertEqual(4_i_def, nedges_per_face)
    @assertEqual(4_i_def, max_faces_per_node)
    @assertEqual('planar',    trim(geometry))
    @assertEqual('periodic', trim(topology))
    @assertEqual('xyz',       trim(coord_sys))
    @assertEqual(0,max_stencil_depth)

    @assertTrue(periodic_x)
    @assertTrue(periodic_y)
    @assertEqual(0_i_def, ntarget_meshes)

    @assertEqual( [-3000.0_r_def,   750.0_r_def], node_coords(:,1), 1.0e-2_r_def)
    @assertEqual( [ -750.0_r_def,  1000.0_r_def], node_coords(:,8), 1.0e-2_r_def)
    @assertEqual( [  750.0_r_def,  1000.0_r_def], node_coords(:,12), 1.0e-2_r_def)
    @assertEqual( [-3000.0_r_def,  -750.0_r_def], node_coords(:,57), 1.0e-2_r_def)
    @assertEqual( [ 2250.0_r_def,  -750.0_r_def], node_coords(:,64), 1.0e-2_r_def)

    @assertEqual( [-2625.0_r_def,   875.0_r_def], face_coords(:,1), 1.0e-2_r_def)
    @assertEqual( [ 2625.0_r_def,   875.0_r_def], face_coords(:,8), 1.0e-2_r_def)
    @assertEqual( [ -375.0_r_def,   625.0_r_def], face_coords(:,12), 1.0e-2_r_def)
    @assertEqual( [-2625.0_r_def,  -875.0_r_def], face_coords(:,57), 1.0e-2_r_def)
    @assertEqual( [ 2625.0_r_def,  -875.0_r_def], face_coords(:,64), 1.0e-2_r_def)

    @assertEqual( [  8_i_def,  9_i_def,  2_i_def, 57_i_def], face_next_2d(:,1)  )
    @assertEqual( [  7_i_def, 16_i_def,  1_i_def, 64_i_def], face_next_2d(:,8)  )
    @assertEqual( [ 11_i_def, 20_i_def, 13_i_def,  4_i_def], face_next_2d(:,12) )
    @assertEqual( [ 64_i_def,  1_i_def, 58_i_def, 49_i_def], face_next_2d(:,57) )
    @assertEqual( [ 63_i_def,  8_i_def, 57_i_def, 56_i_def], face_next_2d(:,64) )

    @assertEqual( [  1_i_def,  2_i_def,  3_i_def,   4_i_def], node_on_face_2d(:,1)  )
    @assertEqual( [ 15_i_def,  1_i_def,  4_i_def,  16_i_def], node_on_face_2d(:,8)  )
    @assertEqual( [ 20_i_def, 21_i_def,  9_i_def,   7_i_def], node_on_face_2d(:,12) )
    @assertEqual( [  4_i_def,  3_i_def, 58_i_def,  57_i_def], node_on_face_2d(:,57) )
    @assertEqual( [ 16_i_def,  4_i_def, 57_i_def,  64_i_def], node_on_face_2d(:,64) )

    @assertEqual( [  1_i_def,  2_i_def,   3_i_def,   4_i_def], edge_on_face_2d(:,1)  )
    @assertEqual( [ 21_i_def, 23_i_def,   1_i_def,  24_i_def], edge_on_face_2d(:,8)  )
    @assertEqual( [ 31_i_def, 32_i_def,  33_i_def,  11_i_def], edge_on_face_2d(:,12) )
    @assertEqual( [121_i_def,  4_i_def, 122_i_def, 106_i_def], edge_on_face_2d(:,57) )
    @assertEqual( [128_i_def, 24_i_def, 121_i_def, 120_i_def], edge_on_face_2d(:,64) )

    call ugrid_mesh_data%clear()

  end subroutine test_ugrid_mesh_data

end module ugrid_mesh_data_mod_test
