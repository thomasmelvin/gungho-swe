!-----------------------------------------------------------------------------
! (C) Crown copyright 2020 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> Test the local mesh collection object
!>
module local_mesh_collection_mod_test

  use constants_mod,              only: i_def,                    &
                                        str_max_filename, str_def
    use global_mesh_collection_mod,                               &
                              only : global_mesh_collection_type, &
                                     global_mesh_collection
    use global_mesh_mod,      only : global_mesh_type
    use local_mesh_collection_mod,                                &
                              only : local_mesh_collection_type,  &
                                     local_mesh_collection
    use local_mesh_mod,       only : local_mesh_type
    use partition_mod,        only : partition_type,              &
                                     partitioner_planar,          &
                                     partitioner_interface
    use ugrid_mesh_data_mod,  only : ugrid_mesh_data_type

    use mpi_mod,              only : store_comm, clear_comm,      &
                                     get_comm_size, get_comm_rank
    use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(MPITestCase), public :: local_mesh_collection_test_type
    private
    integer :: total_ranks
    integer :: local_rank
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type local_mesh_collection_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(local_mesh_collection_test_type), intent(inout) :: this

    !Store the MPI communicator for later use
    call store_comm(this%getMpiCommunicator())

    this%total_ranks = get_comm_size()
    this%local_rank  = get_comm_rank()

    ! Create top level collections
    global_mesh_collection = global_mesh_collection_type()
    local_mesh_collection = local_mesh_collection_type()


  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(local_mesh_collection_test_type), intent(inout) :: this

    call global_mesh_collection%clear()
    call local_mesh_collection%clear()

    ! Clear the stored MPI communicator
    call clear_comm()

  end subroutine tearDown

  @test( npes=[1] )
  subroutine test_all( this )

    implicit none

    class(local_mesh_collection_test_type), intent(inout) :: this

    character(len = str_max_filename) :: filename
    character(str_def) :: mesh_name
    integer(i_def) :: npanels
    type(ugrid_mesh_data_type) :: ugrid_mesh_data
    type(global_mesh_type) :: global_mesh
    type(global_mesh_type), pointer :: global_mesh_ptr => null()
    integer(i_def) :: global_mesh_id
    integer(i_def) :: xproc
    integer(i_def) :: yproc
    integer(i_def) :: max_stencil_depth
    procedure (partitioner_interface), pointer :: partitioner_ptr => null()
    type(partition_type) :: partition
    type(local_mesh_type) :: local_mesh
    type(local_mesh_type) :: unit_test_local_mesh
    type(local_mesh_type), pointer :: local_mesh_ptr1,  local_mesh_ptr2
    integer(i_def) :: local_mesh_id
    integer(i_def) :: unit_test_local_mesh_id

    filename = 'data/mesh_BiP8x8-750x250.nc'
    mesh_name = 'unit_test'
    npanels  = 1
    call ugrid_mesh_data%read_from_file(trim(filename), mesh_name)
    global_mesh = global_mesh_type( ugrid_mesh_data, npanels )
    call ugrid_mesh_data%clear()
    global_mesh_id = global_mesh%get_id()
    call global_mesh_collection%add_new_global_mesh( global_mesh )
    global_mesh_ptr => global_mesh_collection%get_global_mesh( global_mesh_id )
    partitioner_ptr => partitioner_planar
    xproc = 1
    yproc = 1
    max_stencil_depth = 1
    partition = partition_type( global_mesh_ptr,   &
                                partitioner_ptr,   &
                                xproc,             &
                                yproc,             &
                                max_stencil_depth, &
                                this%local_rank,   &
                                this%total_ranks )

    ! Put two different local meshes in the collection
    call local_mesh%initialise( global_mesh_ptr, partition )
    local_mesh_id = &
                local_mesh_collection%add_new_local_mesh(local_mesh)

    call unit_test_local_mesh%initialise( )
    unit_test_local_mesh_id = &
                local_mesh_collection%add_new_local_mesh(unit_test_local_mesh)

    ! Check that the ids of the two different local meshes added to the
    ! collection are different
    @assertTrue( local_mesh_id /= unit_test_local_mesh_id )

    ! Extract the same local mesh from the collection by its id and by its name
    local_mesh_ptr1 => local_mesh_collection%get_local_mesh( local_mesh_id )
    local_mesh_ptr2 => local_mesh_collection%get_local_mesh( mesh_name )

    ! Make sure the same mesh was extracted by both methods
    @assertAssociated( local_mesh_ptr1, local_mesh_ptr2 )

  end subroutine test_all

end module local_mesh_collection_mod_test
