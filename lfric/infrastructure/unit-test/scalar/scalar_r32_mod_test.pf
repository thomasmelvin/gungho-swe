!-----------------------------------------------------------------------------
! (C) Crown copyright 2022 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!-----------------------------------------------------------------------------

!> Test the scalar object
!>
!-------------------------------------------------------------------------------
module scalar_r32_mod_test

  use, intrinsic :: iso_fortran_env, only : real32
  use mpi_mod, only : store_comm
  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(MPITestCase), public :: scalar_r32_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type scalar_r32_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(scalar_r32_test_type), intent(inout) :: this

    !Store the MPI communicator for later use
    call store_comm(this%getMpiCommunicator())

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(scalar_r32_test_type), intent(inout) :: this

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test( npes=[1] )
  subroutine test_all( this )

    use scalar_r32_mod, only: scalar_r32_type

    implicit none

    class(scalar_r32_test_type), intent(inout) :: this

    type(scalar_r32_type)          :: s1

    real(real32) :: s1_val
    real(real32) :: sum, min, max

    s1_val = 23.0_real32

    s1%value = s1_val

    ! Check the scalar type has been correctly constructed and that
    ! we have access to the data
    @assertEqual( s1_val, s1%value, 1.0e-2_real32 )

    ! Test the global reductions
    ! - a bit trivial until we have parallel tests
    sum = s1%get_sum()
    @assertEqual( s1_val, sum, 1.0e-2_real32 )

    min = s1%get_min()
    @assertEqual( s1_val, min, 1.0e-2_real32 )

    max = s1%get_max()
    @assertEqual( s1_val, max, 1.0e-2_real32 )


  end subroutine test_all

end module scalar_r32_mod_test
