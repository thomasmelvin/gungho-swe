!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the field representation
!>
!-------------------------------------------------------------------------------
module field_vector_mod_test

  use constants_mod,                  only : i_def, r_def
  use halo_routing_collection_mod,    only : halo_routing_collection_type, &
                                             halo_routing_collection
  use function_space_collection_mod,  only : function_space_collection_type, &
                                             function_space_collection
  use halo_comms_mod,                 only : initialise_halo_comms, &
                                             finalise_halo_comms
  use local_mesh_mod,                 only : local_mesh_type
  use mesh_collection_mod,            only : mesh_collection_type, &
                                             mesh_collection
  use fs_continuity_mod,              only : W0, W2, W3
  use mpi_mod,                        only : store_comm, clear_comm
  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(MPITestCase), public :: field_vector_test_type
    private
    type(function_space_collection_type) :: fs_list
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
 end type field_vector_test_type

  integer(i_def), parameter :: element_order = 0

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(field_vector_test_type), intent(inout) :: this

    !Store the MPI communicator for later use
    call store_comm(this%getMpiCommunicator())

    ! Initialise halo functionality
    call initialise_halo_comms( this%getMpiCommunicator() )

    ! Create top level mesh collection
    mesh_collection = mesh_collection_type()
    ! Create top level function space collection
    function_space_collection = function_space_collection_type()
    ! Create top level halo_routing collection
    halo_routing_collection = halo_routing_collection_type()

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(field_vector_test_type), intent(inout) :: this

    call mesh_collection%clear()
    call function_space_collection%clear()
    call halo_routing_collection%clear()

    ! Finalise halo functionality
    call finalise_halo_comms()
    ! Clear the stored MPI communicator
    call clear_comm()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test( npes=[1] )
  subroutine test_all( this )

    use field_mod,             only: field_type, field_proxy_type
    use field_vector_mod,      only: field_vector_type
    use mesh_mod,              only: mesh_type, PLANE_BI_PERIODIC
    use function_space_mod,    only: function_space_type

    implicit none

    class(field_vector_test_type), intent(inout) :: this

    type(field_vector_type) :: fv1, fv2, fv3
    type(field_type)          :: f1, f2, f3
    type(field_proxy_type)    :: f1_p, f2_p, f3_p

    type(local_mesh_type), target  :: unit_test_local_mesh
    type(local_mesh_type), pointer :: unit_test_local_mesh_ptr

    type(mesh_type)           :: unit_test_mesh

    integer(i_def)            :: mesh_id

    type(function_space_type), pointer :: w2_fs    => null()
    type(mesh_type),           pointer :: mesh_out => null()
    type(mesh_type),           pointer :: mesh_ptr => null()

    integer(i_def) :: err
    integer :: i, undf
    real(r_def) :: sum1, min1, max1, sum2, min2, max2, scalar
    real(r_def) :: test, answer

    call unit_test_local_mesh%initialise()
    unit_test_local_mesh_ptr => unit_test_local_mesh

    ! Dummy mesh mod has 9 cells, 3 layers and is uniform in vertical
    unit_test_mesh = mesh_type( PLANE_BI_PERIODIC, unit_test_local_mesh_ptr )
    mesh_id = mesh_collection%add_new_mesh( unit_test_mesh )
    mesh_ptr => mesh_collection%get_mesh( mesh_id )

    ! Make a field with a function space
    w2_fs => function_space_collection%get_fs( mesh_ptr, element_order, W2 )
    call f1%initialise( vector_space = w2_fs )

    fv1 = field_vector_type(3_i_def)

    ! get the proxy
    f1_p = f1%get_proxy()

    !Initialise field data
    undf = f1_p%vspace%get_undf()
    do i=1, undf
      f1_p%data(i)=real(i)
    end do
    sum1 = f1_p%get_sum()
    min1 = f1_p%get_min()
    max1 = f1_p%get_max()

    call fv1%import_field(f1,2)
    call fv1%export_field(f2,2)

    f2_p = f2%get_proxy()

    sum2 = f2_p%get_sum()
    min2 = f2_p%get_min()
    max2 = f2_p%get_max()

    @assertEqual( sum1, sum2, 1.0e-2_r_def )
    @assertEqual( min1, min2, 1.0e-2_r_def )
    @assertEqual( max1, max2, 1.0e-2_r_def )

      ! Test for set_scalar
    call f1%initialise( vector_space = &
         function_space_collection%get_fs(mesh_ptr, element_order, W0))
    call f3%initialise(vector_space = &
         function_space_collection%get_fs(mesh_ptr, element_order, W3))
    call fv1%import_field(f1,1)
    call fv1%import_field(f3,3)

    scalar = 1.23456789_r_def
    call fv1%set_scalar(scalar)
    call fv1%export_field(f3,3)

    f3_p = f3%get_proxy()
    undf = f3_p%vspace%get_undf()
    sum1 = undf*scalar
    sum2 = f3_p%get_sum()
    @assertEqual( sum1, sum2, 1.0e-2_r_def )

    ! Test for axpy
    scalar=1.0_r_def
    fv2 = field_vector_type(3)

    call fv2%import_field(f1,1)
    call fv2%import_field(f2,2)
    call fv2%import_field(f3,3)

    call fv2%set_scalar(scalar)
    scalar=2.0_r_def
    call fv2%axpy(scalar,fv1)
    call fv2%export_field(f2,2)
    f2_p = f2%get_proxy()
    f1_p = f1%get_proxy()
    max2 = f2_p%get_max()
    scalar = 1.23456789_r_def
    max1 = scalar * 2.0_r_def + 1.0_r_def
    @assertEqual( max1, max2, 1.0e-2_r_def )

     ! test for Norm
    test = fv2%norm()
    answer = sqrt( max1*max1*f1_p%vspace%get_undf()  &
         + max1*max1*f2_p%vspace%get_undf()        &
         + max1*max1*f3_p%vspace%get_undf() )
    @assertEqual( test, answer, 1.0e-2_r_def )

    !Test for dot
    scalar=2.0_r_def
    call fv1%set_scalar(scalar)
    scalar=2.5_r_def
    call fv2%set_scalar(scalar)
    test = fv1%dot(fv2)
    answer = (2.5_r_def*2.0_r_def) * ( &
         f1_p%vspace%get_undf() +    &
         f2_p%vspace%get_undf() +    &
         f3_p%vspace%get_undf())
    @assertEqual( test, answer, 1.0e-2_r_def )

    ! check the norm and the sqrt of dot on itself agree
    test = fv1%norm()
    answer = sqrt(fv1%dot(fv1))
    @assertEqual( test, answer, 1.0e-2_r_def )

    ! test for aypx
    ! fv1 is still 2.0 and fv2 is 2.5
    scalar = 2.0
    call fv1%aypx(scalar, fv2)
    ! fv1 = 2.0*2.0 + 2.5 = 6.5
    test = fv1%norm()
    scalar = 6.5_r_def**2
    answer = sqrt( scalar * (f1_p%vspace%get_undf() +  &
         f2_p%vspace%get_undf() +   &
         f3_p%vspace%get_undf()) )
    @assertEqual( test, answer, 1.0e-2_r_def )

    ! check scale works
    scalar = 1.0_r_def/6.5_r_def
    call fv1%scale(scalar)
    test = fv1%norm()
    answer = sqrt( real( (f1_p%vspace%get_undf() +  &
               f2_p%vspace%get_undf() +   &
               f3_p%vspace%get_undf()), kind=r_def) )
    @assertEqual( test, answer, 1.0e-2_r_def )

    ! check the copy constructor works
    fv3 = fv2
    test = fv2%norm()
    answer = fv3%norm()
    @assertEqual( test, answer, 1.0e-2_r_def )
    ! and overwrites
    fv2 = fv1
    test = fv1%norm()
    answer = fv2%norm()
    @assertEqual( test, answer, 1.0e-2_r_def )


  end subroutine test_all

end module field_vector_mod_test

