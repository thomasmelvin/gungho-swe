!-----------------------------------------------------------------------------
! (C) Crown copyright 2019 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> Test the halo_routing representation
!>
!-------------------------------------------------------------------------------
module halo_routing_collection_mod_test

  use constants_mod,                  only : i_def, r_def, real_type
  use halo_comms_mod,                 only : halo_routing_type, &
                                             initialise_halo_comms, &
                                             finalise_halo_comms
  use halo_routing_collection_mod,    only : halo_routing_collection_type, &
                                             halo_routing_collection
  use fs_continuity_mod,              only : W2, W3
  use function_space_collection_mod,  only : function_space_collection_type, &
                                             function_space_collection
  use local_mesh_mod,                 only : local_mesh_type
  use mesh_collection_mod,            only : mesh_collection_type, &
                                             mesh_collection
  use mesh_mod,                       only : mesh_type, PLANE_BI_PERIODIC
  use mpi_mod,                        only : store_comm, clear_comm
  use pFUnit_Mod

  implicit none

  private
  public :: test_halo_routing_collection

  @TestCase
  type, extends(MPITestCase), public :: halo_routing_collection_test_type
    private
    type(local_mesh_type) :: unit_test_local_mesh
    integer(i_def) :: mesh_id
  contains
    procedure setUp
    procedure tearDown
    procedure get_local_mesh_ptr
    procedure test_halo_routing_collection
  end type halo_routing_collection_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(halo_routing_collection_test_type), intent(inout) :: this

    type(local_mesh_type), pointer :: unit_test_local_mesh_ptr
    type(mesh_type) :: unit_test_mesh

    !Store the MPI communicator for later use
    call store_comm(this%getMpiCommunicator())

    ! Initialise halo functionality
    call initialise_halo_comms( this%getMpiCommunicator() )

    ! Create top level mesh collection
    mesh_collection = mesh_collection_type()
    ! Create top level function space collection
    function_space_collection = function_space_collection_type()

    call this%unit_test_local_mesh%initialise()
    unit_test_local_mesh_ptr => this%get_local_mesh_ptr()

    ! Dummy mesh mod has 9 cells, 3 layers and is uniform in vertical
    unit_test_mesh = mesh_type( PLANE_BI_PERIODIC, unit_test_local_mesh_ptr )
    this%mesh_id = mesh_collection%add_new_mesh( unit_test_mesh )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(halo_routing_collection_test_type), intent(inout) :: this

    call function_space_collection%clear()
    call mesh_collection%clear()

    ! Finalise halo functionality
    call finalise_halo_comms()
    ! Clear the stored MPI communicator
    call clear_comm()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  function get_local_mesh_ptr(this) result(unit_test_local_mesh_ptr)
    implicit none
    class(halo_routing_collection_test_type), intent(inout), target :: this
    type(local_mesh_type), pointer :: unit_test_local_mesh_ptr
    unit_test_local_mesh_ptr => this%unit_test_local_mesh
  end function get_local_mesh_ptr

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  @Test( npes=[1] )
  subroutine test_halo_routing_collection( this )

    implicit none

    class(halo_routing_collection_test_type), intent(inout) :: this

    type(halo_routing_type), pointer :: halo_routing1, halo_routing2, &
                                        halo_routing3, halo_routing4

    type(mesh_type), pointer :: mesh => null()

    halo_routing_collection = halo_routing_collection_type()



    ! Check that:
    ! 1. Asking for two different halo_routing objects returns two different
    !    pointers.
    ! 2, Asking for the same halo_routing twice returns the same pointer twice.
    ! 3. Asking for two halo_routing objects that differ only in the size
    !    of their multi-data dimension returns two different pointers.

    mesh => mesh_collection%get_mesh(this%mesh_id)

    halo_routing1 => halo_routing_collection%get_halo_routing(mesh, &
                                                              0, &
                                                              W3,&
                                                              1, &
                                                              real_type, &
                                                              r_def)
    halo_routing2 => halo_routing_collection%get_halo_routing(mesh, &
                                                              1, &
                                                              W2,&
                                                              1, &
                                                              real_type, &
                                                              r_def)
    halo_routing3 => halo_routing_collection%get_halo_routing(mesh, &
                                                              0, &
                                                              W3,&
                                                              1, &
                                                              real_type, &
                                                              r_def)
    halo_routing4 => halo_routing_collection%get_halo_routing(mesh, &
                                                              0, &
                                                              W3,&
                                                              5, &
                                                              real_type, &
                                                              r_def)
    @assertFalse(associated(halo_routing1, halo_routing2))
    @assertTrue(associated(halo_routing1, halo_routing3))
    @assertFalse(associated(halo_routing1, halo_routing4))

    mesh => null()

    call halo_routing_collection%clear()

  end subroutine test_halo_routing_collection

end module halo_routing_collection_mod_test
