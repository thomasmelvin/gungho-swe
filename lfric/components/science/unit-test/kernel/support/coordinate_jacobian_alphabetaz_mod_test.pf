!-----------------------------------------------------------------------------
! (c) Crown copyright 2020 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!
!-------------------------------------------------------------------------------
module coordinate_jacobian_alphabetaz_mod_test

  use pFUnit_Mod
  use constants_mod, only : r_def, i_def

  implicit none

  public :: jacobian_alphabetaz_test_type, test_all

  @TestCase
  type, extends(TestCase) :: jacobian_alphabetaz_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type jacobian_alphabetaz_test_type

  real(r_def), parameter :: radius   = 1000_r_def
  real(r_def), parameter :: scaling  = 1.0_r_def

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use finite_element_config_mod, only : cellshape_quadrilateral, &
                                          coord_system_alphabetaz
    use feign_config_mod,          only : feign_finite_element_config, &
                                          feign_planet_config

    implicit none

    class(jacobian_alphabetaz_test_type), intent(inout) :: this

    call feign_finite_element_config(              &
             cellshape=cellshape_quadrilateral,    &
             coord_order=0_i_def,                  &
             coord_system=coord_system_alphabetaz, &
             element_order=0_i_def,                &
             rehabilitate=.true. )

    call feign_planet_config( radius=radius, scaling_factor=scaling )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use configuration_mod,        only: final_configuration

    implicit none

    class(jacobian_alphabetaz_test_type), intent(inout) :: this

    call final_configuration()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use, intrinsic :: iso_fortran_env, only: real64
    use coordinate_jacobian_mod, only : coordinate_jacobian,                   &
                                        coordinate_jacobian_inverse,           &
                                        pointwise_coordinate_jacobian,         &
                                        pointwise_coordinate_jacobian_inverse

    implicit none

    class(jacobian_alphabetaz_test_type), intent(inout) :: this

    real(kind=r_def), parameter :: tol = 1.0e-14_r_def  ! r_def 64bit
    real(kind=r_def)            :: use_tol, answer_dj

    integer :: ndf = 8
    integer :: ngp = 1
    integer :: ipanel = 1
    integer :: df, i, j

    real(kind=r_def) :: alpha(8), beta(8), height(8), diff_basis(3,8,1,1)
    real(kind=r_def) :: basis(1,8,1,1), jac(3,3,1,1), dj(1,1)
    real(kind=r_def) :: jac_inv(3,3,1,1), identity(3,3,1,1), err, answer(3,3)
    real(kind=r_def) :: tst(3,3)

    real(kind=r_def), parameter :: a = 0.1_r_def
    real(kind=r_def), parameter :: b = 0.1_r_def
    real(kind=r_def), parameter :: h = 2.0_r_def

    ! We choose a box centred on alpha = 0, beta = 0
    alpha(:) = (/ -a, a, a, -a, -a, a, a, -a /)
    beta(:) = (/ -b, -b, b, b, -b, -b, b, b /)
    height(:) = (/ 0.0_r_def, 0.0_r_def, 0.0_r_def, 0.0_r_def, h, h, h, h /)

    ! We are only going to look at the quadrature point in the centre of the cell
    ! At alpha = 0, beta = 0, height=h/2, jac_alphabetaz2XYZ will be given by:
    ! [   0,    0,   1 ]
    ! [ r+h/2,  0,   0 ]
    ! [   0,  r+h/2, 0 ]

    ! Our cell is of dimensions (2a, 2b, h), so jac_ref2alphabetaz is:
    ! [ 2a,  0,  0 ]
    ! [ 0,  2b,  0 ]
    ! [ 0,   0,  h ]

    ! Doing jac_alphabetaz2XYZ * jac_ref2alphabetaz gives
    ! [     0           0       h ]
    ! [ 2a(r+h/2),      0       0 ]
    ! [     0,     2b(r+h/2),   0 ]
    answer(1,:) = (/ 0.0_r_def, 0.0_r_def, h /)
    answer(2,:) = (/ 2*a*(radius+h/2), 0.0_r_def, 0.0_r_def /)
    answer(3,:) = (/ 0.0_r_def, 2*b*(radius+h/2), 0.0_r_def /)
    answer_dj = 4*a*b*h*(radius+h/2)**2

    identity(1,:,1,1) = (/ 1.0_r_def, 0.0_r_def, 0.0_r_def /)
    identity(2,:,1,1) = (/ 0.0_r_def, 1.0_r_def, 0.0_r_def /)
    identity(3,:,1,1) = (/ 0.0_r_def, 0.0_r_def, 1.0_r_def /)

    diff_basis(:,:,:,:) = 0.25_r_def
    do df = 1,ndf
      if ( alpha(df) < 0.0_r_def ) diff_basis(1,df,:,:) = -0.25_r_def
      if ( beta(df) < 0.0_r_def ) diff_basis(2,df,:,:) = -0.25_r_def
      if ( height(df) < h / 2) diff_basis(3,df,:,:) = -0.25_r_def
    end do

    basis(:,:,:,:) = 0.125_r_def

    call coordinate_jacobian(ndf, ngp, ngp, alpha, beta, height, ipanel,      &
                             basis, diff_basis, jac, dj)
    call coordinate_jacobian_inverse(ngp,ngp, jac, dj, jac_inv)

    err = maxval( abs( matmul( jac_inv(:,:,1,1), jac(:,:,1,1) )               &
                  - identity(:,:,1,1) ) )
    tst = abs( matmul( jac_inv(:,:,1,1), jac(:,:,1,1) ))

    if ( r_def == real64 ) then
      use_tol = tol
    else
      use_tol = max( tol, 10.0_r_def*spacing( maxval( dj ) ) )
    end if
    @assertEqual( answer_dj, dj, use_tol*answer_dj )

    if ( r_def == real64 ) then
      use_tol = tol
    else
      use_tol = max( tol, 10.0_r_def*spacing( maxval( tst ) ) )
    end if
    @assertEqual( 0.0_r_def, err, use_tol )

    ! Test Jacobian values
    if ( r_def == real64 ) then
      use_tol = tol
    else
      use_tol = max( tol, 10.0_r_def*spacing( maxval( jac(:,:,1,1) ) ))
    end if
    do i = 1, 3
      do j = 1, 3
        ! Look at a relative error
        @assertEqual( answer(i,j), jac(i,j,1,1), use_tol*(answer(i,j)+1.0_r_def) )
      end do
    end do

    ! Test the pointwise computations
    call pointwise_coordinate_jacobian(ndf, alpha, beta, height, ipanel,      &
                                       basis(:,:,1,1), diff_basis(:,:,1,1),   &
                                       jac(:,:,1,1), dj(1,1) )
    jac_inv(:,:,1,1) =  pointwise_coordinate_jacobian_inverse(jac(:,:,1,1),   &
                                                              dj(1,1))
    err = maxval( abs( matmul( jac_inv(:,:,1,1), jac(:,:,1,1) )               &
                  - identity(:,:,1,1) ) )
    tst = abs( matmul( jac_inv(:,:,1,1), jac(:,:,1,1) ))

    if ( r_def == real64 ) then
      use_tol = tol
    else
      use_tol = max( tol, 10.0_r_def*spacing( maxval( dj ) ) )
    end if
    @assertEqual( answer_dj, dj, use_tol*answer_dj )

    if ( r_def == real64 ) then
      use_tol = tol
    else
      use_tol = max( tol, 10.0_r_def*spacing( maxval( tst ) ) )
    end if
    @assertEqual( 0.0_r_def, err, use_tol)

    ! Test Jacobian values
    if ( r_def == real64 ) then
      use_tol = tol
    else
      use_tol = max( tol, 10.0_r_def*spacing( maxval( jac(:,:,1,1) ) ))
    end if
    do i = 1, 3
      do j = 1, 3
        @assertEqual( answer(i,j), jac(i,j,1,1), use_tol*(answer(i,j)+1.0_r_def) )
      end do
    end do

  end subroutine test_all

end module coordinate_jacobian_alphabetaz_mod_test
