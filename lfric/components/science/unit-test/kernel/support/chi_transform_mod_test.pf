!-------------------------------------------------------------------------------
! (c) Crown copyright 2021 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-------------------------------------------------------------------------------
!-------------------------------------------------------------------------------
module chi_transform_mod_test

  use pFUnit_Mod
  use, intrinsic :: iso_fortran_env, only : real64
  use constants_mod,             only : r_def, i_def, i_native, PI, str_long


  implicit none

  public :: chi_transform_mod_test_type, test_all, get_chi_parameters, &
            test_chi_constructor

  @testParameter
  type, public, extends(AbstractTestParameter) :: chi_parameters_type
    integer(i_native) :: source_coord_system
    integer(i_native) :: target_coord_system
    integer(i_def)    :: panel_id
    real(r_def)       :: source_chi_1
    real(r_def)       :: source_chi_2
    real(r_def)       :: source_chi_3
    real(r_def)       :: target_chi_1
    real(r_def)       :: target_chi_2
    real(r_def)       :: target_chi_3
  contains
    procedure :: toString
  end type chi_parameters_type

  @TestCase(testParameters={get_chi_parameters()}, constructor=test_chi_constructor)
  type, extends(ParameterizedTestCase) :: chi_transform_mod_test_type
    private
    integer(i_native) :: source_coord_system
    integer(i_native) :: target_coord_system
    integer(i_def)    :: panel_id
    real(r_def)       :: source_chi_1
    real(r_def)       :: source_chi_2
    real(r_def)       :: source_chi_3
    real(r_def)       :: target_chi_1
    real(r_def)       :: target_chi_2
    real(r_def)       :: target_chi_3
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type chi_transform_mod_test_type

  ! Add my own parameters for the different coordinate system cases
  ! This is done here because it is before the feign_config is initialised
  integer(i_native), parameter :: ABH     = 1
  integer(i_native), parameter :: LLH     = 2
  integer(i_native), parameter :: XYZ     = 3
  integer(i_native), parameter :: R2XYZ   = 4

  real(r_def), parameter :: planet_radius = 14_r_def
  real(r_def), parameter :: scaling       = 1.0_r_def

contains

  function test_chi_constructor( test_parameter ) result ( new_test )

    implicit none

    type(chi_parameters_type), intent(in) :: test_parameter
    type(chi_transform_mod_test_type)   :: new_test

    new_test%source_coord_system = test_parameter%source_coord_system
    new_test%target_coord_system = test_parameter%target_coord_system
    new_test%panel_id = test_parameter%panel_id
    new_test%source_chi_1 = test_parameter%source_chi_1
    new_test%source_chi_2 = test_parameter%source_chi_2
    new_test%source_chi_3 = test_parameter%source_chi_3
    new_test%target_chi_1 = test_parameter%target_chi_1
    new_test%target_chi_2 = test_parameter%target_chi_2
    new_test%target_chi_3 = test_parameter%target_chi_3

  end function test_chi_constructor

  function toString( this ) result( output_string )

    implicit none

    class( chi_parameters_type ), intent( in ) :: this
    character(:), allocatable :: output_string

    character(str_long) :: source_string, target_string

    select case ( this%source_coord_system )
    case ( XYZ )
      write( source_string, '(A)') 'XYZ'
    case ( LLH )
      write( source_string, '(A)') 'LLH'
    case ( ABH )
      write( source_string, '(A)') 'ABH'
    end select

    select case ( this%target_coord_system )
    case ( XYZ )
      write( target_string, '(A)') 'XYZ'
    case ( LLH )
      write( target_string, '(A)') 'LLH'
    case ( ABH )
      write( target_string, '(A)') 'ABH'
    case ( R2XYZ )
      write( target_string, '(A)') 'R2XYZ'
    end select

    output_string = trim( source_string // '2' // target_string )

  end function toString

  function get_chi_parameters() result ( chi_parameters )

    implicit none

    type(chi_parameters_type) :: chi_parameters(12)

    integer(i_def) :: panel_id
    real(r_def)    :: radius, height
    real(r_def)    :: alpha, beta
    real(r_def)    :: X, Y, Z
    real(r_def)    :: lon, lat
    real(r_def)    :: varrho

    ! Consider a particular point on the sphere
    ! Give the coordinates for this point in each coordinate system
    ! Try to choose non-trivial analytic values
    panel_id = 2
    height   = 5.0_r_def
    radius   = planet_radius + height

    ! Start with special choices of alpha and beta
    alpha    = PI / 6.0_r_def
    beta     = - PI / 12.0_r_def

    ! varrho is sqrt(1 + tan(alpha)**2 + tan(beta)**2)
    ! For our alpha and beta, tan(alpha) = sqrt(3)/3 and tan(beta) = 2 - sqrt(3)
    varrho = sqrt(25.0_r_def / 3.0_r_def - 4.0_r_def * sqrt(3.0_r_def))

    ! for panel 2, x=-r*tan(alpha)/varrho, y=r/varrho, z=r*tan(beta)/varrho
    X = -19.0_r_def*sqrt(3.0_r_def) / 3.0_r_def / varrho
    Y = 19.0_r_def / varrho
    Z = -19.0_r_def*(2.0_r_def - sqrt(3.0_r_def)) / varrho

    ! for panel 2, lon=pi/2 + alpha, lat=atan(tan(beta)/sqrt(1+tan(alpha)**2)))
    lon = 2.0_r_def * PI / 3.0_r_def
    lat = -atan(sqrt(3.0_r_def) * (2.0_r_def - sqrt(3.0_r_def)) / 2.0_r_def)

    ! The arguments below are the parameters defined in chi_parameters_type

    chi_parameters =  [ chi_parameters_type(ABH, ABH, panel_id,   &
                                            alpha, beta, height,  &
                                            alpha, beta, radius), &
                        chi_parameters_type(ABH, LLH, panel_id,   &
                                            alpha, beta, height,  &
                                            lon, lat, radius),    &
                        chi_parameters_type(ABH, XYZ, panel_id,   &
                                            alpha, beta, height,  &
                                            X, Y, Z),             &
                        chi_parameters_type(LLH, ABH, panel_id,   &
                                            lon, lat, height,     &
                                            alpha, beta, radius), &
                        chi_parameters_type(LLH, LLH, panel_id,   &
                                            lon, lat, height,     &
                                            lon, lat, radius),    &
                        chi_parameters_type(LLH, XYZ, panel_id,   &
                                            lon, lat, height,     &
                                            X, Y, Z),             &
                        chi_parameters_type(XYZ, ABH, panel_id,   &
                                            X, Y, Z,              &
                                            alpha, beta, radius), &
                        chi_parameters_type(XYZ, LLH, panel_id,   &
                                            X, Y, Z,              &
                                            lon, lat, radius),    &
                        chi_parameters_type(XYZ, XYZ, panel_id,   &
                                            X, Y, Z, X, Y, Z),    &
                        chi_parameters_type(ABH, R2XYZ, panel_id, &
                                            alpha, beta, radius,  &
                                            X, Y, Z),             &
                        chi_parameters_type(LLH, R2XYZ, panel_id, &
                                            lon, lat, radius,     &
                                            X, Y, Z),             &
                        chi_parameters_type(XYZ, R2XYZ, panel_id, &
                                            X, Y, Z, X, Y, Z)  ]

  end function get_chi_parameters

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use chi_transform_mod,         only : init_chi_transforms
    use finite_element_config_mod, only : cellshape_quadrilateral, &
                                          coord_system_alphabetaz, &
                                          coord_system_lonlatz,   &
                                          coord_system_xyz
    use feign_config_mod,          only : feign_finite_element_config, &
                                          feign_planet_config

    implicit none

    class(chi_transform_mod_test_type), intent(inout) :: this

    integer(i_native) :: coord_system

    select case ( this%source_coord_system )
    case ( XYZ )
      coord_system = coord_system_xyz
    case ( LLH )
      coord_system = coord_system_lonlatz
    case ( ABH )
      coord_system = coord_system_alphabetaz
    end select

    call feign_finite_element_config(           &
             cellshape=cellshape_quadrilateral, &
             element_order=0_i_def,             &
             rehabilitate=.true.,               &
             coord_order=0_i_def,               &
             coord_system=coord_system )

    call feign_planet_config( radius=planet_radius, scaling_factor=scaling )

    call init_chi_transforms()

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use chi_transform_mod,        only: final_chi_transforms
    use configuration_mod,        only: final_configuration

    implicit none

    class(chi_transform_mod_test_type), intent(inout) :: this

    call final_configuration()
    call final_chi_transforms()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use chi_transform_mod,         only : chi2abr, chi2llr, chi2xyz, chir2xyz
    use finite_element_config_mod, only : coord_system

    implicit none

    class(chi_transform_mod_test_type), intent(inout) :: this

    real(kind=r_def) :: tol, new_coord_1, new_coord_2, new_coord_3

    select case ( this%target_coord_system )
    case ( ABH )
      call chi2abr(this%source_chi_1, this%source_chi_2, this%source_chi_3, &
                   this%panel_id, new_coord_1, new_coord_2, new_coord_3  )
    case ( LLH )
      call chi2llr(this%source_chi_1, this%source_chi_2, this%source_chi_3, &
                   this%panel_id, new_coord_1, new_coord_2, new_coord_3  )
    case ( XYZ )
      call chi2xyz(this%source_chi_1, this%source_chi_2, this%source_chi_3, &
                   this%panel_id, new_coord_1, new_coord_2, new_coord_3  )
    case ( R2XYZ )
      call chir2xyz(this%source_chi_1, this%source_chi_2, this%source_chi_3, &
                    this%panel_id, new_coord_1, new_coord_2, new_coord_3  )
    end select

    ! Check if answers are correct
    if ( r_def == real64 ) then
       tol = 1e-12
       @assertEqual( this%target_chi_1, new_coord_1, tol )
       @assertEqual( this%target_chi_2, new_coord_2, tol )
       @assertEqual( this%target_chi_3, new_coord_3, tol )
    else
       tol = 10.0_r_def*spacing( new_coord_1 )
       @assertEqual( this%target_chi_1, new_coord_1, tol )
       tol = 10.0_r_def*spacing( new_coord_2 )
       @assertEqual( this%target_chi_2, new_coord_2, tol )
       tol = 10.0_r_def*spacing( new_coord_3 )
       @assertEqual( this%target_chi_3, new_coord_3, tol )
    end if

  end subroutine test_all

end module chi_transform_mod_test
