#!jinja2

%include inc/targets.rc
%include inc/common_macros.rc
%include inc/suite_macros.rc
%include suite_control.rc

{# SETUP SOME JINJA2 VARIABLES #}
{%- set build_profiles = ['fast-debug', 'full-debug', 'production'] -%}
{%- set rose_suite_gui_headers = [] -%}
{%- set rdef_build_precisions = []  -%}

{%- if RUN_NAMES is defined %}
{%-   if RUN_NAMES is string %}
{%-     set groupsToRun = [RUN_NAMES] %}
{%-     set publishGroup = RUN_NAMES %}
{%-   else %}
{%-     set groupsToRun = RUN_NAMES %}
{%-     set publishGroup = RUN_NAMES|join(",") %}
{%-   endif %}
{%- else %}
{%-   set groupsToRun = ['developer'] %}
{%-   set publishGroup = 'developer' %}
{%- endif %}

{%- if miniappFlag == True %}
{%-   set appPathFragment = 'miniapps/' %}
{%- else  %}
{%-   set appPathFragment = '' %}
{%- endif %}

{%- if MIRROR_UPLOAD_URL and MIRROR_UPLOAD_URL|list|last != '/' %}
{%-   set MIRROR_UPLOAD_URL = MIRROR_UPLOAD_URL + '/' %}
{%- endif %}

[cylc]
  UTC mode = True
  [[events]]
    mail events = timeout
    abort on timeout = True
{%- if 'nightly' in groupsToRun %}
    abort on stalled = True
{%- endif %}
    timeout = PT3H

[scheduling]
  cycling mode        = integer
  initial cycle point = 1
  final cycle point   = 1
  max active cycle points = {{MAXRUNAHEAD}}

  [[queues]]
    [[[host_throttle]]]
      limit = {{SUITE_THROTTLE}}
      members = root
  [[dependencies]]
{%- set scheduledTasks = schedule() | deduplicate_schedule()%}
{{scheduledTasks}}

[runtime]
  [[root]]
    init-script = """
                  export CYLC_VERSION={{CYLC_VERSION}}
                  export ROSE_VERSION={{ROSE_VERSION}}
                  """
    script = "rose task-run"
    [[[events]]]
{%- if TROUBLE_MAIL_ADDRESS is defined %}
      mail to = {{TROUBLE_MAIL_ADDRESS}}
      mail events = submission timeout, submission failed, timeout, failed, execution timeout
{%- endif %}
      submission timeout = PT12H
      execution timeout  =  PT3H
    [[[environment]]]
      SOURCE_ROOT = $CYLC_SUITE_SHARE_DIR/source
      OUTPUT_ROOT = $CYLC_SUITE_SHARE_DIR/output
      PYTHONPATH  = $CYLC_SUITE_RUN_DIR/lib/python
      PATH        = $PATH:$PYTHONPATH/bin

{# Set up Families for platform properties.                #}
{# These would be platforms specific to a site, i.e. meto  #}
{# Could be brought in from include file specific to site. #}
    [[METO-SPICE]]
        [[[environment]]]
            OMP_NUM_THREADS = 1
            HYPERTHREADS    = 1
            CORES_PER_NODE  = 1
            NUMA_REGIONS_PER_NODE = 0

    [[METO-XC]]
        [[[environment]]]
            HYPERTHREADS    = 1
            CORES_PER_NODE  = 36
            NUMA_REGIONS_PER_NODE = 2

    [[METO-XC40]]
        inherit = METO-XC

    [[METO-XCS]]
        inherit = METO-XC

    [[MONSOON-XC40]]
        inherit = METO-XC

  [[LOCAL]]
    [[[remote]]]
      host = {{ ROSE_ORIG_HOST }}
    [[[job]]]
      batch system = background

  [[TARGET]]
    inherit = {{PRIMARY_TARGET['platform'] | upper}}
    [[[remote]]]
      host = {{ get_target_property(PRIMARY_TARGET, 'hostname') }}
    [[[job]]]
      batch system = {{ get_target_property(PRIMARY_TARGET, 'batcher') }}
    [[[environment]]]
      SOURCE_DIRECTORY = $SOURCE_ROOT/components/{{projectName}}

  [[TECHNICAL]]
    [[[remote]]]
      host = {{get_target_property(SECONDARY_TARGET, 'hostname')}}
    [[[job]]]
      batch system = {{get_target_property(SECONDARY_TARGET, 'batcher')}}
    [[[environment]]]
      SOURCE_DIRECTORY      = $SOURCE_ROOT/components/{{projectName}}
      DESTINATION_DIRECTORY = $OUTPUT_ROOT/{{SECONDARY_TARGET['compiler']}}_fast-debug
      WORKING_DIR           = {{get_target_property(SECONDARY_TARGET, 'build_root')}}/{{SECONDARY_TARGET['compiler']}}_fast-debug
{{ directives(SECONDARY_TARGET, 'tech') }}

##############################################################################
{# PRELIMINARIES #}

{%- if 'preliminaries' not in rose_suite_gui_headers %}
{%-   do rose_suite_gui_headers.append('preliminaries') %}
    [[PRELIMINARIES]]
{%- endif %}


{%- if 'export_source' in scheduledTasks %}
  # Extraction has to be run locally since we may be running from an edited
  # working copy. Otherwise nothing else should.
  #
  [[export_source]]
    inherit = PRELIMINARIES, LOCAL
    script  = """
              mkdir -p `dirname $SOURCE_ROOT`
              svn export --force {{SOURCE_LFRIC}} $SOURCE_ROOT

              HOST={{ get_target_property(PRIMARY_TARGET, 'hostname') }}
              RELATIVE_SOURCE_DIRECTORY=`echo $SOURCE_DIRECTORY | sed "s|$HOME/||"`
              ssh $HOST mkdir -p $RELATIVE_SOURCE_DIRECTORY
              rsync -avz $SOURCE_DIRECTORY/ $HOST:$RELATIVE_SOURCE_DIRECTORY/
              sleep 5
              """
    [[[environment]]]
      SOURCE_DIRECTORY = $SOURCE_ROOT
{%- endif %}

##############################################################################

{%- set publish_destination = '$CYLC_SUITE_SHARE_DIR/publish-' + projectName + '-' + publishGroup + '-' + PRIMARY_TARGET['platform'] %}
  # Publication tasks are concerned with producing a web site of results.
  # This will be created on the "technical" host.
  #
  [[PUBLISH]]
    inherit = TECHNICAL
    [[[environment]]]
      DESTINATION = {{publish_destination}}


{%- if 'publish_nothing' in scheduledTasks %}
  # This task exists purely to ensure that the PUBLISH family has something in it.
  [[publish_nothing]]
    inherit = PUBLISH
    script = true
{%- endif %}


{%- if 'publish_index' in scheduledTasks %}
  [[publish_index]]
    inherit = PUBLISH
    script = mkdir -p $DESTINATION; rose task-run --app-key=publish --command-key=index
    [[[environment]]]
{%-   if ROSE_BUSH_URL %}
      ROSE_BUSH_ARG = -bush {{ROSE_BUSH_URL}}
{%-   endif %}
{%- endif %}


{%- if 'mirror_results_local' in scheduledTasks %}
  [[mirror_results_local]]
    inherit = PUBLISH, LOCAL

    {{scripting(
          SECONDARY_TARGET,
          ['base', 'tech'],
          ['base'],
          script='rose task-run --app-key=publish_mirror',
      )}}

    [[[environment]]]
      REWRITE = ''
      SOURCE  = {{publish_destination}}
      TARGET  = file://$HOME/public_html/lfric-{{projectName}}-{{PRIMARY_TARGET['platform']}}-{{publishGroup}}
{%- endif %}


{%- if 'mirror_results_remote' in scheduledTasks %}
  [[mirror_results_remote]]
    inherit = PUBLISH

    {{scripting(
          SECONDARY_TARGET,
          ['base', 'tech'],
          ['base'],
          script='rose task-run --app-key=publish_mirror'
      )}}

    [[[environment]]]
      REWRITE = {{MIRROR_REWRITE}}
      SOURCE  = {{publish_destination}}
      TARGET  = {{MIRROR_UPLOAD_URL}}lfric-{{projectName}}-{{PRIMARY_TARGET['platform']}}-{{publishGroup}}
{%- endif %}

{{publish_node_task('PUBLISH')}}

##############################################################################
{#- DOCUMENTATION                                                            #}

{%- if 'documentation' not in rose_suite_gui_headers %}
{%-   do rose_suite_gui_headers.append('documentation') %}
    [[DOCUMENTATION]]
      inherit = TECHNICAL
{%- endif %}

{{ api_documentation_task('DOCUMENTATION', SECONDARY_TARGET, 'PUBLISH', SECONDARY_TARGET) }}
{{ uml_documentation_task('DOCUMENTATION', SECONDARY_TARGET, 'PUBLISH', SECONDARY_TARGET) }}
{{ design_documentation_task('DOCUMENTATION', SECONDARY_TARGET, 'PUBLISH', SECONDARY_TARGET) }}

#############################################################################
# TECHNICAL

{{ check_style_task('TECHNICAL', SECONDARY_TARGET) }}

{%- if 'unit_test_build_tools' in scheduledTasks %}
    # The build tools have to be unit tested on the build target. Not much
    # point proving they work on some other machine.
    #
    [[unit_test_build_tools]]
      inherit = TARGET  # Should be BUILD target

      {{scripting(
            PRIMARY_TARGET,
            ['base', 'compiler'],
            ['base'],
            script='rose task-run --app-key=unit_test_build_tools'
        )}}

      {{ directives(PRIMARY_TARGET, 'build') }}
{%- endif %}

##############################################################################

{%- for compiler in get_target_property(PRIMARY_TARGET,
                                        'setup')['compiler'].keys() -%}
{%-   for precision in rdef_build_precisions %}
{%-     set compiler_label = compiler | lower + '_' + precision %}
{%-     set compiler_family = compiler_label | upper %}
  [[{{compiler_family}}]]
    [[[environment]]]
      SOURCE_DIRECTORY      = $SOURCE_ROOT/components/{{projectName}}
      DESTINATION_DIRECTORY = $OUTPUT_ROOT/{{compiler_label}}
      BIN_DIR               = $OUTPUT_ROOT/{{compiler_label}}/bin
      COMPILER              = {{compiler}}
      {#- We can't define WORKING_DIR here as it may contain    #}
      {#- target specific variables not existing on the local machine #}

  [[TEST_WITH_{{compiler_family}}]]
    inherit = {{compiler_family}}, TARGET

{{      unit_test_tasks('TEST_WITH_'+compiler_family, PRIMARY_TARGET, compiler, precision) }}

{%-     for build in build_profiles %}
{%-       set label = compiler_label + '-bit_' + build | lower %}
{%-       set family = label | upper %}

{%-       if 'export_source' in scheduledTasks %}
{%-         if family not in rose_suite_gui_headers %}
{%-           do rose_suite_gui_headers.append(family) %}
  [[{{family}}]]
    inherit = {{compiler_family}}

    [[[environment]]]
      DESTINATION_DIRECTORY = $OUTPUT_ROOT/{{label}}
{%-         endif %}
{%-       endif %}

{%-     endfor %}  {# build #}
{%-   endfor %}  {# rdef_precision #}
{%- endfor %}  {# compiler #}

##############################################################################
# NULL TASKS
##############################################################################
{{null_tasks()}}
