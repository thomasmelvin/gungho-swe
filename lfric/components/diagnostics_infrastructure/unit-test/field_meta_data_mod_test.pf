!-----------------------------------------------------------------------------
! (c) Crown copyright 2020 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> Check the example meta_mod file are valid fortran and call meta_mod properly
!>
!-------------------------------------------------------------------------------
module field_meta_data_mod_test

  ! Global use statements go here

  use constants_mod, only : str_short, r_def, real_type

  use pFUnit_Mod

  implicit none

  private
  public :: field_meta_data_type_test

  ! The test case type, containing procedures to setup, run
  ! and clean up after a test.
  ! It can also contain data.

  @TestCase
  type, extends(TestCase), public :: field_meta_data_type_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure field_meta_data_type_test
  end type field_meta_data_type_test_type


contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !> The setUp subroutine is optional and is called prior to running the test.
  !> It is used to create and initialise types / data that are used in
  !> the tests
  subroutine setUp(this)

    implicit none

    class(field_meta_data_type_test_type), intent(inout) :: this

    ! This section should create and initialise anything needed for the test

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !> The tearDown subroutine is optional and called after the test.
  !> It is used to destroy any types / data previously created by setUp()
  subroutine tearDown(this)

    implicit none

    class(field_meta_data_type_test_type), intent(inout) :: this

    ! This section should destroy any previously created types / data

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! pfUnit will run each subroutine preceded by the @test line
  @test
  subroutine field_meta_data_type_test(this)

    ! This section is where the code for a self-contained test should be put

    use diagnostics_mod,                only: field_meta_data_type
    use non_spatial_dimension_mod,      only: non_spatial_dimension_type, &
                                              NUMERICAL, &
                                              CATEGORICAL
    use vertical_dimensions_mod,        only: model_height_dimension, &
                                              fixed_height_dimension
    use misc_meta_data_mod,             only: misc_meta_data_type
    use fs_continuity_mod,              only: W2, Wtheta
    use time_step_enum_mod,             only: TEST_TIMESTEP_1, TEST_TIMESTEP_2
    use interpolation_enum_mod,         only: TEST_BILINEAR, TEST_TRILINEAR
    use levels_enum_mod,                only: TOP_ATMOSPHERIC_LEVEL, &
                                              BOTTOM_ATMOSPHERIC_LEVEL
    use positive_enum_mod,              only: POSITIVE_UP, POSITIVE_DOWN

    implicit none

    class(field_meta_data_type_test_type), intent(inout) :: this

    !> Create field_meta_data_types
    type(field_meta_data_type) :: field1
    type(field_meta_data_type) :: field2

    !> Instantiate example objects
    field1 = field_meta_data_type(&
      unique_id = "example_fields__example_field_1", &
      units = "m s-1", &
      function_space = W2, &
      order = 0, &
      io_driver = "", &
      trigger = "__checksum: true;", &
      description = "u component of wind on u pts on native c grid.", &
      data_type = REAL_TYPE, &
      time_step = TEST_TIMESTEP_1, &
      recommended_interpolation = TEST_BILINEAR, &
      packing = 0, &
      vertical_dimension = model_height_dimension(TOP_ATMOSPHERIC_LEVEL, &
                                                  BOTTOM_ATMOSPHERIC_LEVEL), &
      non_spatial_dimension = [non_spatial_dimension_type( &
              dimension_name = "test_axis_non_spatial_dimension", &
              dimension_category = NUMERICAL, &
              help_text = "Test axis help text", &
              axis_definition = [real(r_def) :: 1,2,3,4,5,6,7,8,9], &
              non_spatial_units = "1")], &

      standard_name = "eastward_wind", &
      misc_meta_data = [misc_meta_data_type("test_name_1","test_value_1"), &
                        misc_meta_data_type("test_name_2","test_value_2"), &
                        misc_meta_data_type("test_name_3","test_value_3")])

    field2 = field_meta_data_type(&
      unique_id = "example_fields__example_field_2", &
      units = "K", &
      function_space = WTheta, &
      order = 0, &
      io_driver = "", &
      trigger = "__checksum: true;", &
      description = "1.5M TEMPERATURE OVER TILES", &
      data_type = REAL_TYPE, &
      time_step = TEST_TIMESTEP_1, &
      recommended_interpolation = TEST_TRILINEAR, &
      packing = 0, &
      vertical_dimension = fixed_height_dimension( &
              level_definition = real([1.5], r_def)), &
      non_spatial_dimension = [non_spatial_dimension_type(&
              dimension_name = "Tiles", &
              dimension_category = CATEGORICAL, &
              help_text = "Tiles help text", &
              label_definition=[character(str_short) :: 'Broadleaf Tree', &
                                                        'Needle Leaf Tree', &
                                                        'C3 Grass', &
                                                        'C4 Grass', &
                                                        'Shrub', &
                                                        'Urban', &
                                                        'Water', &
                                                        'Soil', &
                                                        'Ice'])], &
      standard_name = "air_temperature")

!    !> Testing objects
    @assertEqual("example_fields__example_field_1", field1%get_unique_id())
!
    @assertEqual("example_fields__example_field_2", field2%get_unique_id())

  end subroutine field_meta_data_type_test
end module field_meta_data_mod_test
