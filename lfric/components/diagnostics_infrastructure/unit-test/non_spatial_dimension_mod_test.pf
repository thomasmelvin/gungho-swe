!-----------------------------------------------------------------------------
! (c) Crown copyright 2020 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> Check the example meta_mod file are valid fortran and call meta_mod properly
!>
!-------------------------------------------------------------------------------
module non_spatial_dimension_mod_test

  ! Global use statements go here

  use constants_mod, only : str_def, str_short, r_def

  use pFUnit_Mod

  implicit none

  private
  public :: non_spatial_dimension_type_test

  ! The test case type, containing procedures to setup, run
  ! and clean up after a test.
  ! It can also contain data.

  @TestCase
  type, extends(TestCase), public :: non_spatial_dimension_type_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure non_spatial_dimension_type_test
  end type non_spatial_dimension_type_test_type


contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !> The setUp subroutine is optional and is called prior to running the test.
  !> It is used to create and initialise types / data that are used in
  !> the tests
  subroutine setUp(this)

    implicit none

    class(non_spatial_dimension_type_test_type), intent(inout) :: this

    ! This section should create and initialise anything needed for the test

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  !> The tearDown subroutine is optional and called after the test.
  !> It is used to destroy any types / data previously created by setUp()
  subroutine tearDown(this)

    implicit none

    class(non_spatial_dimension_type_test_type), intent(inout) :: this

    ! This section should destroy any previously created types / data

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  ! pfUnit will run each subroutine preceded by the @test line
  @test
  subroutine non_spatial_dimension_type_test(this)

    ! This section is where the code for a self-contained test should be put

    use non_spatial_dimension_mod, only: non_spatial_dimension_type, &
                                         NUMERICAL, &
                                         CATEGORICAL

    implicit none

    class(non_spatial_dimension_type_test_type), intent(inout) :: this

    !> Create non_spatial_dimension_types
    type(non_spatial_dimension_type) :: non_spatial_dimension_no_axis
    type(non_spatial_dimension_type) :: non_spatial_dimension_no_label
    type(non_spatial_dimension_type) :: non_spatial_dimension_axis
    type(non_spatial_dimension_type) :: non_spatial_dimension_label

    !> For testing the character array, assertEqual doesn't like character arrays
    character(str_def), dimension(:), allocatable :: label

    !> Instantiate example objects
    non_spatial_dimension_no_axis = non_spatial_dimension_type( &
            dimension_name = "Test_Numerical", &
            dimension_category = NUMERICAL, &
            help_text = "Test numerical help text")

    non_spatial_dimension_no_label = non_spatial_dimension_type( &
            dimension_name = "Test_Categorical", &
            dimension_category = CATEGORICAL, &
            help_text = "Test categorical help text")

    non_spatial_dimension_axis = non_spatial_dimension_type( &
            dimension_name = "Test_Axis", &
            dimension_category = NUMERICAL, &
            help_text = "Test axis help text", &
            axis_definition = [real(r_def) :: 1.0, 2.0, 3.0], &
            non_spatial_units = "1")

    non_spatial_dimension_label = non_spatial_dimension_type( &
            dimension_name="Test_Label", &
            dimension_category = CATEGORICAL, &
            help_text = "Test axis help text", &
            label_definition=[character(str_short) :: 'Alpha', &
                                                      'Bravo', &
                                                      'Charlie'])

    !> Testing objects
    @assertEqual("Test_Numerical", non_spatial_dimension_no_axis%get_dimension_name())

    @assertEqual("Test_Categorical", non_spatial_dimension_no_label%get_dimension_name())

    @assertEqual([real(r_def) :: 1.0, 2.0 ,3.0], non_spatial_dimension_axis%get_axis_definition())
    @assertEqual("Test_Axis", non_spatial_dimension_axis%get_dimension_name())

    @assertEqual("Test_Label", non_spatial_dimension_label%get_dimension_name())
    label = non_spatial_dimension_label%get_label_definition()
    @assertEqual("Alpha", label(1))
    @assertEqual("Bravo", label(2))
    @assertEqual("Charlie", label(3))

  end subroutine non_spatial_dimension_type_test
end module non_spatial_dimension_mod_test
