!-----------------------------------------------------------------------------
! (C) Crown copyright 2019 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> Test the fieldspec collection object
!>
module fieldspec_mod_test

    use constants_mod,             only : r_def, str_def, i_def
    use fieldspec_mod,             only : fieldspec_type, &
                                          non_spatial_dimension_iterator_type
    use fs_continuity_mod,         only : W3
    use field_type_enum_mod,       only : integer_type
    use io_driver_enum_mod,        only : WRITE_FIELD_FACE
    use axisspec_mod,              only : axisspec_type
    use non_spatial_dimension_mod, only : NUMERICAL, CATEGORICAL
    use pFUnit_Mod

    implicit none

    private
    public :: test_assignment, test_non_spatial_iterator

    @TestCase
    type, extends(TestCase), public :: fieldspec_test_type
        private
    contains
        procedure setUp
        procedure tearDown
        procedure test_assignment
        procedure test_non_spatial_iterator
    end type fieldspec_test_type

contains

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    subroutine setUp(this)

        implicit none

        class(fieldspec_test_type), intent(inout) :: this

    end subroutine setUp

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    subroutine tearDown(this)

        implicit none

        class(fieldspec_test_type), intent(inout) :: this

    end subroutine tearDown



    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    @test
    subroutine test_assignment(self)

        implicit none

        class(fieldspec_test_type), intent(inout) :: self
        type(fieldspec_type)                      :: test_fieldspec1
        type(axisspec_type),        target        :: vertical_axis
        type(axisspec_type),        pointer       :: vert_axis_ptr => null()
        type(axisspec_type),        pointer       :: returned_vert_axis
        type(axisspec_type), target  :: non_spatial_dimension
        type(axisspec_type), pointer :: non_spatial_ptr => null()
        type(axisspec_type), pointer :: returned_non_spatial_dim => null()
        character(str_def) :: returned_non_spatial_def(3)
        character(str_def) :: expected_non_spatial_def(3) = ['a', 'b', 'c']
        integer(i_def) :: i

        ! Initialise axis and field specs
        vertical_axis = axisspec_type( &
                "vertical_axis", &
                NUMERICAL, &
                numeric_axis_def = [real(r_def) :: 1,2,3])
        vert_axis_ptr => vertical_axis
        non_spatial_dimension = axisspec_type( &
                "non_spatial_dimension", &
                CATEGORICAL, &
                label_axis_def=[character(str_def) :: 'a','b','c'])
        non_spatial_ptr => non_spatial_dimension

        test_fieldspec1 = fieldspec_type( "foo", & ! unique_id
                                          "field_group_id", & ! field_group_id
                                          11, & ! mesh_id
                                          W3, & ! function_space
                                          2, & ! order
                                          1, & ! field_kind
                                          integer_type, & ! field_type
                                          WRITE_FIELD_FACE, & ! io_driver
                                          .true. & ! checksum &
                                        )

        ! Set dimensions
        call test_fieldspec1%set_vertical_axis(vert_axis_ptr)
        call test_fieldspec1%add_non_spatial_dimension(non_spatial_ptr)

        ! Get dimensions
        returned_vert_axis => test_fieldspec1%get_vertical_axis()
        returned_non_spatial_dim => test_fieldspec1%get_non_spatial_dimension( &
                "non_spatial_dimension")
        returned_non_spatial_def = returned_non_spatial_dim%get_label_axis_def()

        ! Test fieldspec
        @assertEqual("foo",test_fieldspec1%get_unique_id())
        @assertEqual("field_group_id",test_fieldspec1%get_field_group_id())
        @assertEqual(11,test_fieldspec1%get_mesh_id())
        @assertEqual(W3,test_fieldspec1%get_function_space())
        @assertEqual(2,test_fieldspec1%get_order())
        @assertEqual(1,test_fieldspec1%get_kind())
        @assertEqual(integer_type,test_fieldspec1%get_type())
        @assertEqual(WRITE_FIELD_FACE,test_fieldspec1%get_io_driver())
        @assertEqual(.true.,test_fieldspec1%get_checksum())

        ! Test axisspecs
        @assertEqual("vertical_axis", returned_vert_axis%get_unique_id())
        @assertEqual(NUMERICAL, returned_vert_axis%get_axis_category())
        @assertEqual([real(r_def) :: 1,2,3], returned_vert_axis%get_numeric_axis_def())
        @assertEqual("non_spatial_dimension", returned_non_spatial_dim%get_unique_id())
        @assertEqual(CATEGORICAL, returned_non_spatial_dim%get_axis_category())
        do i = 1, 3
            @assertEqual(expected_non_spatial_def(i), returned_non_spatial_def(i))
        end do

    end subroutine test_assignment

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    @test
    subroutine test_non_spatial_iterator(self)

        implicit none

        class(fieldspec_test_type), intent(inout) :: self
        type(fieldspec_type)                      :: test_fieldspec
        type(axisspec_type), target  :: non_spatial_dimension_cat
        type(axisspec_type), target  :: non_spatial_dimension_num
        type(axisspec_type), pointer :: non_spatial_ptr_cat => null()
        type(axisspec_type), pointer :: non_spatial_ptr_num => null()
        type(non_spatial_dimension_iterator_type) :: iterator

        type(axisspec_type), pointer :: returned_non_spatial_dim => null()
        character(str_def) :: returned_non_spatial_def(3)
        character(str_def) :: expected_non_spatial_def(3) = ['a', 'b', 'c']
        integer(i_def) :: i, j

        ! Initialise axis and field specs
        non_spatial_dimension_cat = axisspec_type( &
                "non_spatial_dimension_cat", &
                CATEGORICAL, &
                label_axis_def=[character(str_def) :: 'a','b','c'])
        non_spatial_ptr_cat => non_spatial_dimension_cat
        non_spatial_dimension_num = axisspec_type( &
                "non_spatial_dimension_num", &
                NUMERICAL, &
                numeric_axis_def=[real(r_def) :: 1,2,3,4])
        non_spatial_ptr_num => non_spatial_dimension_num

        test_fieldspec = fieldspec_type( "foo", & ! unique_id
                                         "field_group_id", & ! field_group_id
                                         11, & ! mesh_id
                                         W3, & ! function_space
                                         2, & ! order
                                         1, & ! field_kind
                                         integer_type, & ! field_type
                                         WRITE_FIELD_FACE, & ! io_driver
                                         .true. & ! checksum &
                                        )

        ! Set dimensions
        call test_fieldspec%add_non_spatial_dimension(non_spatial_ptr_cat)
        call test_fieldspec%add_non_spatial_dimension(non_spatial_ptr_num)

        ! Iterate through non-spatial dimensions
        iterator = test_fieldspec%get_non_spatial_dimension_iterator()

        do i = 1, 10
            if (.not. iterator%has_next()) exit
            returned_non_spatial_dim => iterator%next()

            ! Test first non-spatial dimension
            if (i == 1) then
                returned_non_spatial_def = returned_non_spatial_dim%get_label_axis_def()
                @assertEqual("non_spatial_dimension_cat", returned_non_spatial_dim%get_unique_id())
                @assertEqual(CATEGORICAL, returned_non_spatial_dim%get_axis_category())
                do j = 1, 3
                    @assertEqual(expected_non_spatial_def(j), returned_non_spatial_def(j))
                end do

            ! Test second non-spatial dimension
            else if (i == 2) then
                @assertEqual("non_spatial_dimension_num", returned_non_spatial_dim%get_unique_id())
                @assertEqual(NUMERICAL, returned_non_spatial_dim%get_axis_category())
                @assertEqual(4, returned_non_spatial_dim%get_size())
                @assertEqual(.false., returned_non_spatial_dim%get_is_primary_axis())
                @assertEqual([real(r_def) :: 1,2,3,4], returned_non_spatial_dim%get_numeric_axis_def())
            end if
        end do

        ! The loop should have been exited after 2 non-spatial dimensions, so i=3
        @assertEqual(3, i)

    end subroutine test_non_spatial_iterator

end module fieldspec_mod_test
