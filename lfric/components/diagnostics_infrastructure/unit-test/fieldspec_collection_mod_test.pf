!-----------------------------------------------------------------------------
! (C) Crown copyright 2020 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> Test the fieldspec collection object
!>
module fieldspec_collection_mod_test

  use constants_mod,                only: i_def, r_def, str_def
  use fieldspec_mod,                only: fieldspec_type
  use fieldspec_collection_mod,     only: fieldspec_collection_type, &
                                          fieldspec_collection_iterator_type
  use fs_continuity_mod,            only: W3
  use io_driver_enum_mod,           only: WRITE_FIELD_FACE
  use axisspec_mod,                 only: axisspec_type
  use axisspec_collection_mod,      only: axisspec_collection_type
  use non_spatial_dimension_mod,    only: NUMERICAL, CATEGORICAL
  use pFUnit_Mod

  implicit none

  private
  public :: test_assignment, test_iterator

  @TestCase
  type, extends(TestCase), public :: fieldspec_collection_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_assignment
    procedure test_iterator
  end type fieldspec_collection_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(fieldspec_collection_test_type), intent(inout) :: this

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(fieldspec_collection_test_type), intent(inout) :: this

  end subroutine tearDown

  !> Test that fieldspec objects are correctly added to the collection and are retrievable
  !>
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @test
  subroutine test_assignment( self )

    implicit none

    class(fieldspec_collection_test_type), intent(inout) :: self
    type(fieldspec_type)                                 :: test_fieldspec1
    type(fieldspec_type),                  pointer       :: returned_fieldspec => null()
    type(fieldspec_collection_type)                      :: f_collection

    type(axisspec_type), target  :: vertical_axis
    type(axisspec_type), pointer :: vert_axis_ptr => null()
    type(axisspec_type), pointer :: returned_vert_axis => null()
    type(axisspec_type), target  :: non_spatial_dimension
    type(axisspec_type), pointer :: non_spatial_ptr => null()
    type(axisspec_type), pointer :: returned_non_spatial_dim => null()
    character(str_def) :: expected_non_spatial_def(3) = ['a', 'b', 'c']
    character(str_def) :: returned_non_spatial_def(3)
    integer(i_def) :: i

    ! Initialise collection and add fieldspecs
    f_collection = fieldspec_collection_type()
    call f_collection%generate_and_add_fieldspec( "foo", "field_group_id", &
            1_i_def, W3, 0_i_def, &
            0_i_def, 0_i_def, WRITE_FIELD_FACE, &
            .false. )
    call f_collection%generate_and_add_fieldspec( "bar", "field_group_id", &
            1_i_def, W3, 0_i_def, &
            0_i_def, 0_i_def, WRITE_FIELD_FACE, &
            .false. )

    ! Create dimensions
    vertical_axis = axisspec_type( &
            "vertical_axis", &
            NUMERICAL, &
            numeric_axis_def=[real(r_def) :: 1,2,3])
    non_spatial_dimension = axisspec_type( &
            "non_spatial_dimension", &
            CATEGORICAL, &
            label_axis_def=[character(str_def) :: 'a','b','c'])

    ! Set dimensions
    vert_axis_ptr => vertical_axis
    non_spatial_ptr => non_spatial_dimension
    returned_fieldspec => f_collection%get_fieldspec("foo")
    call returned_fieldspec%set_vertical_axis(vert_axis_ptr)
    call returned_fieldspec%add_non_spatial_dimension(non_spatial_ptr)
    returned_fieldspec => f_collection%get_fieldspec("bar")
    call returned_fieldspec%set_vertical_axis(vert_axis_ptr)

    ! Test getting an absent fieldspec
    returned_fieldspec => f_collection%get_fieldspec("absent")
    @assertNotAssociated(returned_fieldspec)

    ! Test getting first fieldspec
    returned_fieldspec => f_collection%get_fieldspec("foo")
    returned_vert_axis => returned_fieldspec%get_vertical_axis()
    returned_non_spatial_dim => returned_fieldspec%get_non_spatial_dimension( &
            "non_spatial_dimension")
    returned_non_spatial_def = returned_non_spatial_dim%get_label_axis_def()
    @assertAssociated(returned_fieldspec)
    @assertEqual("foo", returned_fieldspec%get_unique_id())
    @assertEqual("vertical_axis", returned_vert_axis%get_unique_id())
    @assertEqual([real(r_def) :: 1,2,3], returned_vert_axis%get_numeric_axis_def())
    @assertEqual("non_spatial_dimension", returned_non_spatial_dim%get_unique_id())
    do i = 1, 3
      @assertEqual(expected_non_spatial_def(i), returned_non_spatial_def(i))
    end do

    ! Test getting second fieldspec
    returned_fieldspec => f_collection%get_fieldspec("bar")
    returned_vert_axis => null()
    returned_vert_axis => returned_fieldspec%get_vertical_axis()
    returned_non_spatial_dim => returned_fieldspec%get_non_spatial_dimension( &
            "non_spatial_dimension")
    @assertEqual("bar", returned_fieldspec%get_unique_id())
    @assertEqual("vertical_axis", returned_vert_axis%get_unique_id())
    @assertEqual([real(r_def) :: 1,2,3], returned_vert_axis%get_numeric_axis_def())
    @assertNotAssociated(returned_non_spatial_dim)

    ! Check ability to test for existence of a fieldspec in the collection
    @assertTrue( f_collection%check_unique_id_in_use("foo") )
    @assertFalse( f_collection%check_unique_id_in_use("fooey") )

    call f_collection%clear()

  end subroutine test_assignment

  !> Test fieldspec collection iterator
  !>
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @test
  subroutine test_iterator( self )

    implicit none

    class(fieldspec_collection_test_type), intent(inout) :: self
    type(fieldspec_type),                  pointer       :: fieldspec => null()
    type(fieldspec_collection_type),       pointer       :: f_collection => null()
    type(axisspec_collection_type),        pointer       :: a_collection => null()
    type(fieldspec_collection_iterator_type)             :: iterator
    integer(i_def)                                       :: i, j

    type(axisspec_type), pointer :: vert_axis_ptr_1 => null()
    type(axisspec_type), pointer :: vert_axis_ptr_2 => null()
    type(axisspec_type), pointer :: returned_vert_axis => null()
    type(axisspec_type), pointer :: non_spatial_ptr => null()
    type(axisspec_type), pointer :: returned_non_spatial_dim => null()
    character(str_def) :: expected_non_spatial_def(3) = ['a', 'b', 'c']
    character(str_def) :: returned_non_spatial_def(3)

    f_collection => fieldspec_collection_type()
    a_collection => axisspec_collection_type()

    ! Add axes to axis collection
    call a_collection%generate_and_add_axisspec( &
            "vertical_axis_1", &
            NUMERICAL, &
            numeric_axis_def=[real(r_def) :: 1,2,3])
    call a_collection%generate_and_add_axisspec( &
            "vertical_axis_2", &
            NUMERICAL, &
            numeric_axis_def=[real(r_def) :: 2,4,6])
    call a_collection%generate_and_add_axisspec( &
            "non_spatial_dimension", &
            CATEGORICAL, &
            label_axis_def=[character(str_def) :: 'a','b','c'])

    ! Add fieldspecs to collection
    call f_collection%generate_and_add_fieldspec("fieldspec1", "field_group_name", &
                                        1_i_def, W3, 0_i_def, &
                                        0_i_def, 0_i_def, WRITE_FIELD_FACE, &
                                        .false.)

    call f_collection%generate_and_add_fieldspec("fieldspec2", "field_group_name", &
                                        1_i_def, W3, 0_i_def, &
                                        0_i_def, 0_i_def, WRITE_FIELD_FACE, &
                                        .false.)

    ! Set dimensions
    vert_axis_ptr_1 => a_collection%get_axisspec("vertical_axis_1")
    vert_axis_ptr_2 => a_collection%get_axisspec("vertical_axis_2")
    non_spatial_ptr => a_collection%get_axisspec("non_spatial_dimension")
    fieldspec => f_collection%get_fieldspec("fieldspec1")
    call fieldspec%set_vertical_axis(vert_axis_ptr_1)
    call fieldspec%add_non_spatial_dimension(non_spatial_ptr)
    fieldspec => f_collection%get_fieldspec("fieldspec2")
    call fieldspec%set_vertical_axis(vert_axis_ptr_2)

    iterator = f_collection%get_iterator()

    ! Iterate through the fieldspecs in the collection
    do i=1,10
      if (.not. iterator%has_next()) exit
      fieldspec => iterator%next()
      returned_vert_axis => fieldspec%get_vertical_axis()
      returned_non_spatial_dim => fieldspec%get_non_spatial_dimension("non_spatial_dimension")

      if (i == 1) then
        ! The 1st fieldspec should have the unique_id "fieldspec1"
        @assertEqual("fieldspec1", fieldspec%get_unique_id())
        @assertEqual("vertical_axis_1", returned_vert_axis%get_unique_id())
        @assertEqual(NUMERICAL, returned_vert_axis%get_axis_category())
        @assertEqual([real(r_def) :: 1,2,3], returned_vert_axis%get_numeric_axis_def())
        @assertEqual("non_spatial_dimension", returned_non_spatial_dim%get_unique_id())
        returned_non_spatial_def = returned_non_spatial_dim%get_label_axis_def()
        do j = 1, 3
          @assertEqual(expected_non_spatial_def(j), returned_non_spatial_def(j))
        end do
      else if (i ==2) then
        ! The 2nd fieldspec should have the unique_id "fieldspec2"
        @assertEqual("fieldspec2", fieldspec%get_unique_id())
        @assertEqual("vertical_axis_2", returned_vert_axis%get_unique_id())
        @assertEqual(NUMERICAL, returned_vert_axis%get_axis_category())
        @assertEqual([real(r_def) :: 2,4,6], returned_vert_axis%get_numeric_axis_def())
        @assertNotAssociated(returned_non_spatial_dim)
      end if
    end do

    ! The loop should have been exited after 2 fieldspecs, so i=3
    @assertEqual(3, i)

    call a_collection%clear()
    call f_collection%clear()

  end subroutine test_iterator

end module fieldspec_collection_mod_test
