!-----------------------------------------------------------------------------
! (C) Crown copyright 2020 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!> Test the LFRic-XIOS read routines
!>
module lfric_xios_read_mod_test

  use constants_mod,                  only : i_def
  use lfric_xios_constants_mod,       only : dp_xios
  use halo_routing_collection_mod,    only : halo_routing_collection_type, &
                                             halo_routing_collection
  use function_space_collection_mod,  only : function_space_collection_type, &
                                             function_space_collection
  use local_mesh_mod,                 only : local_mesh_type
  use mesh_collection_mod,            only : mesh_collection_type, &
                                             mesh_collection
  use mesh_mod,                       only : mesh_type, PLANE_BI_PERIODIC
  use field_mod,                      only : field_type, field_proxy_type
  use function_space_mod,             only : function_space_type
  use fs_continuity_mod,              only : W0, W2H, WTheta, W3

  use pfunit_mod

  implicit none

  private
  public :: test_lfric_xios_read


  @TestCase
  type, extends(TestCase), public :: read_test_type
    private
    type(function_space_type), pointer :: w0_fs  => null()
    type(function_space_type), pointer :: w2h_fs => null()
    type(function_space_type), pointer :: wth_fs => null()
    type(function_space_type), pointer :: w3_fs  => null()
    type(mesh_type),           pointer :: mesh   => null()
    type(local_mesh_type)              :: unit_test_local_mesh
  contains
    procedure setUp
    procedure tearDown
    procedure get_local_mesh_ptr
  end type read_test_type

  integer(i_def), parameter :: element_order = 0

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(read_test_type), intent(inout) :: this

    type(local_mesh_type), pointer :: unit_test_local_mesh_ptr
    type(mesh_type) :: unit_test_mesh
    integer(i_def)  :: mesh_id

    ! Create top level mesh collection
    mesh_collection = mesh_collection_type()
    ! Create top level function space collection
    function_space_collection = function_space_collection_type()
    ! Create top level halo_routing collection
    halo_routing_collection = halo_routing_collection_type()

    call this%unit_test_local_mesh%initialise()
    unit_test_local_mesh_ptr => this%get_local_mesh_ptr()

    ! Dummy mesh mod has 9 cells, 3 layers and is uniform in vertical
    unit_test_mesh = mesh_type( PLANE_BI_PERIODIC, unit_test_local_mesh_ptr )
    mesh_id = mesh_collection%add_new_mesh( unit_test_mesh )
    this%mesh => mesh_collection%get_mesh( mesh_id )

    ! Make a function space to be used to create fields in the tests
    this%w0_fs => function_space_collection%get_fs( this%mesh, &
                                                    element_order, W0 )
    this%w2h_fs => function_space_collection%get_fs( this%mesh, &
                                                    element_order, W2H )
    this%wth_fs => function_space_collection%get_fs( this%mesh, &
                                                    element_order, WTheta )
    this%w3_fs => function_space_collection%get_fs( this%mesh, &
                                                    element_order, W3 )

  end subroutine setUp


  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(read_test_type), intent(inout) :: this

    call function_space_collection%clear()
    call mesh_collection%clear()
    call halo_routing_collection%clear()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  function get_local_mesh_ptr(this) result(unit_test_local_mesh_ptr)
    implicit none
    class(read_test_type), intent(inout), target :: this
    type(local_mesh_type), pointer :: unit_test_local_mesh_ptr
    unit_test_local_mesh_ptr => this%unit_test_local_mesh
  end function get_local_mesh_ptr

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  @Test
  subroutine test_lfric_xios_read( this )

    use lfric_xios_read_mod,      only: checkpoint_read_xios,    &
                                        read_field_node,         &
                                        read_field_edge,         &
                                        read_field_face,         &
                                        read_field_single_face,  &
                                        read_state,              &
                                        read_field_time_var

    implicit none

    class(read_test_type), intent(inout) :: this

    ! Fields to be read into
    type(field_type) :: W0_field, W2H_field, WTheta_field, W3_field
    type(field_proxy_type) :: test_proxy
    real(dp_xios), allocatable :: W0_data(:), W2H_data(:), WTheta_data(:), W3_data(:)

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Setup expected data arrays
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    W0_data = (/ 1.0, 10.0, 19.0, 28.0, 2.0, 11.0, 20.0, 29.0, 3.0, 12.0, 21.0, 30.0, &
                 4.0, 13.0, 22.0, 31.0, 5.0, 14.0, 23.0, 32.0, 6.0, 15.0, 24.0, 33.0, &
                 7.0, 16.0, 25.0, 34.0, 8.0, 17.0, 26.0, 35.0, 9.0, 18.0, 27.0, 36.0 /)

    W2H_data = (/ 1.00, 19.0, 37.0, 2.00, 20.0, 38.0, 3.00, 21.0, 39.0, &
                  4.00, 22.0, 40.0, 5.00, 23.0, 41.0, 6.00, 24.0, 42.0, &
                  7.00, 25.0, 43.0, 8.00, 26.0, 44.0, 9.00, 27.0, 45.0, &
                  10.0, 28.0, 46.0, 11.0, 29.0, 47.0, 12.0, 30.0, 48.0, &
                  13.0, 31.0, 49.0, 14.0, 32.0, 50.0, 15.0, 33.0, 51.0, &
                  16.0, 34.0, 52.0, 17.0, 35.0, 53.0, 18.0, 36.0, 54.0 /)

    WTheta_data = (/ 1.0, 10.0, 19.0, 28.0, 2.0, 11.0, 20.0, 29.0, 3.0, 12.0, 21.0, 30.0, &
                     4.0, 13.0, 22.0, 31.0, 5.0, 14.0, 23.0, 32.0, 6.0, 15.0, 24.0, 33.0, &
                     7.0, 16.0, 25.0, 34.0, 8.0, 17.0, 26.0, 35.0, 9.0, 18.0, 27.0, 36.0 /)

    W3_data = (/ 1.0, 10.0, 19.0, 2.0, 11.0, 20.0, 3.0, 12.0, 21.0, &
                 4.0, 13.0, 22.0, 5.0, 14.0, 23.0, 6.0, 15.0, 24.0, &
                 7.0, 16.0, 25.0, 8.0, 17.0, 26.0, 9.0, 18.0, 27.0 /)

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Test node read
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    call W0_field%initialise( this%w0_fs )
    test_proxy = W0_field%get_proxy()
    call read_field_node("W0_field", test_proxy)

    @assertEqual( W0_data, test_proxy%data )

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Test edge read
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    call W2H_field%initialise( this%w2h_fs )
    test_proxy = W2H_field%get_proxy()
    call read_field_edge("W2H_field", test_proxy)

    @assertEqual( W2H_data, test_proxy%data )

    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    ! Test face read
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    call WTheta_field%initialise( this%wth_fs )
    test_proxy = WTheta_field%get_proxy()
    call read_field_face("WTheta_field", test_proxy)

    @assertEqual( WTheta_data, test_proxy%data )

    call W3_field%initialise( this%w3_fs )
    test_proxy = W3_field%get_proxy()
    call read_field_face("W3_field", test_proxy)

    @assertEqual( W3_data, test_proxy%data )

  end subroutine test_lfric_xios_read

end module lfric_xios_read_mod_test
