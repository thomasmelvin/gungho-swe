!-----------------------------------------------------------------------------
! (C) Crown copyright 2020 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> Test the model data object
!>
module driver_model_data_mod_test

  use constants_mod,                 only : i_def, r_def
  use function_space_mod,            only : function_space_type
  use function_space_collection_mod, only : function_space_collection_type, &
                                            function_space_collection
  use mesh_collection_mod,           only : mesh_collection_type, &
                                            mesh_collection
  use halo_routing_collection_mod,   only : halo_routing_collection_type, &
                                            halo_routing_collection
  use field_mod,                     only : field_type, &
                                            field_proxy_type
  use field_collection_mod,          only : field_collection_type
  use fs_continuity_mod,             only : W3
  use local_mesh_mod,                only : local_mesh_type
  use pure_abstract_field_mod,       only : pure_abstract_field_type
  use driver_model_data_mod,         only : model_data_type
  use pFUnit_Mod

  implicit none


  private
  public :: test_assignment

  @TestCase
  type, extends(TestCase), public :: driver_model_data_test_type
    private
    type(local_mesh_type)              :: unit_test_local_mesh
    type(function_space_type), pointer :: w3_fs => null()
  contains
    procedure setUp
    procedure tearDown
    procedure get_local_mesh_ptr
    procedure test_assignment
  end type driver_model_data_test_type

  integer(i_def), parameter    :: element_order = 0


contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use mesh_mod, only : mesh_type, PLANE_BI_PERIODIC

    implicit none

    class(driver_model_data_test_type), intent(inout) :: this
    type(local_mesh_type), pointer :: unit_test_local_mesh_ptr
    type(mesh_type) :: unit_test_mesh
    integer(i_def)  :: mesh_id

    type(mesh_type), pointer :: mesh => null()

    ! Create top level mesh collection
    mesh_collection = mesh_collection_type()
    ! Create top level function space collection
    function_space_collection = function_space_collection_type()
    ! Create top level halo_routing collection
    halo_routing_collection = halo_routing_collection_type()

    call this%unit_test_local_mesh%initialise()
    unit_test_local_mesh_ptr => this%get_local_mesh_ptr()

    ! Dummy mesh mod has 9 cells, 3 layers and is uniform in vertical
    unit_test_mesh = mesh_type( PLANE_BI_PERIODIC, unit_test_local_mesh_ptr )
    mesh_id =  mesh_collection%add_new_mesh( unit_test_mesh )
    mesh    => mesh_collection%get_mesh( mesh_id )


    this%w3_fs => function_space_collection%get_fs( mesh,          &
                                                    element_order, &
                                                    W3 )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(driver_model_data_test_type), intent(inout) :: this

    call function_space_collection%clear()
    call mesh_collection%clear()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  function get_local_mesh_ptr(this) result(unit_test_local_mesh_ptr)

    implicit none

    class(driver_model_data_test_type), intent(inout), target :: this
    type(local_mesh_type), pointer :: unit_test_local_mesh_ptr

    unit_test_local_mesh_ptr => this%unit_test_local_mesh

  end function get_local_mesh_ptr

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  !> Test that field collection objects are correctly added to the model data
  !> and are retrievable
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_assignment( this )

    implicit none

    class(driver_model_data_test_type), intent(inout) :: this
    type(model_data_type)                             :: model_data

    type(field_type), target                 :: test_field
    type(field_type), pointer                :: returned_field => null()
    class(pure_abstract_field_type), pointer :: field_ptr => null()

    type(field_proxy_type)                   :: field_proxy
    type(field_proxy_type)                   :: returned_field_proxy

    type(field_collection_type), pointer :: returned_collection => null()


    ! Initialise test field and get proxy
    call test_field%initialise( this%w3_fs, name='test_field' )
    field_proxy = test_field%get_proxy()

    ! Set first dof to nominal value
    field_proxy%data(1) = 1.0_r_def

    ! Initialise depository
    call model_data%depository%initialise(name = "depository", table_len=100)

    ! Add a field collection to model data
    call model_data%add_empty_field_collection("collection_1")

    ! Test collection_1 is in model_data
    @assertTrue(model_data%field_collection_exists("collection_1"))
    returned_collection => model_data%get_field_collection("collection_1")
    @assertAssociated(returned_collection)
    @assertEqual("collection_1", returned_collection%get_name())
    @assertEqual(0, returned_collection%get_length())

    ! Add test_field to depository and a pointer to it to collection_1
    call model_data%depository%add_field(test_field)
    field_ptr => model_data%depository%get_field("test_field")
    call returned_collection%add_reference_to_field(field_ptr)
    nullify(returned_collection)

    ! Test name and first dof of test_field
    returned_collection => model_data%get_field_collection("collection_1")
    @assertEqual(1, returned_collection%get_length())
    returned_field => returned_collection%get_field("test_field")
    @assertEqual("test_field", returned_field%get_name())
    returned_field_proxy = returned_field%get_proxy()
    @assertEqual(1.0_r_def, returned_field_proxy%data(1))

    ! Test field is in depository
    @assertEqual(1, model_data%depository%get_length())
    @assertTrue(model_data%depository%field_exists("test_field"))

    @assertFalse(model_data%field_collection_exists("absent_collection"))

  end subroutine test_assignment

end module driver_model_data_mod_test
