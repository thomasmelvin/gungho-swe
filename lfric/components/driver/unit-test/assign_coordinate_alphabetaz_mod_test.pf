!-----------------------------------------------------------------------------
! (C) Crown copyright 2021 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!
!-------------------------------------------------------------------------------
module assign_coordinate_alphabetaz_mod_test

  use constants_mod, only : r_def, i_def, PI
  use pFUnit_Mod

  implicit none

  private
  public :: assign_coordinate_alphabetaz_test_type, test_all

  @TestCase
  type, extends(TestCase) :: assign_coordinate_alphabetaz_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type assign_coordinate_alphabetaz_test_type

  real(kind=r_def), parameter :: radius   = 104.0_r_def
  real(kind=r_def), parameter :: scaling  = 1.0_r_def

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use feign_config_mod, only : feign_planet_config

    implicit none

    class(assign_coordinate_alphabetaz_test_type), intent(inout) :: this

    call feign_planet_config( radius=radius, scaling_factor=scaling )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use configuration_mod, only : final_configuration

    implicit none

    class(assign_coordinate_alphabetaz_test_type), intent(inout) :: this

    call final_configuration()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use driver_coordinates_mod, only : assign_coordinate_alphabetaz

    implicit none

    class(assign_coordinate_alphabetaz_test_type), intent(inout) :: this

    real(kind=r_def), parameter :: tol = 1.0e-6_r_def
    real(kind=r_def), parameter :: dh = 17.0_r_def

    integer(kind=i_def) :: nlayers, ndf_chi, undf_chi, ndf_pid, undf_pid
    integer(kind=i_def) :: map_chi(1), map_pid(1), nverts, i
    real(kind=r_def) :: alpha(2), beta(2), panel_rho(4)
    real(kind=r_def) :: alpha_out(1), beta_out(1), height_out(1), panel_id(1)
    real(kind=r_def) :: verts_XYZ(3,8,1), verts_ref(8,3), nodal_coord(3,1)
    real(kind=r_def) :: r_bot, r_top

    nlayers    = 1
    ndf_chi    = 1
    nverts     = 8
    map_chi(1) = 1
    undf_chi   = 1

    ! Define panel_id field
    panel_id = (/ 3.0_r_def /)
    ndf_pid = 1
    undf_pid = 1
    map_pid = (/ 1 /)

    ! Coordinates of vertices of reference_element
    verts_ref(:,1) = (/ 0.0_r_def, 1.0_r_def, 1.0_r_def, 0.0_r_def, &
                        0.0_r_def, 1.0_r_def, 1.0_r_def, 0.0_r_def /)
    verts_ref(:,2) = (/ 0.0_r_def, 0.0_r_def, 1.0_r_def, 1.0_r_def, &
                        0.0_r_def, 0.0_r_def, 1.0_r_def, 1.0_r_def /)
    verts_ref(:,3) = (/ 0.0_r_def, 0.0_r_def, 0.0_r_def, 0.0_r_def, &
                        1.0_r_def, 1.0_r_def, 1.0_r_def, 1.0_r_def /)

    ! We consider a cell whose vertices are at
    ! alpha = (0, pi/6), beta = (-pi/6, pi/12), height = (0, dh) on panel 3
    alpha(:) = (/ 0.0_r_def,     PI/6.0_r_def  /)
    beta(:)  = (/ -PI/6.0_r_def, PI/12.0_r_def /)
    ! Compute analytic values of panel_rho = sqrt(1+tan^2(alpha)+tan^2(beta))
    panel_rho(:) = (/ 2.0_r_def/sqrt(3.0_r_def),                            &
                      sqrt(8.0_r_def - 4.0_r_def*sqrt(3.0_r_def)),          &
                      sqrt(15.0_r_def)/3.0_r_def,                           &
                      sqrt(25.0_r_def/3.0_r_def-4.0_r_def*sqrt(3.0_r_def)) /)
    ! Now we give the values of the corresponding (X,Y,Z) coordinates
    r_bot = radius
    r_top = radius + dh
    verts_XYZ(1,:,1) = (/ -r_bot/panel_rho(1), -r_bot/panel_rho(2), &
                          -r_bot/panel_rho(3), -r_bot/panel_rho(4), &
                          -r_top/panel_rho(1), -r_top/panel_rho(2), &
                          -r_top/panel_rho(3), -r_top/panel_rho(4) /)
    verts_XYZ(2,:,1) = (/ -r_bot/sqrt(3.0)/panel_rho(1),                   &
                           r_bot*(2.0_r_def-sqrt(3.0_r_def))/panel_rho(2), &
                          -r_bot/sqrt(3.0)/panel_rho(3),                   &
                           r_bot*(2.0_r_def-sqrt(3.0_r_def))/panel_rho(4), &
                          -r_top/sqrt(3.0)/panel_rho(1),                   &
                           r_top*(2.0_r_def-sqrt(3.0_r_def))/panel_rho(2), &
                          -r_top/sqrt(3.0)/panel_rho(3),                   &
                           r_top*(2.0_r_def-sqrt(3.0_r_def))/panel_rho(4) /)
    verts_XYZ(3,:,1) = (/ 0.0_r_def,  0.0_r_def,              &
                          r_bot/sqrt(3.0_r_def)/panel_rho(3), &
                          r_bot/sqrt(3.0_r_def)/panel_rho(4), &
                          0.0_r_def,  0.0_r_def,              &
                          r_top/sqrt(3.0_r_def)/panel_rho(3), &
                          r_top/sqrt(3.0_r_def)/panel_rho(4) /)

    ! The coordinate at which to determine chi at in the reference element
    nodal_coord(:,1) = (/ 0.5_r_def, 0.5_r_def, 0.5_r_def /)

    call assign_coordinate_alphabetaz(nlayers, ndf_chi, nverts, undf_chi, map_chi, &
                                      alpha_out, beta_out, height_out,             &
                                      verts_XYZ, nodal_coord, verts_ref,           &
                                      panel_id, ndf_pid, undf_pid, map_pid         )

    ! The answer should be the central point of the box
    ! alpha = pi/12, beta = -pi/24, h = dh / 2, panel_id = 3
    @assertEqual( 0.5_r_def*(alpha(1)+alpha(2)), alpha_out(1), tol )
    @assertEqual( 0.5_r_def*(beta(1)+beta(2)), beta_out(1), tol )
    @assertEqual( dh/2.0_r_def, height_out(1), tol )

  end subroutine test_all

end module assign_coordinate_alphabetaz_mod_test
