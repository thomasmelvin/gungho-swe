!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> @brief A Runge-Kutta time-discretisation of the non-linear 3D equations,
!>        currently using 3-stage SSP.
!> @details An algorithm for timestepping the 3D nonlinear linear
!>          equations using a multistage explicit Runge-Kutta algorithm.
module rk_alg_timestep_mod

  use constants_mod,                      only: i_def, r_def, l_def
  use log_mod,                            only: log_event,         &
                                                log_scratch_space, &
                                                LOG_LEVEL_INFO,    &
                                                LOG_LEVEL_TRACE

  ! Configuration options
  use finite_element_config_mod,          only: element_order, &
                                                vorticity_in_w1
  use formulation_config_mod,             only: rotating
  use runge_kutta_init_mod,               only: get_rk_timestepping_weights
  use timestepping_config_mod,            only: runge_kutta_method
  use derived_config_mod,                 only: bundle_size
  use fem_constants_mod,                  only: get_qr, &
                                                get_inverse_w3_mass_matrix
  use geometric_constants_mod,            only: get_coordinates, &
                                                get_panel_id
  use transport_config_mod,               only: operators, &
                                                operators_fv
  use mixing_config_mod,                  only: viscosity, viscosity_mu
  use planet_config_mod,                  only: cp

  use field_bundle_mod,                   only: clone_bundle, &
                                                bundle_axpy,  &
                                                bundle_axpby, &
                                                add_bundle,   &
                                                copy_bundle,  &
                                                set_bundle_scalar
  use physical_op_constants_mod,          only: get_geopotential,  &
                                                get_coriolis, get_dx_at_w2

  ! PsyKAl PSYClone kernels
  use enforce_bc_kernel_mod,              only: enforce_bc_kernel_type
  use pressure_gradient_bd_kernel_mod,    only: pressure_gradient_bd_kernel_type
  use hydrostatic_kernel_mod,             only: hydrostatic_kernel_type
  use kinetic_energy_gradient_kernel_mod, only: kinetic_energy_gradient_kernel_type
  use project_eos_pressure_kernel_mod,    only: project_eos_pressure_kernel_type
  use matrix_vector_kernel_mod,           only: matrix_vector_kernel_type
  use vorticity_advection_kernel_mod,     only: vorticity_advection_kernel_type
  use w2_vorticity_advection_kernel_mod,  only: w2_vorticity_advection_kernel_type
  use tracer_viscosity_kernel_mod,        only: tracer_viscosity_kernel_type
  use psykal_lite_mod,                    only: invoke_momentum_viscosity_kernel_type

  ! Derived Types
  use field_mod,                          only: field_type
  use field_collection_mod,               only: field_collection_type
  use quadrature_xyoz_mod,                only: quadrature_xyoz_type
  use quadrature_face_mod,                only: quadrature_face_type
  use quadrature_rule_gaussian_mod,       only: quadrature_rule_gaussian_type
  use operator_mod,                       only: operator_type
  use reference_element_mod,              only: reference_element_type
  use mesh_mod,                           only: mesh_type
  ! Algorithm
  use mass_matrix_solver_alg_mod,         only: mass_matrix_solver_alg
  use gungho_transport_control_alg_mod,   only: gungho_transport_control_alg_init, &
                                                gungho_transport_control_alg,      &
                                                gungho_transport_control_alg_final
  use compute_vorticity_alg_mod,          only: compute_vorticity_alg

  ! Field indices
  use field_indices_mod,                  only: igh_u, igh_t, igh_d, igh_p
  use moist_dyn_mod,                      only: num_moist_factors, gas_law
  use mr_indices_mod,                     only: nummr

  use io_config_mod,                      only: subroutine_timers
  use timer_mod,                          only: timer

  implicit none

  private

  ! 'State' items that need to be created once but used every step
  type(field_type), allocatable :: state(:), state_n(:), rhs(:), inc(:)
  type(field_type), allocatable :: rhs_prediction(:,:)
  type(field_type)              :: vorticity
  integer(kind=i_def)           :: num_rk_stage
  real(kind=r_def), allocatable :: ak(:,:)

  public :: rk_alg_init
  public :: rk_alg_step
  public :: rk_alg_final

contains

  !> @details Initialisation procedure for the rk timestepping algorithm
  !>          Initialises various internal fields
  !> @param[in]    mesh  Mesh object on which the model runs
  !> @param[in]    u 3D  wind field
  !> @param[in]    rho   Density
  !> @param[in]    theta Potential temperature
  !> @param[in]    exner Exner pressure
  subroutine rk_alg_init(mesh, u, rho, theta, exner)
    use fs_continuity_mod,             only: W1, W2
    use function_space_collection_mod, only: function_space_collection
    implicit none

    ! Mesh
    type(mesh_type), intent(in), pointer :: mesh

    ! Prognostic fields
    type( field_type ), intent( in ) :: u, rho, theta, exner

    ! Timestepping variables
    integer(i_def) :: stage

    ! Function space for vorticity
    integer(i_def) :: vorticity_fs

    ! Get weights for RK scheme
    call get_rk_timestepping_weights(num_rk_stage, ak, runge_kutta_method)

    !=== Allocate internal state field arrays ================================!
    allocate(state(bundle_size))
    allocate(state_n(bundle_size))
    allocate(rhs(bundle_size))
    allocate(inc(bundle_size))

    allocate ( rhs_prediction(bundle_size,num_rk_stage) )

    !=== Initialise internal state field objects =============================!

    call state(igh_u)%initialise( vector_space = u%get_function_space() )
    call state(igh_t)%initialise( vector_space = theta%get_function_space() )
    call state(igh_d)%initialise( vector_space = rho%get_function_space() )
    call state(igh_p)%initialise( vector_space = exner%get_function_space() )

    call clone_bundle(state, state_n, bundle_size)
    call clone_bundle(state, rhs, bundle_size)
    call clone_bundle(state, inc, bundle_size)

    do stage = 1,num_rk_stage
      call clone_bundle(state, rhs_prediction(:,stage), bundle_size)
    end do

    ! Create the diagnostic vorticity field
    if ( vorticity_in_w1 ) then
      vorticity_fs = W1
    else
      vorticity_fs = W2
    end if
    call vorticity%initialise( vector_space = &
      function_space_collection%get_fs(mesh, element_order, vorticity_fs) )


    !=== Copy prognostic field data to state arrays ===========================!
    call invoke( name = "Copy fields to state",   &
                 setval_X(state(igh_u), u    ), &
                 setval_X(state(igh_t), theta), &
                 setval_X(state(igh_d), rho  ), &
                 setval_X(state(igh_p), exner) )

    call gungho_transport_control_alg_init(mesh)

    call log_event( "Gungho: initialised timestepping algorithm", LOG_LEVEL_INFO )

  end subroutine rk_alg_init

  !> @brief A Runge-Kutta time-discretisation of the non-linear 3D equations,
  !>        currently using 3-stage SSP.
  !> @details An algorithm for timstepping the 3D nonlinear
  !>          equations using a Runge-Kutta algortihm.
  !>          The type of Runge-Kutta scheme can be simply changed by
  !>          modifying the (currently hardwired) Butcher tableau (ak array)
  !>          The current set up uses the 3rd-order three stage
  !>          Strong-Stability-Preserving (SSP3) method
  !> @param[in,out] u            3D wind field
  !> @param[in,out] rho          Density
  !> @param[in,out] theta        Potential temperature
  !> @param[in,out] moist_dyn    Moist dynamics factors
  !> @param[in,out] exner        Exner pressure field
  !> @param[in,out] mr           Mixing ratios
  !> @param[in] dt               The model timestep length
  subroutine rk_alg_step(u, rho, theta, moist_dyn, exner, mr, dt )

    implicit none
    ! Prognostic fields
    type(field_type),            intent(inout) :: u, rho, theta, exner, &
                                                  moist_dyn(num_moist_factors)
    type(field_type),            intent(inout) :: mr(nummr)
    real(kind=r_def),            intent(in)    :: dt

    ! The quadrature object
    type( quadrature_xyoz_type ),  pointer :: qr => null()
    type(quadrature_face_type)             :: qrf
    class(reference_element_type), pointer :: reference_element =>null()
    type(mesh_type),               pointer :: mesh => null()

    ! Temporary items
    type(field_type) :: diagnostic_field

    ! Temps for retrieving things from runtime_constants
    type(field_type),    pointer :: geopotential => null()
    type(field_type),    pointer :: chi(:) => null()
    type(field_type),    pointer :: panel_id => null()
    type( field_type ),  pointer :: dx_at_w2 => null()
    type(operator_type), pointer :: m3_inv => null(), &
                                    coriolis => null()

    type(quadrature_rule_gaussian_type) :: gaussian_quadrature

    integer(kind=i_def) :: st, stage, mesh_id, outer, nqp
    logical(kind=l_def) :: horizontal_face, vertical_face

    if ( subroutine_timers ) call timer('rk_alg')
    qr => get_qr()
    mesh => theta%get_mesh()
    reference_element => mesh%get_reference_element()
    outer = 1_i_def
    horizontal_face = .true.
    vertical_face = .false.
    nqp = element_order + 2_i_def
    qrf = quadrature_face_type(nqp, horizontal_face, vertical_face, &
                               reference_element,  gaussian_quadrature)

    ! Get mm operators from runtime_constants
    mesh_id = u%get_mesh_id()

    ! Get geopotential field from runtime_constants
    geopotential => get_geopotential(mesh_id)

    ! Get coordinates
    chi => get_coordinates(mesh_id)
    panel_id => get_panel_id(mesh_id)
    !=== Do a single timestep ==============================================!

    ! Runge-Kutta algorithm
    call copy_bundle(state, state_n, bundle_size)
    do stage = 1,num_rk_stage
      write( log_scratch_space, '(A,I0)' ) '  Start of stage ', stage
      call log_event( log_scratch_space, LOG_LEVEL_INFO )
      ! Compute advection terms
      call gungho_transport_control_alg( rhs_prediction(:,stage), state, &
                                         state(igh_u), state(igh_u),     &
                                         mr, mr, moist_dyn,              &
                                         dt, outer )
      ! Compute new rhs
      if ( rotating ) then
        coriolis => get_coriolis(mesh_id)
        call invoke( matrix_vector_kernel_type( rhs_prediction(igh_u,stage),   &
                                                state(igh_u), coriolis ) )
      end if
      call compute_vorticity_alg(vorticity, state(igh_u), .false.)
      if ( vorticity_in_w1 ) then
        call invoke( vorticity_advection_kernel_type(rhs_prediction(igh_u,stage), &
                                                     state(igh_u), vorticity,     &
                                                     chi, panel_id, qr) )
      else
        call invoke( w2_vorticity_advection_kernel_type(rhs_prediction(igh_u,stage), &
                                                        state(igh_u), vorticity,     &
                                                        chi, panel_id, qr) )
      end if

      call invoke( name = "Compute new rhs",                                        &
                   pressure_gradient_bd_kernel_type( rhs_prediction(igh_u, stage),  &
                                                     state(igh_p), 1, state(igh_t), &
                                                     moist_dyn, cp, qrf ),          &
                   hydrostatic_kernel_type( rhs_prediction(igh_u,stage),            &
                                            state(igh_p), state(igh_t),             &
                                            moist_dyn, geopotential, cp, qr ),      &
                   kinetic_energy_gradient_kernel_type(                             &
                                        rhs_prediction(igh_u,stage), state(igh_u),  &
                                        chi, panel_id, qr ),                        &
                   enforce_bc_kernel_type( rhs_prediction(1,stage) ) )
      call set_bundle_scalar(0.0_r_def, rhs, bundle_size)

      do st = 1, stage
        call bundle_axpy(ak(stage,st), rhs_prediction(:,stage), rhs, rhs, bundle_size)
      end do

      ! Invert mass matrices
      if ( operators == operators_fv) then
        ! Equation is in pointwise form already so dont need to do any mass
        ! matrix inversions
        call invoke( setval_X(inc(igh_t), rhs(igh_t)) )
      else
        ! Use full mass matrix
        call mass_matrix_solver_alg( inc(igh_t), rhs(igh_t) )
      end if
      call mass_matrix_solver_alg( inc(igh_u), rhs(igh_u) )
      call invoke( setval_X(inc(igh_d), rhs(igh_d)) )

      ! Add increments
      call invoke( setval_c(inc(igh_p), 0.0_r_def) )
      call bundle_axpy(dt, inc, state_n, state, bundle_size)
      ! Recompute exner from eos
      m3_inv => get_inverse_w3_mass_matrix(mesh_id)
      call invoke( project_eos_pressure_kernel_type( state(igh_p), state(igh_d),       &
                                                     state(igh_t), moist_dyn(gas_law), &
                                                     chi, panel_id, m3_inv, qr ) )
      ! Diagnostics
      call inc(igh_t)%copy_field(diagnostic_field)
      call diagnostic_field%log_minmax(LOG_LEVEL_TRACE, 'theta_inc')
      call inc(igh_u)%copy_field(diagnostic_field)
      call diagnostic_field%log_minmax(LOG_LEVEL_TRACE, 'u_inc')
      call inc(igh_d)%copy_field(diagnostic_field)
      call diagnostic_field%log_minmax(LOG_LEVEL_TRACE, 'rho_inc')
      call inc(igh_p)%copy_field(diagnostic_field)
      call diagnostic_field%log_minmax(LOG_LEVEL_TRACE, 'exner_inc')
      call inc(igh_t)%log_minmax(LOG_LEVEL_TRACE, 'theta_inc')

    end do

    ! Apply viscosity
    if ( viscosity ) then
      call log_event( 'Applying Viscosity', LOG_LEVEL_INFO )
      dx_at_w2 => get_dx_at_w2(mesh_id)
      call invoke(setval_c(inc(igh_u), 0.0_r_def),                             &
                  tracer_viscosity_kernel_type(   inc(igh_t), state(igh_t), 1, &
                                                  dx_at_w2, viscosity_mu ))
      call invoke_momentum_viscosity_kernel_type( inc(igh_u), state(igh_u),    &
                                                  dx_at_w2, viscosity_mu )
      call invoke(setval_c(inc(igh_d), 0.0_r_def) )
      call bundle_axpy(dt, inc, state, state, bundle_size)
    end if

    ! Return fields in u, theta, rho arrays
    call invoke( name = "Return fields",        &
                 setval_X(u,     state(igh_u)), &
                 setval_X(theta, state(igh_t)), &
                 setval_X(rho,   state(igh_d)), &
                 setval_X(exner, state(igh_p)) )

    nullify( geopotential, chi, panel_id, m3_inv, &
             mesh, reference_element, qr )

    if ( subroutine_timers ) call timer('rk_alg')

  end subroutine rk_alg_step

  !=============================================================================
  !>@details Finalises allocatable arrays in module scope
  subroutine rk_alg_final()

    implicit none

    if (allocated(state))          deallocate(state)
    if (allocated(state_n))        deallocate(state_n)
    if (allocated(rhs))            deallocate(rhs)
    if (allocated(inc))            deallocate(inc)
    if (allocated(rhs_prediction)) deallocate(rhs_prediction)
    if (allocated(ak))             deallocate(ak)

  end subroutine rk_alg_final

end module rk_alg_timestep_mod
