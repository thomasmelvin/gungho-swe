!-----------------------------------------------------------------------------
! (c) Crown copyright 2020 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!> @brief Computes total mass of each moisture species and for dry mass.

module moisture_conservation_alg_mod

  use compute_total_mass_kernel_mod,   only: compute_total_mass_kernel_type
  use compute_moist_mass_kernel_mod,   only: compute_moist_mass_kernel_type
  use constants_mod,                   only: r_def, i_def
  use function_space_collection_mod,   only: function_space_collection
  use field_mod,                       only: field_type
  use finite_element_config_mod,       only: element_order, &
                                             nqp_exact
  use fs_continuity_mod,               only: W3
  use function_space_mod,              only: function_space_type
  use log_mod,                         only: log_event,         &
                                             log_scratch_space, &
                                             LOG_LEVEL_INFO
  use mesh_mod,                        only: mesh_type
  use mr_indices_mod,                  only: nummr
  use quadrature_xyoz_mod,             only: quadrature_xyoz_type
  use quadrature_rule_gaussian_mod,    only: quadrature_rule_gaussian_type
  use geometric_constants_mod,         only: get_coordinates, &
                                             get_panel_id
  use io_config_mod,                   only: subroutine_timers
  use timer_mod,                       only: timer

  implicit none

  private

  public :: moisture_conservation_alg

contains
  !> @brief This subroutine computes the global dry mass and the global masses
  !> of each of the moisture species.
  !> @details For dry mass, computes \int rho_d * dx, where rho_d is dry density.
  !> For the mass of each moisture species, computes \int rho_d * m_X * dx, where
  !> m_X is the mixing ratio of the X-th moisture species.
  !> The total mass of moist air is the sum of all of these (dry + all moisture species).
  !> This routine is intended to be used at multiple points in the time-step.
  !> @param[in] rho Density field
  !> @param[in] mr Bundle of moisture mixing ratios
  !> @param[in] stage A string describing the point in time-step
  subroutine moisture_conservation_alg( rho,          &
                                        mr,           &
                                        stage         &
                                      )

    implicit none

    type(field_type),      intent( in ) :: rho
    type(field_type),      intent( in ) :: mr(nummr)
    character(len=*),      intent( in ) :: stage
    ! Local variables
    type(quadrature_xyoz_type)          :: qr
    type(quadrature_rule_gaussian_type) :: quadrature_rule
    type(field_type),           pointer :: chi(:) => null() ! Coordinates
    type(field_type),           pointer :: panel_id => null()
    type(function_space_type),  pointer :: w3_fs => null()
    ! Fields and values
    type(field_type)                    :: dry_mass, water_mass
    real(kind=r_def)                    :: total_dry
    real(kind=r_def)                    :: total_water_all(nummr)
    integer(kind=i_def)                 :: i_mr

    type(mesh_type), pointer :: mesh => null()

    if ( subroutine_timers ) call timer('moisture_conservation_alg')

    ! Get a quadrature rule
    qr = quadrature_xyoz_type(nqp_exact, quadrature_rule)

    mesh => rho%get_mesh()
    w3_fs => function_space_collection%get_fs( mesh, element_order, W3 )

    chi => get_coordinates(mesh%get_id())
    panel_id => get_panel_id(mesh%get_id())

    ! Initialise fields for masses of dry air and water species in W3
    call dry_mass%initialise( vector_space = w3_fs )
    call water_mass%initialise( vector_space = w3_fs )

    ! Compute conserved quantities
    call invoke( name = "compute_dry_mass",                                    &
    ! Compute mass of dry air
                 compute_total_mass_kernel_type(dry_mass, rho, chi,            &
                                                panel_id, qr),                 &
                 sum_X(total_dry, dry_mass)                                    &
                )
    do i_mr = 1, nummr
      call invoke( name = "compute_masses_of_moisture_species",                &
      ! Compute mass of i-th moisture species
                   compute_moist_mass_kernel_type(water_mass, mr(i_mr),        &
                                                  rho, chi, panel_id, qr),     &
                   sum_X(total_water_all(i_mr), water_mass)                    &
                 )
    end do

    ! Output diagnostic values to log
    write( log_scratch_space, '(2A,E32.12)' ) &
      'Conservation: dry mass, ', stage, total_dry
    call log_event( log_scratch_space, LOG_LEVEL_INFO )
    do i_mr = 1, nummr
      write( log_scratch_space, '(A,I3,2A,E32.12)' )              &
        'Conservation: mass of water species', i_mr, ', ', stage, &
        total_water_all(i_mr)
        call log_event( log_scratch_space, LOG_LEVEL_INFO )
    end do


    nullify( chi, panel_id, w3_fs )
    if ( subroutine_timers ) call timer('moisture_conservation_alg')

  end subroutine moisture_conservation_alg

end module moisture_conservation_alg_mod
