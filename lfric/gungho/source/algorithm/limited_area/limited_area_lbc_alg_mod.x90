!-----------------------------------------------------------------------------
! (c) Crown copyright 2021 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> @brief   Calculate LBCs and apply blending.
!> @details Use the driving model to calculate the lateral boundary condition
!!          for the mixed solve, and to apply blending.

module limited_area_lbc_alg_mod

  use field_mod,                      only: field_type
  use field_collection_mod,           only: field_collection_type
  use formulation_config_mod,         only: moisture_formulation,    &
                                            moisture_formulation_dry
  use mesh_mod,                       only: mesh_type
  use mr_indices_mod,                 only: nummr, mr_names, imr_v, &
                                            imr_cl, imr_ci, imr_r
  use mesh_mod,                       only: mesh_type
  use limited_area_constants_mod,     only: get_boundary_mask, &
                                            get_blend_mask,    &
                                            get_lbc_mask,      &
                                            get_onion_layers
  use limited_area_masks_alg_mod,     only: rim_width
  use fs_continuity_mod,              only: W2, W3, Wtheta
  use constants_mod,                  only: i_def, str_def, r_def
  use initialization_config_mod,      only: lbc_option,                  &
                                            lbc_option_analytic,         &
                                            lbc_option_gungho_file,      &
                                            lbc_option_um2lfric_file
  implicit none

  private :: blend_field
  public  :: lam_solver_lbc
  public  :: lam_blend_lbc
  public  :: overwrite_blending_zone

contains

  !> @brief   Calculate the linear solve increment on the boundary.
  !> @details This calculates the boundary condition for the mixed solve,
  !!          using the wind field on the cell faces. It is given by the
  !!          difference between the driving model and the current iteration
  !!          of the limited area model, and is written to a field in the
  !!          LBC field collection.
  !> @param[in]     lam_wind_field  Nested model wind field
  !> @param[in,out] lbc_fields      LBC field collection
  subroutine lam_solver_lbc( lam_wind_field, lbc_fields )

    implicit none

    type(field_type), intent(in)               :: lam_wind_field
    type(field_collection_type), intent(inout) :: lbc_fields
    type(field_type)                           :: boundary_u_lam
    type(field_type), pointer                  :: mask
    type(field_type), pointer                  :: boundary_u_driving
    type(field_type), pointer                  :: boundary_u_diff

    type(mesh_type),  pointer :: mesh => null()

    mesh => lam_wind_field%get_mesh()
    mask => get_boundary_mask( W2, mesh%get_id() )

    boundary_u_driving => lbc_fields%get_field( 'boundary_u_driving' )
    boundary_u_diff    => lbc_fields%get_field( 'boundary_u_diff' )

    call boundary_u_driving%copy_field_properties( boundary_u_lam )

    call invoke( &
                 ! Extract the LAM u on the boundary.
                 X_times_Y( boundary_u_lam, &
                            lam_wind_field, &
                            mask ),         &

                 ! Calculate the difference from the driving model.
                 X_minus_Y( boundary_u_diff,    &
                            boundary_u_driving, &
                            boundary_u_lam ) )

    nullify( mask, mesh, boundary_u_driving, boundary_u_diff )

  end subroutine lam_solver_lbc

  !> @brief   Set up the blending of the LAM data with the driving model.
  !> @details Loop over the prognostic fields on the current iteration, for
  !!          the LAM model, which need to be blended. Link to
  !!          the corresponding driving model field, and LBC field collection.
  !> @param[in,out] state_u    Current LAM field for u, wind
  !> @param[in,out] state_p    Current LAM field for p, pressure
  !> @param[in,out] state_d    Current LAM field for d, density
  !> @param[in,out] state_t    Current LAM field for t, temperature
  !> @param[in,out] mr         Current LAM field for mr, mixing ratios
  !> @param[in]     lbc_fields Field collection containing LBC data
  subroutine lam_blend_lbc( state_u, state_p, state_d, state_t, mr, lbc_fields )
    use log_mod,                 only: log_event,         &
                                       LOG_LEVEL_INFO

    implicit none

    type(field_type),            intent(inout) :: state_u, &
                                                  state_p, &
                                                  state_d, &
                                                  state_t
    type(field_type),            intent(inout) :: mr(nummr)
    type(field_collection_type), intent(in)    :: lbc_fields
    character(len=*), parameter                :: name_u    = 'lbc_u',     &
                                                  name_p    = 'lbc_exner', &
                                                  name_d    = 'lbc_rho',   &
                                                  name_t    = 'lbc_theta', &
                                                  name_m_v  = 'lbc_m_v',   &
                                                  name_m_cl = 'lbc_m_cl',  &
                                                  name_m_ci = 'lbc_m_ci',  &
                                                  name_m_r  = 'lbc_m_r'
    character(str_def)                         :: name_mr
    integer(i_def)                             :: imr


    select case( lbc_option )
    case ( lbc_option_analytic, lbc_option_gungho_file )
      ! For analytic LBCs we relax back the full prognostic fields
      call log_event( "Blending analytic LBC data...", LOG_LEVEL_INFO )

      call blend_field( state_u, lbc_fields, name_u )
      call blend_field( state_p, lbc_fields, name_p )
      call blend_field( state_d, lbc_fields, name_d )
      call blend_field( state_t, lbc_fields, name_t )

      if ( moisture_formulation /= moisture_formulation_dry ) then
        do imr = 1, nummr
          name_mr = trim( 'lbc_' // adjustl(mr_names (imr)) )
          call blend_field( mr(imr), lbc_fields, name_mr )
        enddo
      end if

    case ( lbc_option_um2lfric_file )
      ! For LBCs from a UM driving file, we only have
      ! a subset of moisture fields
      call log_event( "Blending um2lfric LBC data...", LOG_LEVEL_INFO )

      call blend_field( state_u, lbc_fields, name_u )
      call blend_field( state_p, lbc_fields, name_p )
      call blend_field( state_d, lbc_fields, name_d )
      call blend_field( state_t, lbc_fields, name_t )

      call blend_field( mr(imr_v), lbc_fields, name_m_v )
      call blend_field( mr(imr_cl), lbc_fields, name_m_cl )
      call blend_field( mr(imr_ci), lbc_fields, name_m_ci )
      call blend_field( mr(imr_r), lbc_fields, name_m_r )
    end select

  end subroutine lam_blend_lbc


  !> @brief   Overwrite field data with another field data in the defined
  !>          blending zone for a given depth (in cells) from the edge of
  !>          the domain.
  !> @param[in,out] lam_field   LAM field to be modified.
  !> @param[in]     fill_field  field containing data to update lam_field
  !> @param[in]     depth       depth to which field is overwritten
  subroutine overwrite_blending_zone(lam_field, fill_field, depth)

    use splice_fields_kernel_mod, only: splice_fields_kernel_type
    implicit none

    type(field_type), intent(inout)  :: lam_field
    type(field_type), intent(in)     :: fill_field
    integer(kind=i_def), intent(in)  :: depth
    type(field_type), pointer        :: onion_layers => null()
    type(mesh_type),  pointer        :: mesh => null()
    integer(kind=i_def)              :: fs_enum
    real(r_def) :: threshold

    ! Define the function space required for masks.
    fs_enum =  lam_field%which_function_space()
    mesh    => lam_field%get_mesh()

    onion_layers => get_onion_layers()

    ! For example given onion layers:
    !  _ _ _ _ _
    ! |5 5 5 5 5 5
    ! |5 4 4 4 4 4
    ! |5 4 3 3 3 3
    ! |5 4 3 2 2 2
    ! |5 4 3 2 1 1
    ! |5 4 3 2 1 0
    !
    ! which is associated with rim_width=5 (where the rim_width is
    ! the total depth of the blending zone)
    !
    ! With depth=2 this gives a threshold of 3 and overwrites
    ! the following cells marked with a 'X'
    !  _ _ _ _ _
    ! |X X X X X
    ! |X X X X X
    ! |X X 0 0 0
    ! |X X 0 0 0
    ! |X X 0 0 0
    !
    threshold = rim_width - depth - epsilon(1.0_r_def)

    call invoke( splice_fields_kernel_type( lam_field, fill_field, onion_layers, threshold ) )

  end subroutine overwrite_blending_zone

  !> @brief   Blend the LAM data with the driving model, for a given field.
  !> @details The data around the edge of the domain is overwritten by the
  !!          driving model LBC data using x_new = w * x_driving + (1-w) * x_lam
  !!          where the weights w are defined by the blending masks. Different
  !!          blending masks are used for fields in different function spaces:
  !!          W2, W3 and Wtheta.
  !> @param[in,out] lam_field  Current LAM field to be blended
  !> @param[in]     lbc_fields Field collection containing LBC data
  !> @param[in]     name       Name of the field to select from lbc_fields
  subroutine blend_field(lam_field, lbc_fields, name)

    implicit none

    character(len=*), intent(in)            :: name
    type(field_type), intent(inout)         :: lam_field
    type(field_collection_type), intent(in) :: lbc_fields
    type(field_type), pointer               :: driving_field => null(), &
                                               blend_mask    => null(), &
                                               lbc_mask      => null()
    type(field_type)                        :: lam_lbc, driving_lbc, inc
    integer(kind=i_def)                     :: fs_enum
    type(mesh_type), pointer :: mesh => null()

    ! Define the function space required for masks.
    fs_enum = lam_field%which_function_space()
    mesh    => lam_field%get_mesh()

    driving_field => lbc_fields%get_field( name )
    blend_mask    => get_blend_mask( fs_enum, mesh%get_id() )
    lbc_mask      => get_lbc_mask( fs_enum, mesh%get_id() )

    ! Setup the temporary fields.
    call lam_field%copy_field_properties( lam_lbc )
    call lam_field%copy_field_properties( inc )
    call driving_field%copy_field_properties( driving_lbc )

    ! Apply blending, as follows:
    ! x_blended = (1-w) * x_lam + w * x_driving
    !           = x_lam + w * (x_driving - x_lam)
    ! where w are the blending weights.

    call invoke( &
               ! Calculate x_lam (The LAM field in the boundary region).
               ! This is just extracting the LAM field in the LBC region.
               ! It ensures that the code still works if e.g. the blending
               ! mask is not applied.
               X_times_Y( lam_lbc, lam_field, lbc_mask ), &

               X_times_Y( driving_lbc, driving_field, lbc_mask ), &

               ! Calculate x_driving - x_lam (The LBC increment).
               X_minus_Y( inc, driving_lbc, lam_lbc ),   &

               ! Calculate w * (x_driving - x_lam) (Weight the increment).
               inc_X_times_Y( inc, blend_mask ),          &

               ! Add weighted increment back on to the state.
               inc_X_plus_Y( lam_field, inc ) )

    nullify( driving_field, blend_mask, lbc_mask, mesh )

  end subroutine blend_field

end module limited_area_lbc_alg_mod
