!-----------------------------------------------------------------------------
! (c) Crown copyright 2021 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> @brief Reconstruct a W3 field at W2 points for use in the transport scheme.
!> @todo There are number of workarounds in this algorithm for aspects which
!!       aren't yet supported by PSyclone/LFRic:
!!       1. Issue #868 Multidata fields are not natively supported in PSyclone.
!!                     Currently we treat these as normal fields but need to
!!                     additionally pass in ndata_h or ndata_v to the kernels
!!                     as extra integer arguments.
!!       2. Issue #1246 Region stencils require both the global maximum size of
!!                      the stencil and local column size of the stencil.
!!                      PSyclone currently only passes in the local size and so
!!                      until this is resolved we also pass in the global maximum
!!                      size as an integer argument.
module reconstruct_w3_field_alg_mod

  use constants_mod,                  only: r_def, i_def, l_def, str_def
  use geometric_constants_mod,        only: get_coordinates,          &
                                            get_panel_id
  use fem_constants_mod,              only: get_rmultiplicity,        &
                                            get_mass_matrix_diagonal
  use field_mod,                      only: field_type
  use finite_element_config_mod,      only: element_order,          &
                                            coord_system,           &
                                            coord_system_xyz
  use fs_continuity_mod,              only: W2, W3, Wtheta
  use function_space_mod,             only: function_space_type
  use poly1d_w3_reconstruction_kernel_mod, &
                                      only: poly1d_w3_reconstruction_kernel_type
  use poly1d_vert_w3_reconstruction_kernel_mod, &
                                      only: poly1d_vert_w3_reconstruction_kernel_type
  use poly1d_flux_coeffs_kernel_mod,  only: poly1d_flux_coeffs_kernel_type
  use poly1d_vert_flux_coeffs_kernel_mod, &
                                      only: poly1d_vert_flux_coeffs_kernel_type
  use poly2d_w3_reconstruction_kernel_mod, &
                                      only: poly2d_w3_reconstruction_kernel_type
  use poly2d_flux_coeffs_kernel_mod,  only: poly2d_flux_coeffs_kernel_type
  use quadrature_rule_gaussian_mod,   only: quadrature_rule_gaussian_type
  use quadrature_xyoz_mod,            only: quadrature_xyoz_type
  use quadrature_face_mod,            only: quadrature_face_type
  use transport_config_mod,           only: operators,            &
                                            fv_horizontal_order,  &
                                            fv_vertical_order,    &
                                            operators_fv,         &
                                            operators_fem,        &
                                            oned_reconstruction
  use runtime_tools_mod,              only: find_mesh_index,   &
                                            check_initialised_field
  use log_mod,                        only: log_event,         &
                                            LOG_LEVEL_ERROR,   &
                                            LOG_LEVEL_INFO
  use mesh_collection_mod,            only: mesh_collection
  use mesh_mod,                       only: mesh_type
  use extrusion_mod,                  only: TWOD
  use transport_enumerated_types_mod, only: direction_v,    &
                                            direction_h,    &
                                            direction_3d
  use polyv_w3_koren_kernel_mod,      only: polyv_w3_koren_kernel_type
  use polyh_w3_koren_kernel_mod,      only: polyh_w3_koren_kernel_type

  implicit none

  private

  logical(kind=l_def) :: variables_allocated = .false.

  integer(kind=i_def), allocatable, target :: flux_stencil_extent_list(:)
  integer(kind=i_def), allocatable, target :: flux_2d_stencil_size_list(:)
  integer(kind=i_def), allocatable, target :: ndata_h_list(:)
  integer(kind=i_def), allocatable, target :: ndata_v_list(:)
  integer(kind=i_def), allocatable, target :: reversible_ndata_v_list(:)
  type(field_type),    allocatable, target :: flux_coeffs_list(:)
  type(field_type),    allocatable, target :: vert_flux_coeffs_list(:)
  type(field_type),    allocatable, target :: reversible_vert_flux_coeffs_list(:)
  public :: reconstruct_w3_field_alg_set_num_meshes
  public :: reconstruct_w3_field_alg_init
  public :: reconstruct_w3_field_alg_final
  public :: reconstruct_w3_field_alg
  public :: get_flux_stencil_extent
  public :: get_flux_2d_stencil_size
  public :: get_flux_ndata_h
  public :: get_flux_ndata_v
  public :: get_reversible_flux_ndata_v
  public :: get_flux_coeffs
  public :: get_vert_flux_coeffs
  public :: reconstruct_koren_w3_field_alg
  public :: get_reversible_vert_flux_coeffs

contains

  !=============================================================================
  !> @brief Allocates the lists of flux coefficients.
  !> @param[in] number_of_meshes Number of meshes to have coefficients on.
  subroutine reconstruct_w3_field_alg_set_num_meshes( number_of_meshes )

    implicit none

    integer(kind=i_def), intent(in) :: number_of_meshes

    ! Allocate the arrays of variables
    if (.not. variables_allocated) then
      if (.not. allocated(flux_stencil_extent_list)) allocate(flux_stencil_extent_list(number_of_meshes))
      if (.not. allocated(flux_2d_stencil_size_list)) allocate(flux_2d_stencil_size_list(number_of_meshes))
      if (.not. allocated(flux_coeffs_list)) allocate(flux_coeffs_list(number_of_meshes))
      if (.not. allocated(vert_flux_coeffs_list)) allocate(vert_flux_coeffs_list(number_of_meshes))
      if (.not. allocated(reversible_vert_flux_coeffs_list)) allocate(reversible_vert_flux_coeffs_list(number_of_meshes))
      if (.not. allocated(ndata_h_list)) allocate(ndata_h_list(number_of_meshes))
      if (.not. allocated(ndata_v_list)) allocate(ndata_v_list(number_of_meshes))
      if (.not. allocated(reversible_ndata_v_list)) allocate(reversible_ndata_v_list(number_of_meshes))
      variables_allocated = .true.
    else
      call log_event('Variables have already been allocated for ' // &
                     'reconstruct_w3_field_alg', LOG_LEVEL_ERROR)
    end if

  end subroutine


  !=============================================================================
  !> @brief Initialises the reconstruction coefficients for a single mesh.
  !!
  !> @details Initialises the reconstruction coefficients and other constants that can
  !!          be pre-computed for a single mesh.
  !!          FV aspects currently only support lowest order elements.
  !!
  !> @param[in] mesh   Mesh to create all fields on
  !!
  subroutine reconstruct_w3_field_alg_init( mesh )

    use fs_continuity_mod,             only: W3
    use function_space_collection_mod, only: function_space_collection
    use reference_element_mod,         only: reference_element_type
    use mesh_mod,                      only: mesh_type
    use geometric_constants_mod,       only: get_height
    use transport_config_mod,          only: reversible

    implicit none

    type(mesh_type), pointer, intent(in) :: mesh

    integer(kind=i_def)         :: mesh_index
    integer(kind=i_def)         :: flux_stencil_size
    integer(kind=i_def)         :: polynomial
    integer(kind=i_def)         :: nfaces_re_h
    integer(kind=i_def)         :: nfaces_re_v
    integer(kind=i_def)         :: flux_2d_stencil_size
    integer(kind=i_def)         :: flux_stencil_extent
    integer(kind=i_def)         :: ndata_h
    integer(kind=i_def)         :: ndata_v
    type(field_type),   pointer :: chi(:) => null()
    type(field_type),   pointer :: panel_id => null()
    type(field_type),   pointer :: md_w3 => null()

    type(quadrature_rule_gaussian_type )   :: gaussian_quadrature

    type(quadrature_xyoz_type)             :: qr
    type(quadrature_face_type)             :: qrf
    type(function_space_type), pointer     :: w3_fs => null()
    type(field_type)                       :: w3_field
    class(reference_element_type), pointer :: reference_element => null()
    integer(kind=i_def)                    :: face_quad_order
    integer(kind=i_def)                    :: nqp_xy, nqp_z, nqp_xyz
    real(kind=r_def)                       :: transform_radius, chi3_max
    type(function_space_type),     pointer :: multidata_fs => null()
    logical(kind=l_def)                    :: horizontal_faces
    logical(kind=l_def)                    :: vertical_faces
    type(field_type),              pointer :: height => null()
    integer(kind=i_def)                    :: vertical_order, nlayers
    type(mesh_type),               pointer :: twod_mesh => null()

    reference_element => mesh%get_reference_element()
    mesh_index = find_mesh_index(mesh%get_id())

    ! Set default values of 0 for the integers to be stored for this mesh,
    ! in case they aren't set below
    flux_stencil_extent = 0_i_def
    flux_2d_stencil_size = 0_i_def
    ndata_h = 0_i_def
    ndata_v = 0_i_def
    nlayers = mesh%get_nlayers()
    twod_mesh => mesh_collection%get_mesh(mesh, TWOD)

    if ( operators == operators_fv ) then
      ! This setup is only needed for FV methods
      if ( element_order == 0_i_def ) then
        ! Compute stencil extents
        flux_stencil_extent = fv_horizontal_order/2_i_def
        !======================================================================!
        ! Compute stencil for nonuniform polynomial fit
        ! Initialise PSy layer arrays (this will not be needed when
        ! multi-dimensional field arrays are supported)
        ! This needs some temporary fields for computing undf in the PSy layer
        w3_fs => function_space_collection%get_fs( mesh, element_order, W3 )
        call w3_field%initialise( vector_space = w3_fs )

        ! Get topology information from the reference element
        ! Number of horizontal neighbours
        nfaces_re_h = reference_element%get_number_horizontal_faces()
        ! Number of vertical neighbours
        nfaces_re_v = reference_element%get_number_vertical_faces()

        if ( oned_reconstruction ) then
          flux_stencil_size = fv_horizontal_order + 1_i_def
        else
          ! Compute the maximum number of cells in the flux stencil
          ! This occurs on a uniform mesh
          ! (this computation is only correct for quadrilateral meshes)
          flux_2d_stencil_size = 1_i_def
          do polynomial = 1, fv_horizontal_order
            if ( mod(polynomial, 2_i_def) == 0_i_def ) then
              flux_2d_stencil_size = flux_2d_stencil_size + nfaces_re_h
            else
              flux_2d_stencil_size = flux_2d_stencil_size + nfaces_re_h*polynomial
            end if
          end do
          flux_stencil_size = flux_2d_stencil_size
        end if

        chi => get_coordinates(mesh%get_id())
        panel_id => get_panel_id(mesh%get_id())

        if ( coord_system == coord_system_xyz ) then
          transform_radius = 0.0_r_def
        else
          ! Compute the smallest surface height of chi(3)
          ! (this is only needed for spherically-based coordinates
          ! Transform radius is minimum height + 1
          call chi(3)%field_minmax(transform_radius, chi3_max)
          transform_radius = 1.0_r_def + abs(transform_radius)
        end if

        nqp_xyz = fv_horizontal_order + 1_i_def
        qr = quadrature_xyoz_type(nqp_xyz, gaussian_quadrature)
        if ( oned_reconstruction ) then
          face_quad_order = 1_i_def
        else
          face_quad_order = fv_horizontal_order + 1_i_def
        end if
        ! Quadrature rule on lateral faces with 1 point in the vertical
        nqp_xy = face_quad_order
        nqp_z  = 1
        horizontal_faces = .true.
        vertical_faces = .false.
        qrf = quadrature_face_type(nqp_xy, nqp_z, horizontal_faces, vertical_faces, &
                                   reference_element, gaussian_quadrature)

        call log_event( "Gungho: computing horizontal flux coeffs", LOG_LEVEL_INFO )

        md_w3 => get_mass_matrix_diagonal(W3, mesh%get_id())
        ! Create multi-data space and field for the horizontal flux coefficients
        ndata_h = nfaces_re_h*flux_stencil_size
        multidata_fs => function_space_collection%get_fs( twod_mesh, element_order, W3, ndata_h )
        ndata_h_list(mesh_index) = ndata_h
        call flux_coeffs_list(mesh_index)%initialise( vector_space = multidata_fs, ndata_first = .false. )

        if ( oned_reconstruction ) then
          call invoke(poly1d_flux_coeffs_kernel_type(                          &
                                                flux_coeffs_list(mesh_index),  &
                                                md_w3,                         &
                                                flux_stencil_extent,           &
                                                chi,                           &
                                                flux_stencil_extent,           &
                                                panel_id,                      &
                                                flux_stencil_extent,           &
                                                ndata_h,                       &
                                                fv_horizontal_order,           &
                                                transform_radius,              &
                                                nlayers,                       &
                                                qr, qrf ) )
        else
          call invoke(poly2d_flux_coeffs_kernel_type(                          &
                                                flux_coeffs_list(mesh_index),  &
                                                md_w3,                         &
                                                flux_stencil_extent,           &
                                                chi,                           &
                                                flux_stencil_extent,           &
                                                panel_id,                      &
                                                flux_stencil_extent,           &
                                                ndata_h,                       &
                                                fv_horizontal_order,           &
                                                flux_2d_stencil_size,          &
                                                transform_radius,              &
                                                nlayers,                       &
                                                qr, qrf) )
        end if

        ! Vertical flux coeffs
        call log_event( "Gungho: computing vertical flux coeffs", LOG_LEVEL_INFO )
        ! Create multi-data space and field for the vertical flux coefficients
        vertical_order = fv_vertical_order
        ndata_v = nfaces_re_v*(vertical_order + 1_i_def)
        ndata_v_list(mesh_index) = ndata_v
        multidata_fs => function_space_collection%get_fs( mesh, element_order, Wtheta, ndata_v )
        call vert_flux_coeffs_list(mesh_index)%initialise( vector_space = multidata_fs, ndata_first = .true. )
        height => get_height(Wtheta, mesh%get_id())
        call invoke(poly1d_vert_flux_coeffs_kernel_type(                       &
                                          vert_flux_coeffs_list(mesh_index),   &
                                          height,                              &
                                          ndata_v,                             &
                                          vertical_order,                      &
                                          qr ) )

        if ( any(reversible) ) then
          ! Compute reversible vertical coefficients
          vertical_order = fv_vertical_order-1
          ndata_v = vertical_order + 1_i_def
          reversible_ndata_v_list(mesh_index) = ndata_v
          multidata_fs => function_space_collection%get_fs( mesh, element_order, Wtheta, ndata_v )
          call reversible_vert_flux_coeffs_list(mesh_index)%initialise( vector_space = multidata_fs, ndata_first = .true. )
          height => get_height(Wtheta, mesh%get_id())
          call invoke(poly1d_vert_flux_coeffs_kernel_type(                                &
                                            reversible_vert_flux_coeffs_list(mesh_index), &
                                            height,                                       &
                                            ndata_v,                                      &
                                            vertical_order,                               &
                                            qr ) )
        end if
        !======================================================================!
      else
        call log_event( "Gungho: subgrid mappings needed for FV MoL with high &
                         order elements", LOG_LEVEL_ERROR )
      end if
    end if

    flux_stencil_extent_list(mesh_index) = flux_stencil_extent
    flux_2d_stencil_size_list(mesh_index) = flux_2d_stencil_size

    nullify( chi, panel_id, md_w3, w3_fs, reference_element, height, twod_mesh )

  end subroutine reconstruct_w3_field_alg_init

  !=============================================================================
  !> @brief Finalises allocatable arrays.
  subroutine reconstruct_w3_field_alg_final()

    implicit none

    if (allocated(ndata_v_list)) deallocate(ndata_v_list)
    if (allocated(reversible_ndata_v_list)) deallocate(reversible_ndata_v_list)
    if (allocated(ndata_h_list)) deallocate(ndata_h_list)
    if (allocated(vert_flux_coeffs_list)) deallocate(vert_flux_coeffs_list)
    if (allocated(reversible_vert_flux_coeffs_list)) deallocate(reversible_vert_flux_coeffs_list)
    if (allocated(flux_coeffs_list)) deallocate(flux_coeffs_list)
    if (allocated(flux_2d_stencil_size_list)) deallocate(flux_2d_stencil_size_list)
    if (allocated(flux_stencil_extent_list)) deallocate(flux_stencil_extent_list)

  end subroutine reconstruct_w3_field_alg_final

  !=============================================================================
  !> @brief Reconstruct a W3 field at W2 points.
  !> @details Reconstruct a W3 field (field_old) at W2 points (field_new) using
  !!          desired spatial reconstruction.
  !!          Options for this are either FE or FV reconstructions.
  !> @param[in,out] field_new  Reconstructed field at W2 points
  !> @param[in]     field_old  Initial W3 field
  !> @param[in]     wind       Advecting wind field to determine upwind direction
  !> @param[in]     direction  Splitting direction (h, v, or 3d) to compute
  !!                           reconstruction
  !> @param[in]     reversible Use the reversible reconstruction
  !> @param[in]     logspace   Carry out interpolation in log space
  subroutine reconstruct_w3_field_alg(field_new, field_old, wind, direction, reversible, logspace)

    use sample_field_kernel_mod, only: sample_field_kernel_type

    implicit none

    type(field_type),              intent(in)    :: field_old, wind
    type(field_type),              intent(inout) :: field_new
    integer(kind=i_def),           intent(in)    :: direction
    logical(kind=l_def),           intent(in)    :: reversible
    logical(kind=l_def), optional, intent(in)    :: logspace

    type(mesh_type), pointer :: mesh => null()
    integer(kind=i_def) :: mesh_index
    logical(kind=l_def) :: logspace_loc
    integer(kind=i_def) :: stencil_extent

    integer(kind=i_def), pointer :: flux_stencil_extent => null()
    integer(kind=i_def), pointer :: flux_2d_stencil_size => null()
    integer(kind=i_def), pointer :: ndata_h => null()
    integer(kind=i_def), pointer :: ndata_v => null()
    type(field_type),    pointer :: flux_coeffs => null()
    type(field_type),    pointer :: vert_flux_coeffs => null()
    type(field_type),    pointer :: w2_rmultiplicity => null()
    integer(kind=i_def)          :: vertical_order

    ! Psyclone doesn't support the passing of logicals to kernels
    ! so we have to set up an integer instead
    logspace_loc = .false.
    if ( present(logspace) ) then
      logspace_loc = logspace
    end if

    mesh => field_new%get_mesh()

    select case(operators)

      case default
        call log_event( "Gungho: Unrecognized option for operator.", LOG_LEVEL_ERROR )

      case(operators_fv)
        mesh_index = find_mesh_index(mesh%get_id())

        ! Set default value to be 0 and then update the mass flux
        ! in cases where the wind is nonzero using an upwind reconstruction
        call invoke( setval_c( field_new, 0.0_r_def) )

        if ( direction==direction_h .or. direction==direction_3d ) then

          ! Get extents and data sizes for this mesh
          flux_stencil_extent => flux_stencil_extent_list(mesh_index)
          flux_2d_stencil_size => flux_2d_stencil_size_list(mesh_index)
          ndata_h => ndata_h_list(mesh_index)
          flux_coeffs => flux_coeffs_list(mesh_index)

          if ( oned_reconstruction ) then
            ! Use 1d flux reconstruction
            call invoke( name="W3_1dh_reconstruction", &
                         poly1d_w3_reconstruction_kernel_type( field_new, wind, field_old, &
                                                               flux_stencil_extent,        &
                                                               flux_coeffs,                &
                                                               fv_horizontal_order,        &
                                                               ndata_h ) )
         else
           ! Use 2d flux reconstruction
           stencil_extent = fv_horizontal_order / 2_i_def
           call invoke( name="W3_2dh_reconstruction", &
                        poly2d_w3_reconstruction_kernel_type( field_new, wind, field_old, &
                                                              stencil_extent,             &
                                                              flux_coeffs,                &
                                                              ndata_h,                    &
                                                              flux_2d_stencil_size) )
         end if
       end if
       if ( direction==direction_v .or. direction==direction_3d ) then
          ! Compute vertical components of mass flux
          if ( reversible ) then
            ndata_v => reversible_ndata_v_list(mesh_index)
            vert_flux_coeffs => reversible_vert_flux_coeffs_list(mesh_index)
            vertical_order = fv_vertical_order - 1_i_def
          else
            ndata_v => ndata_v_list(mesh_index)
            vert_flux_coeffs => vert_flux_coeffs_list(mesh_index)
            vertical_order = fv_vertical_order
          end if
          call invoke(name="W3_1dv_reconstruction", &
                        poly1d_vert_w3_reconstruction_kernel_type( field_new, wind, field_old, &
                                                                   vert_flux_coeffs,           &
                                                                   ndata_v,                    &
                                                                   vertical_order,             &
                                                                   logspace_loc) )
        end if
      case(operators_fem)
        ! Sample field_old at W2 points
        w2_rmultiplicity => get_rmultiplicity(W2, mesh%get_id())
        call invoke( setval_c(field_new, 0.0_r_def), &
                     sample_field_kernel_type(field_new, w2_rmultiplicity, field_old) )

    end select

    nullify( flux_stencil_extent,  &
             flux_2d_stencil_size, &
             ndata_h,              &
             ndata_v,              &
             flux_coeffs,          &
             vert_flux_coeffs,     &
             w2_rmultiplicity,     &
             mesh )

  end subroutine reconstruct_w3_field_alg

  !=============================================================================
  !> @brief Reconstruct a W3 field at W2 points using the Koren scheme.
  !> @details Reconstruct a W3 field (field_old) at W2 points (field_new) using
  !!          the Koren scheme.
  !!          Options for this are either FE or FV reconstructions.
  !> @param[in,out] field_new Reconstructed field at W2 points
  !> @param[in]     field_old Initial W3 field
  !> @param[in]     wind      Advecting wind field to determine upwind direction
  !> @param[in]     direction Splitting direction (h, v, or 3d) to compute
  !!                          reconstruction
  !> @param[in]     logspace  Carry out interpolation in log space
  subroutine reconstruct_koren_w3_field_alg(field_new, field_old, wind, direction, logspace)

    use sample_field_kernel_mod, only: sample_field_kernel_type

    implicit none

    type(field_type),              intent(in)    :: field_old, wind
    type(field_type),              intent(inout) :: field_new
    integer(kind=i_def),           intent(in)    :: direction
    logical(kind=l_def), optional, intent(in)    :: logspace

    integer(kind=i_def) :: mesh_id
    integer(kind=i_def) :: mesh_index
    logical(kind=l_def) :: logspace_loc

    integer(kind=i_def), pointer :: flux_stencil_extent => null()
    integer(kind=i_def), pointer :: ndata_h => null()
    integer(kind=i_def), pointer :: ndata_v => null()
    type(field_type),    pointer :: w2_rmultiplicity => null()

    ! Psyclone doesn't support the passing of logicals to kernels
    ! so we have to set up an integer instead
    logspace_loc = .false.
    if ( present(logspace) ) then
      logspace_loc = logspace
    end if

    mesh_id = field_new%get_mesh_id()


    select case(operators)

      case default
        call log_event( "Gungho: Unrecognized option for operator.", LOG_LEVEL_ERROR )

      case(operators_fv)
        mesh_index = find_mesh_index(mesh_id)

        ! Get extents and data sizes for this mesh
        flux_stencil_extent => flux_stencil_extent_list(mesh_index)
        ndata_h => ndata_h_list(mesh_index)
        ndata_v => ndata_v_list(mesh_index)

        ! Set default value to be 0 and then update the mass flux
        ! in cases where the wind is nonzero using an upwind reconstruction
        call invoke( setval_c( field_new, 0.0_r_def) )
        if ( direction==direction_h .or. direction==direction_3d ) then
            call invoke( name="W3_koren_hor_reconstruction",                &
                         polyh_w3_koren_kernel_type( field_new,             &
                                                     wind,                  &
                                                     field_old,             &
                                                     flux_stencil_extent,   &
                                                     ndata_h ) )
        end if
        if ( direction==direction_v .or. direction==direction_3d ) then
         ! Compute vertical components of mass flux with the koren scheme
          call invoke(name="W3_vert_reconstruction_koren",                    &
                      polyv_w3_koren_kernel_type( field_new,                  &
                                                  wind,                       &
                                                  field_old,                  &
                                                  ndata_v,                    &
                                                  logspace_loc) )
       end if
      case(operators_fem)
        ! Sample field_old at W2 points
        w2_rmultiplicity => get_rmultiplicity(W2, mesh_id)
        call invoke( setval_c(field_new, 0.0_r_def), &
                     sample_field_kernel_type(field_new, w2_rmultiplicity, field_old) )

    end select

    nullify(flux_stencil_extent,  &
            ndata_h,              &
            ndata_v,              &
            w2_rmultiplicity      &
            )

  end subroutine reconstruct_koren_w3_field_alg

  !> @brief Returns a pointer to the flux stencil extent
  !> @param[in] mesh_id the ID of the mesh to get the object for
  !> @return The flux stencil extent
  function get_flux_stencil_extent(mesh_id) result(flux_stencil_extent)
    implicit none
    integer(kind=i_def), intent(in) :: mesh_id
    integer(kind=i_def)             :: mesh_index
    integer(kind=i_def),    pointer :: flux_stencil_extent

    mesh_index = find_mesh_index(mesh_id)
    flux_stencil_extent => flux_stencil_extent_list(mesh_index)

  end function get_flux_stencil_extent

  !> @brief Returns a pointer to the flux 2D stencil size
  !> @param[in] mesh_id the ID of the mesh to get the object for
  !> @return The flux 2D stencil size
  function get_flux_2d_stencil_size(mesh_id) result(flux_stencil_size)
    implicit none
    integer(kind=i_def), intent(in) :: mesh_id
    integer(kind=i_def)             :: mesh_index
    integer(kind=i_def),    pointer :: flux_stencil_size

    mesh_index = find_mesh_index(mesh_id)
    flux_stencil_size => flux_2d_stencil_size_list(mesh_index)

  end function get_flux_2d_stencil_size

  !> @brief Returns a pointer to the number of horizontal data points
  !> @param[in] mesh_id the ID of the mesh to get the object for
  !> @return The ndata_h integer
  function get_flux_ndata_h(mesh_id) result(ndata_h)
    implicit none
    integer(kind=i_def), intent(in) :: mesh_id
    integer(kind=i_def)             :: mesh_index
    integer(kind=i_def),    pointer :: ndata_h

    mesh_index = find_mesh_index(mesh_id)
    ndata_h => ndata_h_list(mesh_index)

  end function get_flux_ndata_h

  !> @brief Returns a pointer to the number of vertical data points
  !> @param[in] mesh_id the ID of the mesh to get the object for
  !> @return The ndata_v integer
  function get_flux_ndata_v(mesh_id) result(ndata_v)
    implicit none
    integer(kind=i_def), intent(in) :: mesh_id
    integer(kind=i_def)             :: mesh_index
    integer(kind=i_def),    pointer :: ndata_v

    mesh_index = find_mesh_index(mesh_id)
    ndata_v => ndata_v_list(mesh_index)

  end function get_flux_ndata_v

  !> @brief Returns a pointer to the number of reversible vertical data points
  !> @param[in] mesh_id the ID of the mesh to get the object for
  !> @return The ndata_v integer
  function get_reversible_flux_ndata_v(mesh_id) result(ndata_v)
    implicit none
    integer(kind=i_def), intent(in) :: mesh_id
    integer(kind=i_def)             :: mesh_index
    integer(kind=i_def),    pointer :: ndata_v

    mesh_index = find_mesh_index(mesh_id)
    ndata_v => reversible_ndata_v_list(mesh_index)

  end function get_reversible_flux_ndata_v

  !> @brief Returns a pointer to the flux coefficients
  !> @param[in] mesh_id the ID of the mesh to get the object for
  !> @return The flux coefficients field
  function get_flux_coeffs(mesh_id) result(flux_coeffs)
    implicit none
    integer(kind=i_def), intent(in) :: mesh_id
    integer(kind=i_def)             :: mesh_index
    type(field_type),       pointer :: flux_coeffs
    character(str_def)              :: field_name

    mesh_index = find_mesh_index(mesh_id)
    field_name = 'flux_coeffs'
    flux_coeffs => flux_coeffs_list(mesh_index)
    call check_initialised_field(flux_coeffs, field_name, mesh_id)

  end function get_flux_coeffs

  !> @brief Returns a pointer to the vertical flux coefficients
  !> @param[in] mesh_id the ID of the mesh to get the object for
  !> @return The vertical flux coefficient field
  function get_vert_flux_coeffs(mesh_id) result(vert_flux_coeffs)
    implicit none
    integer(kind=i_def), intent(in) :: mesh_id
    integer(kind=i_def)             :: mesh_index
    type(field_type),       pointer :: vert_flux_coeffs
    character(str_def)              :: field_name

    mesh_index = find_mesh_index(mesh_id)
    field_name = 'vert_flux_coeffs'
    vert_flux_coeffs => vert_flux_coeffs_list(mesh_index)
    call check_initialised_field(vert_flux_coeffs, field_name, mesh_id)
  end function get_vert_flux_coeffs

  !> @brief Returns a pointer to the reversible vertical flux coefficients
  !> @param[in] mesh_id the ID of the mesh to get the object for
  !> @return The vertical flux coefficient field
  function get_reversible_vert_flux_coeffs(mesh_id) result(vert_flux_coeffs)
    implicit none
    integer(kind=i_def), intent(in) :: mesh_id
    integer(kind=i_def)             :: mesh_index
    type(field_type),       pointer :: vert_flux_coeffs
    character(str_def)              :: field_name

    mesh_index = find_mesh_index(mesh_id)
    field_name = 'reversible_vert_flux_coeffs'
    vert_flux_coeffs => reversible_vert_flux_coeffs_list(mesh_index)
    call check_initialised_field(vert_flux_coeffs, field_name, mesh_id)
  end function get_reversible_vert_flux_coeffs

end module reconstruct_w3_field_alg_mod
