!-----------------------------------------------------------------------------
! (c) Crown copyright 2021 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!> @brief Contains routine for advecting (advection-form) fields using MOL.

module mol_advective_alg_mod

  use constants_mod,                  only: r_def, i_def, l_def
  use field_mod,                      only: field_type
  use runge_kutta_init_mod,           only: get_rk_transport_weights
  use io_config_mod,                  only: subroutine_timers
  use timer_mod,                      only: timer
  use advective_increment_alg_mod,    only: advective_increment_alg
  use mesh_mod,                       only: mesh_type
  use transport_metadata_mod,         only: transport_metadata_type
  use transport_runtime_alg_mod,      only: transport_runtime_type
  use transport_runtime_collection_mod, &
                                      only: get_transport_runtime
  use transport_config_mod,           only: runge_kutta_method
  use enforce_lower_bound_kernel_mod, only: enforce_lower_bound_kernel_type
  use boundaries_config_mod,          only: limited_area, transport_boundary_depth
  use limited_area_lbc_alg_mod,       only: overwrite_blending_zone
  use base_mesh_config_mod,           only: topology, topology_non_periodic

  implicit none

  public  :: mol_advective_alg

contains

  !> @brief Advecting a field with the MOL scheme.
  !> @details Performs a whole time step advection, i.e., solving the advection
  !!          (non-conservative) equation with the specified options
  !!          in the transport_metadata.
  !> @param[in,out] field_np1   Field at the end of the time step
  !> @param[in]     field       Field at the start of the transport step
  !> @param[in]     direction   Direction of advection (vertical, horizontal, or 3d)
  !> @param[in]     transport_metadata
  !!                         Contains the configuration options for transporting these fields
  subroutine mol_advective_alg( field_np1, field, direction, transport_metadata)

    implicit none

    type(field_type),              intent(inout) :: field_np1
    type(field_type),              intent(in)    :: field
    integer(i_def),                intent(in)    :: direction
    type(transport_metadata_type), intent(in)    :: transport_metadata

    logical(l_def)   :: logspace
    integer(i_def)   :: monotonicity
    type(field_type) :: rhs, field_n
    integer(i_def)   :: mesh_id

    type(field_type), pointer     :: advecting_wind => null()
    type(field_type), allocatable :: rk_field(:)
    integer(i_def)                :: stage, s
    integer(i_def)                :: nstage, substeps
    real(r_def), allocatable      :: rk_weights(:,:)
    type(field_type)              :: rhs_field
    type(mesh_type),      pointer :: mesh => null()
    type(transport_runtime_type), pointer :: transport_runtime => null()

    integer(i_def) :: number_substeps
    real(r_def)    :: dt_substep
    logical(l_def) :: enforce_min_value
    real(r_def)    :: min_value
    logical(l_def) :: use_reversible_scheme

    if ( subroutine_timers ) call timer('mol_advective_alg')

    ! get the stuff needed by the advection algorithm
    mesh_id = field%get_mesh_id()

    ! Get transport_runtime
    mesh => field%get_mesh()
    transport_runtime => get_transport_runtime(mesh)

    number_substeps = transport_runtime%get_number_substeps(mesh_id,direction,transport_metadata%get_splitting())
    dt_substep      = transport_runtime%get_dt_substep(mesh_id,direction,transport_metadata%get_splitting())
    advecting_wind  => transport_runtime%get_advecting_wind(mesh_id)

    logspace     = transport_metadata%get_log_space()
    monotonicity = transport_metadata%get_monotone()
    enforce_min_value = transport_metadata%get_enforce_min_value()

    call rhs%initialise(field%get_function_space())
    call field_n%initialise(field%get_function_space())

    call field%copy_field(field_np1)

    call get_rk_transport_weights(nstage, rk_weights, runge_kutta_method)
    allocate( rk_field(nstage) )

    do stage = 1, nstage
      call rk_field(stage)%initialise( field%get_function_space() )
    end do
    call rhs_field%initialise( field%get_function_space() )

    ! Perform the number of rk-stages and substeps required
    substep_loop: do substeps = 1, number_substeps

      ! Reset field_n ready for the this substep
      call field_np1%copy_field(field_n)

      use_reversible_scheme = .false.

      stage_loop: do stage = 1, nstage

        if ( stage == nstage .and. transport_metadata%get_reversible() ) &
          use_reversible_scheme= .true.

        ! Compute the field for this stage:
        ! rhs_field = sum(s=1,stage): a(stage,s)*field^(s)
        call invoke( setval_X( rk_field(stage), field_np1 ), &
                     setval_c( rhs_field, 0.0_r_def ) )
        do s = 1, stage
          call invoke( inc_X_plus_bY( rhs_field, rk_weights(stage,s), rk_field(s) ) )
        end do

        ! Compute update: rhs = u.grad(rhs_field)
        call advective_increment_alg(rhs, rhs_field,                   &
                                     advecting_wind, dt_substep,       &
                                     direction, use_reversible_scheme, &
                                     monotonicity=monotonicity,        &
                                     logspace=logspace)

        ! Update field: f = f^n - dt_substep*rhs
        call invoke( X_minus_bY(field_np1, field_n, dt_substep, rhs) )

        if ( limited_area .and. topology == topology_non_periodic ) then
          ! This code is required while LAMs loop over cells right up to
          ! the edge of a limited area domain.  It can be removed if
          ! we only loop over columns in the interior domain.

          ! Don't update the field near the edge of the domain. A depth of 1 is chosen
          ! here to avoid problems right at the lateral boundary edge,
          ! but ticket #3112 will investigate further options.
          call overwrite_blending_zone(field_np1, field_n, depth=1)
        end if

      end do stage_loop

      if ( limited_area .and. topology == topology_non_periodic ) then
        ! This code is required while LAMs loop over cells right up to
        ! the edge of a limited area domain.  It can be removed if
        ! we only loop over columns in the interior domain.

        ! Don't update the field near the edge of the domain. A configurable depth of using
        ! the transport_boundary_depth is chosen here.  This will depend
        ! on the number of RK stages and spatial reconstruction order.
        ! Ticket #3112 will investigate further options.
        call overwrite_blending_zone(field_np1, field_n, depth=transport_boundary_depth)
      end if

    end do substep_loop

    ! Enforce a min value if required
    if ( enforce_min_value ) then
       min_value = transport_metadata%get_min_value()
       call invoke( enforce_lower_bound_kernel_type(field_np1, min_value) )
    end if

    nullify( advecting_wind, mesh, transport_runtime )
    if ( allocated( rk_field ) ) deallocate( rk_field )
    if ( allocated( rk_weights ) ) deallocate( rk_weights )

    if ( subroutine_timers ) call timer('mol_advective_alg')

  end subroutine mol_advective_alg

end module mol_advective_alg_mod
