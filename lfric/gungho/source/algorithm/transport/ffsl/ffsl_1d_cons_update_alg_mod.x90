!-----------------------------------------------------------------------------
! (C) Crown copyright 2021 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!> @brief Algorithm which updates rho using rho_n - dt * div(mass_flux).
!> @details This conservative update is used when the mass_flux is for
!!          a variable that has not been previously advected.
module ffsl_1d_cons_update_alg_mod

  use constants_mod,               only: i_def, r_def
  use dg_matrix_vector_kernel_mod, only: dg_matrix_vector_kernel_type
  use field_mod,                   only: field_type
  use flux_direction_mod,          only: x_direction
  use function_space_mod,          only: function_space_type
  use operator_mod,                only: operator_type
  use psykal_lite_mod,             only: invoke_fv_divergence
  use fem_constants_mod,           only: get_inverse_w3_mass_matrix

  implicit none

  private
  public :: ffsl_1d_cons_update_alg

contains

  !> @brief Algorithm which updates rho using rho_n - dt * div(mass_flux).
  !> @details  Inputs are the mass flux and rho at time level n. Output is rho at
  !!           time level n+1. The divergence of the mass flux is calculated and
  !!           multiplied by dt and added to the density rho at time n. The divergence
  !!           term is divided by det J at the W3 dofs.
  !> @param[in]     rho_n             Density at time n
  !> @param[in]     mass_flux         Mass flux
  !> @param[in,out] rho               Density at time n+1
  !> @param[in]     cell_orientation  Orientation of cells, in particular halo cells
  !> @param[in]     direction         Direction of density update (x or y)
  !> @param[in]     dt                The model timestep length
  subroutine ffsl_1d_cons_update_alg(  rho_n,            &
                                       mass_flux,        &
                                       rho,              &
                                       cell_orientation, &
                                       direction,        &
                                       dt )

    implicit none

    type(field_type),    intent(in)     :: rho_n
    type(field_type),    intent(in)     :: mass_flux
    type(field_type),    intent(inout)  :: rho
    type(field_type),    intent(in)     :: cell_orientation
    integer(i_def),      intent(in)     :: direction
    real(r_def),         intent(in)     :: dt

    type(function_space_type), pointer  :: rho_n_fs  => null()
    type(operator_type),       pointer  :: mm_w3_inv => null()

    type( field_type )                  :: mass_divergence
    type( field_type )                  :: divergence_term

    rho_n_fs => rho_n%get_function_space()

    call mass_divergence%initialise( vector_space = rho_n_fs )
    call divergence_term%initialise( vector_space = rho_n_fs )

    call invoke_fv_divergence(mass_divergence,mass_flux,mass_flux,     &
                                                    cell_orientation, direction)

    mm_w3_inv => get_inverse_w3_mass_matrix(rho%get_mesh_id())
    call invoke( dg_matrix_vector_kernel_type( divergence_term, &
                                               mass_divergence, &
                                               mm_w3_inv ),     &
                 X_minus_bY( rho, rho_n, dt, divergence_term ) )

    nullify(mm_w3_inv)
    nullify(rho_n_fs)

  end subroutine ffsl_1d_cons_update_alg

end module ffsl_1d_cons_update_alg_mod
