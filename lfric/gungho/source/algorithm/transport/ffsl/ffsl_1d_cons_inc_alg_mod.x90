!-----------------------------------------------------------------------------
! (c) Crown copyright 2021 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!> @brief Algorithm which computes the increment -dt*div(mass_flux).
!> @details This conservative update is used when the mass_flux is for
!!          a variable that has been previously advected, and so takes into
!!          account the direction at cubed sphere panel edges.

module ffsl_1d_cons_inc_alg_mod

  use constants_mod,                     only: i_def, LARGE_REAL_NEGATIVE
  use field_mod,                         only: field_type
  use psykal_lite_mod,                   only: invoke_fv_divergence
  use dg_matrix_vector_kernel_mod,       only: dg_matrix_vector_kernel_type
  use operator_mod,                      only: operator_type
  use fem_constants_mod,                 only: get_inverse_w3_mass_matrix
  use flux_direction_mod,                only: x_direction

  implicit none

  private
  public :: ffsl_1d_cons_inc_alg

contains

  !> @brief Algorithm which computes the increment -dt*div(mass_flux).
  !> @details  This algorithm is used for the flux form semi-Lagrangian (FFSL)
  !!           update where mass fluxes in the x and y directions are provided.
  !!           Both mass fluxes are needed so that the routine correctly handles
  !!           the direction at cubed sphere panel edges.
  !!           To ensure that the correct divergence is calculated the mass flux
  !!           is multiplied by the detJ values calculated at the W2 dofs.
  !!           The calculated div term is then divided by the detJ values
  !!           calculated at the W3 dofs, where density (rho) is located.
  !!           The divergence term is calculated by a simple difference of the
  !!           flux on opposite faces.
  !> @param[in,out] increment        Density increment
  !> @param[in]     mass_flux_x      Mass flux in y direction
  !> @param[in]     mass_flux_y      Mass flux in x direction
  !> @param[in]     cell_orientation Orientation of cells
  !> @param[in]     direction        Direction in which divergence update is performed
  !> @param[in]     detj_at_w2       DetJ values located at W2 dofs (lowest order)
  subroutine ffsl_1d_cons_inc_alg( increment,        &
                                   mass_flux_x,      &
                                   mass_flux_y,      &
                                   cell_orientation, &
                                   direction,        &
                                   detj_at_w2 )

    implicit none

    type(field_type), intent(inout) :: increment
    type(field_type), intent(in)    :: mass_flux_x
    type(field_type), intent(in)    :: mass_flux_y
    type(field_type), intent(in)    :: detj_at_w2
    type(field_type), intent(in)    :: cell_orientation
    integer(i_def),   intent(in)    :: direction

    type(field_type)                :: div_temp
    type(field_type)                :: mass_flux_mult_x, mass_flux_mult_y
    type(operator_type), pointer    :: m3_inv => null()

    m3_inv => get_inverse_w3_mass_matrix(increment%get_mesh_id())
    call div_temp%initialise( vector_space = increment%get_function_space() )
    call mass_flux_mult_x%initialise( vector_space = detj_at_w2%get_function_space() )
    call mass_flux_mult_y%initialise( vector_space = detj_at_w2%get_function_space() )

    call invoke( setval_c(div_temp, LARGE_REAL_NEGATIVE),              &
    ! Multiply mass flux by detJ at W2 dofs
                 X_times_Y(mass_flux_mult_x, mass_flux_x, detj_at_w2), &
                 X_times_Y(mass_flux_mult_y, mass_flux_y, detj_at_w2)  )

    ! Calculate divergence in either x or y direction using finite-volume divergence
    ! Pass in both x and y direction fluxes. These variables are kept together
    ! in order that halo exchange which takes into account panel orientation can
    ! be performed in the future.
    call invoke_fv_divergence(div_temp,mass_flux_mult_x,mass_flux_mult_y,     &
                                                    cell_orientation, direction)

    ! Divide the divergence by detJ values at W3 dofs
    call invoke( dg_matrix_vector_kernel_type(increment, div_temp, m3_inv) )

    nullify( m3_inv )

  end subroutine ffsl_1d_cons_inc_alg

end module ffsl_1d_cons_inc_alg_mod
