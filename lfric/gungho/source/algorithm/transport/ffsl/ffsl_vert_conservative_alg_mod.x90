!-----------------------------------------------------------------------------
! (C) Crown copyright 2021 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!> @brief Calculates the mass flux in the vertical using FFSL.

module ffsl_vert_conservative_alg_mod

  ! Constants etc.
  use constants_mod,             only: r_def
  use field_mod,                 only: field_type
  use function_space_mod,        only: function_space_type
  use geometric_constants_mod,   only: get_dz_w3
  use log_mod,                   only: log_event, &
                                       LOG_LEVEL_ERROR

  ! Configuration
  use subgrid_config_mod,        only: rho_approximation,                      &
                                       rho_approximation_constant_subgrid,     &
                                       rho_approximation_constant_positive,    &
                                       rho_approximation_ppm_no_limiter,       &
                                       rho_approximation_ppm_positive_only,    &
                                       rho_approximation_ppm_positive_monotone

  ! Kernels
  use ffsl_vertical_flux_kernel_mod,  &
                                 only: ffsl_vertical_flux_kernel_type
  use vert_ppm_no_limiter_kernel_mod, &
                                 only: vert_ppm_no_limiter_kernel_type

  implicit none

  private
  public :: ffsl_vert_conservative_alg

contains

  !> @brief Calculates the mass flux in the vertical using FFSL.
  !> @details The algorithm outputs the mass flux in the vertical calculated
  !!          using the flux form semi-Lagrangian (FFSL) scheme given the
  !!          vertical departure points and the density field at
  !!          timestep n. A positive mass flux in the z direction refers to an
  !!          upward flow (i.e. positive z direction with outward normal).
  !> @param[out] mass_flux_z   Mass flux in z direction used to update density
  !> @param[in]  rho           Density at time level n
  !> @param[in]  dep_pts       Vertical departure points
  !> @param[in]  dt            Timestep length
  subroutine ffsl_vert_conservative_alg(  mass_flux_z, &
                                          rho,         &
                                          dep_pts,     &
                                          dt )

    implicit none

    type(field_type), intent(inout) :: mass_flux_z
    type(field_type), intent(in)    :: rho
    type(field_type), intent(in)    :: dep_pts
    real(r_def),      intent(in)    :: dt

    type(field_type) :: a0, a1, a2
    type(function_space_type), pointer :: w3_fs => null()
    type(field_type),          pointer :: dz_w3 => null()

    w3_fs => rho%get_function_space()

    call a0%initialise( vector_space = w3_fs )
    call a1%initialise( vector_space = w3_fs )
    call a2%initialise( vector_space = w3_fs )

    ! Calculate a0, a1 and a2 which are coefficients of subgrid representation
    ! of density where rho(x) = a0 + a1*x+a2*x**2 with 0<x<1.
    select case(rho_approximation)
      case (rho_approximation_constant_subgrid)
        call invoke( setval_X(a0, rho),       &
                     setval_c(a1, 0.0_r_def), &
                     setval_c(a2, 0.0_r_def) )
      case (rho_approximation_ppm_no_limiter)
        dz_w3 => get_dz_w3(rho%get_mesh_id())
        call invoke( vert_ppm_no_limiter_kernel_type(a0, a1, a2, rho, dz_w3) )
        nullify( dz_w3 )
      case (rho_approximation_constant_positive, &
            rho_approximation_ppm_positive_only, &
            rho_approximation_ppm_positive_monotone)
        call log_event( "Error: this method has not yet been committed to trunk, see #1311", LOG_LEVEL_ERROR )
      case default
        call log_event( "Error: rho_approximation method not recognised", LOG_LEVEL_ERROR )
    end select

    ! Calculate mass flux in one-dimesion.
    ! The integral summation allows for CFL values larger than 1.0.
    call invoke( ffsl_vertical_flux_kernel_type(mass_flux_z, dep_pts, rho, a0, a1, a2, dt) )

    nullify( w3_fs )

  end subroutine ffsl_vert_conservative_alg

end module ffsl_vert_conservative_alg_mod
