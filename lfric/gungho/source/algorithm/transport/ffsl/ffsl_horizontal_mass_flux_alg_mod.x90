!-----------------------------------------------------------------------------
! (c) Crown copyright 2021 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!> @brief Algorithm which calculates flux-form semi-Lagrangian (FFSL)
!!        conservative mass fluxes in x and y directions.

module ffsl_horizontal_mass_flux_alg_mod

  use constants_mod,                     only: r_def, LARGE_REAL_NEGATIVE
  use field_mod,                         only: field_type
  use function_space_mod,                only: function_space_type
  use subgrid_config_mod,                only: dep_pt_stencil_extent, &
                                               rho_approximation_stencil_extent
  use psykal_lite_mod,                   only: invoke_subgrid_coeffs,              &
                                               invoke_subgrid_coeffs_conservative, &
                                               invoke_fv_mass_fluxes
  use flux_direction_mod,                only: x_direction, y_direction

  implicit none

  private
  public :: ffsl_horizontal_mass_flux_alg

contains

  !> @brief Calculates FFSL mass fluxes in x and y directions.
  !> @details This algorithm calculates the conservative mass fluxes in a specified
  !!          direction. The PPM technique is used which allows conservative mass
  !!          mass fluxes for Courant numbers greater than 1 to be calculated.
  !!          The subgrid representation of rho is first calculated for all cells
  !!          in the direction which we are interested in, then the fluxes are
  !!          calculated for each W2 nodal point at lowest order. The departure
  !!          points is an input variable as well as the density. Output variable
  !!          is the mass flux in one direction.
  !> @param[in]     dep_pts_x        Departure points for the x-direction
  !> @param[in]     dep_pts_y        Departure points for the y-direction
  !> @param[in]     cell_orientation Orientation of cells, in particular halo cells
  !> @param[in]     rho_x            Density calculated from advective Cosmic step in x-direction
  !> @param[in]     rho_y            Density calculated from advective Cosmic step in y-direction
  !> @param[in,out] mass_flux_x      1D conservative mass flux values in the x-direction
  !> @param[in,out] mass_flux_y      1D conservative mass flux values in the y-direction
  !> @param[in]     dt               The model timestep length
  subroutine ffsl_horizontal_mass_flux_alg( dep_pts_x,        &
                                            dep_pts_y,        &
                                            cell_orientation, &
                                            rho_x,            &
                                            rho_y,            &
                                            mass_flux_x,      &
                                            mass_flux_y,      &
                                            dt )

    implicit none

    type(field_type),    intent(in)     :: dep_pts_x
    type(field_type),    intent(in)     :: dep_pts_y
    type(field_type),    intent(in)     :: cell_orientation
    type(field_type),    intent(in)     :: rho_x
    type(field_type),    intent(in)     :: rho_y
    type(field_type),    intent(inout)  :: mass_flux_x
    type(field_type),    intent(inout)  :: mass_flux_y
    real(r_def),         intent(in)     :: dt

    type( field_type ) :: a0_x, a1_x, a2_x, a0_y, a1_y, a2_y
    type( field_type ) :: rho_x_corrected, rho_y_corrected

    type(function_space_type), pointer :: rho_fs   => null()

    rho_fs => rho_x%get_function_space()

    call a0_x%initialise( vector_space = rho_fs )
    call a1_x%initialise( vector_space = rho_fs )
    call a2_x%initialise( vector_space = rho_fs )

    call a0_y%initialise( vector_space = rho_fs )
    call a1_y%initialise( vector_space = rho_fs )
    call a2_y%initialise( vector_space = rho_fs )

    call rho_x_corrected%initialise( vector_space = rho_fs )
    call rho_y_corrected%initialise( vector_space = rho_fs )

    ! Initialise to a large negative value to ensure bugs show up clearly
    call invoke( setval_c(a0_x            , LARGE_REAL_NEGATIVE), &
                 setval_c(a1_x            , LARGE_REAL_NEGATIVE), &
                 setval_c(a2_x            , LARGE_REAL_NEGATIVE), &
                 setval_c(a0_y            , LARGE_REAL_NEGATIVE), &
                 setval_c(a1_y            , LARGE_REAL_NEGATIVE), &
                 setval_c(a2_y            , LARGE_REAL_NEGATIVE), &
                 setval_c(rho_x_corrected , LARGE_REAL_NEGATIVE), &
                 setval_c(rho_y_corrected , LARGE_REAL_NEGATIVE)  &
                 )

    call invoke_subgrid_coeffs_conservative(  a0_x, a1_x, a2_x,                 &
                                              a0_y, a1_y, a2_y,                 &
                                              rho_x,                            &
                                              rho_y,                            &
                                              rho_x_corrected,                  &
                                              rho_y_corrected,                  &
                                              cell_orientation,                 &
                                              rho_approximation_stencil_extent, &
                                              dep_pt_stencil_extent  )

    call invoke_fv_mass_fluxes(  rho_y, dep_pts_x, mass_flux_x,  &
                                 a0_y, a1_y, a2_y, x_direction, dep_pt_stencil_extent, &
                                 dt )

    call invoke_fv_mass_fluxes(  rho_x, dep_pts_y, mass_flux_y,  &
                                 a0_x, a1_x, a2_x, y_direction, dep_pt_stencil_extent, &
                                 dt )

  end subroutine ffsl_horizontal_mass_flux_alg

end module ffsl_horizontal_mass_flux_alg_mod
