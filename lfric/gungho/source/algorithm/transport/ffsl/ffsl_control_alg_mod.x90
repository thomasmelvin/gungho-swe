!-----------------------------------------------------------------------------
! (C) Crown copyright 2021 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!> @brief Routines for managing FFSL transport schemes.

module ffsl_control_alg_mod

  use constants_mod,                    only: i_def, r_def
  use extrusion_mod,                    only: SHIFTED
  use field_mod,                        only: field_type
  use finite_element_config_mod,        only: element_order
  use function_space_collection_mod,    only: function_space_collection
  use function_space_mod,               only: function_space_type
  use fs_continuity_mod,                only: W2, W3, Wtheta
  use geometric_constants_mod,          only: get_cell_orientation
  use ffsl_transport_alg_mod,           only: ffsl_conservative_transport_step, &
                                              ffsl_advective_transport_step
  use inject_sh_w3_to_wt_kernel_mod,    only: inject_sh_w3_to_wt_kernel_type
  use inject_wt_to_sh_w3_kernel_mod,    only: inject_wt_to_sh_w3_kernel_type
  use log_mod,                          only: log_event, &
                                              LOG_LEVEL_INFO
  use mesh_mod,                         only: mesh_type
  use mesh_collection_mod,              only: mesh_collection
  use transport_config_mod,             only: ffsl_scheme,           &
                                              ffsl_scheme_three_dim, &
                                              ffsl_scheme_horz,      &
                                              ffsl_scheme_yz_bip,    &
                                              dry_field_name
  use transport_metadata_mod,           only: transport_metadata_type
  use transport_enumerated_types_mod,   only: direction_v,          &
                                              direction_h,          &
                                              splitting_strang_vhv, &
                                              splitting_strang_hvh

  use transport_runtime_alg_mod,        only: transport_runtime_type
  use transport_runtime_collection_mod, only: get_transport_runtime

  implicit none

  private

  public :: ffsl_conservative_control
  public :: ffsl_advective_control

contains

  !=============================================================================
  !> @brief Controls 3D/vertical/horizontal conservative FFSL transport.
  !> @details Calls the conservative flux form semi-Lagrangian (FFSL) transport
  !!          scheme step after getting data from transport_metadata and
  !!          transport_runtime.
  !> @param[in,out] field_np1          Field to return at end of transport step
  !> @param[in]     field_n            Field at the start of the transport step
  !> @param[in]     direction          Either 3D/vertical/horizontal FFSL transport
  !> @param[in]     step_dt            The dt for this time step
  !> @param[in]     transport_metadata Contains the configuration options for
  !!                                   transporting these fields
  subroutine ffsl_conservative_control(field_np1, field_n, direction, &
                                       step_dt, transport_metadata)

    use yz_cosmic_scheme_alg_mod,          only: yz_cosmic_scheme_alg
    use horizontal_cosmic_scheme_alg_mod,  only: horizontal_cosmic_scheme

    implicit none

    ! Arguments
    type(field_type),              intent(inout) :: field_np1
    type(field_type),              intent(in)    :: field_n
    integer(kind=i_def),           intent(in)    :: direction
    real(kind=r_def),              intent(in)    :: step_dt
    type(transport_metadata_type), intent(in)    :: transport_metadata

    ! Internal variables
    type(field_type)          :: increment
    type(field_type), pointer :: cell_orientation => null()
    type(field_type), pointer :: detj_at_w2 => null()
    type(field_type), pointer :: dep_pts_x_get => null()
    type(field_type), pointer :: dep_pts_y_get => null()
    type(field_type), pointer :: dep_pts_z_get => null()
    type(field_type)          :: dep_pts_z, &
                                 dep_pts_x, &
                                 dep_pts_y
    type(field_type)          :: flux
    integer(kind=i_def)       :: mesh_id
    type(mesh_type),  pointer :: mesh => null()
    type(function_space_type),    pointer :: w2_fs => null()
    type(transport_runtime_type), pointer :: transport_runtime => null()

    call log_event('Conservative FFSL transport', LOG_LEVEL_INFO)

    ! Get Mesh ID and cell orientation
    mesh_id = field_n%get_mesh_id()
    cell_orientation => get_cell_orientation(mesh_id)

    ! Get transport_runtime
    mesh => field_n%get_mesh()
    transport_runtime => get_transport_runtime(mesh)

    ! Get Det(J) and departure points
    detj_at_w2    => transport_runtime%get_detj_at_w2_transport(mesh_id)
    dep_pts_x_get => transport_runtime%get_departure_points_x_w2(mesh_id)
    dep_pts_y_get => transport_runtime%get_departure_points_y_w2(mesh_id)
    dep_pts_z_get => transport_runtime%get_departure_points_z_w2(mesh_id)

    ! Get correct departure points based on splitting
    call dep_pts_z%initialise( vector_space = dep_pts_z_get%get_function_space() )
    call invoke( setval_X(dep_pts_z, dep_pts_z_get) )

    ! If vertical scheme for Strang splitting divide departure distance by 2
    if ( transport_metadata%get_splitting() ==  splitting_strang_vhv .and. &
         direction == direction_v ) then
      call invoke( inc_a_times_X(0.5_r_def, dep_pts_z) )
    end if

    ! Get correct departure points based on splitting
    call dep_pts_x%initialise( vector_space = dep_pts_x_get%get_function_space() )
    call dep_pts_y%initialise( vector_space = dep_pts_y_get%get_function_space() )
    ! Use copy instead of setval_X as we need to preserve halo values
    call dep_pts_x_get%copy_field(dep_pts_x)
    call dep_pts_y_get%copy_field(dep_pts_y)

    ! If horizontal scheme for Strang splitting divide departure distance by 2
    if ( transport_metadata%get_splitting() ==  splitting_strang_hvh .and. &
         direction == direction_h ) then
      call invoke( inc_a_times_X(0.5_r_def, dep_pts_x), &
                   inc_a_times_X(0.5_r_def, dep_pts_y) )
    end if

    call increment%initialise( vector_space=field_n%get_function_space() )
    call invoke( setval_c(increment, 0.0_r_def) )

    ! Select FFSL scheme to use: 3D, yz_bip (transport only), horizontal (transport only)
    select case(ffsl_scheme)

    case(ffsl_scheme_three_dim)

      call ffsl_conservative_transport_step( field_n, dep_pts_x, dep_pts_y, &
                                             dep_pts_z, detj_at_w2,         &
                                             cell_orientation, step_dt,     &
                                             direction, increment)

      call invoke( X_minus_bY( field_np1, field_n, step_dt, increment) )

    case(ffsl_scheme_horz)

      call horizontal_cosmic_scheme( increment, field_n, dep_pts_x,    &
                                     dep_pts_y, detj_at_w2, cell_orientation, &
                                     step_dt )

    case(ffsl_scheme_yz_bip)

      call yz_cosmic_scheme_alg( increment, field_n, dep_pts_y, dep_pts_z, &
                                 detj_at_w2, step_dt  )

    end select

    ! Get field_np1 from field_n and increment
    call invoke( X_minus_bY( field_np1, field_n, step_dt, increment) )


    ! Store field in transport_runtime for conservative transport
    ! if this is the underlying dry field
    if (trim(transport_metadata%get_name()) == trim(dry_field_name)) then
      ! TODO: #2997 compute flux and set dry fields in transport runtime
      ! Initialise flux -- following #2997 this should be done earlier
      ! in this algorithm
      w2_fs => function_space_collection%get_fs( mesh, element_order, W2 )
      call flux%initialise( w2_fs )
      call transport_runtime%set_dry_fields(field_n, field_np1, flux)
      nullify(w2_fs)
    end if

    nullify(transport_runtime, mesh, detj_at_w2, cell_orientation, &
            dep_pts_x_get, dep_pts_y_get, dep_pts_z_get)

  end subroutine ffsl_conservative_control


  !=============================================================================
  !> @brief Controls 3D/vertical/horizontal advective FFSL transport.
  !> @details Calls the advective flux form semi-Lagrangian (FFSL) transport
  !!          scheme step after getting data from transport_metadata and
  !!          transport_runtime.
  !> @param[in,out] field_np1          Field to return at end of transport step
  !> @param[in]     field_n            Field at the start of the transport step
  !> @param[in]     direction          Either 3D/vertical/horizontal FFSL transport
  !> @param[in]     step_dt            The dt for this time step
  !> @param[in]     transport_metadata Contains the configuration options for
  !!                                   transporting these fields
  subroutine ffsl_advective_control(field_np1, field_n, direction, step_dt, &
                                    transport_metadata)

    implicit none

    ! Arguments
    type(field_type),              intent(inout) :: field_np1
    type(field_type),              intent(in)    :: field_n
    real(kind=r_def),              intent(in)    :: step_dt
    integer(kind=i_def),           intent(in)    :: direction
    type(transport_metadata_type), intent(in)    :: transport_metadata

    ! Internal variables
    type(field_type)          :: increment
    type(field_type)          :: adv_increment
    type(field_type)          :: field_to_adv
    type(field_type), pointer :: cell_orientation => null()
    type(field_type), pointer :: detj_at_w2 => null()
    type(field_type), pointer :: dep_pts_x_get => null()
    type(field_type), pointer :: dep_pts_y_get => null()
    type(field_type), pointer :: dep_pts_z_get => null()
    type(field_type)          :: dep_pts_z, &
                                 dep_pts_x, &
                                 dep_pts_y
    type(mesh_type),  pointer :: mesh => null()
    type(transport_runtime_type), pointer :: transport_runtime => null()

    ! Mesh ID
    integer(kind=i_def) :: mesh_id

    ! Function Spaces
    integer(kind=i_def)                :: function_space
    type(function_space_type), pointer :: w3_shifted_fs => null()
    type(mesh_type),           pointer :: shifted_mesh => null()

    call log_event('Advective FFSL transport', LOG_LEVEL_INFO)

    ! Function space of the field to be advected
    function_space = field_n%which_function_space()

    if (function_space == Wtheta) then
      ! If Wtheta variable move onto shifted W3 mesh
      shifted_mesh => mesh_collection%get_mesh(field_n%get_mesh(), SHIFTED)
      w3_shifted_fs   => function_space_collection%get_fs(shifted_mesh, 0_i_def, W3)
      call field_to_adv%initialise( vector_space = w3_shifted_fs )
      call invoke( inject_wt_to_sh_w3_kernel_type(field_to_adv, field_n) )
    else
      ! Stay on current mesh
      call field_to_adv%initialise( field_n%get_function_space() )
      call invoke( setval_X(field_to_adv, field_n) )
    end if

    ! Mesh ID and cell orientation
    mesh_id = field_to_adv%get_mesh_id()
    cell_orientation => get_cell_orientation(mesh_id)

    ! Get transport_runtime
    mesh => field_n%get_mesh()
    transport_runtime => get_transport_runtime(mesh)

    ! Get Det(J) and departure points
    detj_at_w2    => transport_runtime%get_detj_at_w2_transport(mesh_id)
    dep_pts_x_get => transport_runtime%get_departure_points_x_w2(mesh_id)
    dep_pts_y_get => transport_runtime%get_departure_points_y_w2(mesh_id)
    dep_pts_z_get => transport_runtime%get_departure_points_z_w2(mesh_id)

    ! Get correct departure points based on splitting
    call dep_pts_z%initialise( vector_space = dep_pts_z_get%get_function_space() )
    call invoke( setval_X(dep_pts_z, dep_pts_z_get) )

    ! If vertical scheme for Strang splitting divide departure distance by 2
    if ( transport_metadata%get_splitting() ==  splitting_strang_vhv .and. &
         direction == direction_v ) then
      call invoke( inc_a_times_X(0.5_r_def, dep_pts_z) )
    end if

    ! Get correct departure points based on splitting
    call dep_pts_x%initialise( vector_space = dep_pts_x_get%get_function_space() )
    call dep_pts_y%initialise( vector_space = dep_pts_y_get%get_function_space() )
    ! Use copy instead of setval_X as we need to preserve halo values
    call dep_pts_x_get%copy_field(dep_pts_x)
    call dep_pts_y_get%copy_field(dep_pts_y)

    ! If horizontal scheme for Strang splitting divide departure distance by 2
    if ( transport_metadata%get_splitting() ==  splitting_strang_hvh .and. &
         direction == direction_h ) then
      call invoke( inc_a_times_X(0.5_r_def, dep_pts_x), &
                   inc_a_times_X(0.5_r_def, dep_pts_y) )
    end if

    call increment%initialise( vector_space=field_to_adv%get_function_space() )
    call invoke( setval_c(increment, 0.0_r_def) )

    call ffsl_advective_transport_step( field_to_adv,     &
                                        dep_pts_x,        &
                                        dep_pts_y,        &
                                        dep_pts_z,        &
                                        detj_at_w2,       &
                                        cell_orientation, &
                                        step_dt,          &
                                        direction,        &
                                        increment)

    if (function_space == Wtheta) then
      ! If Wtheta variable move back to Wtheta mesh
      call adv_increment%initialise( field_n%get_function_space() )
      call invoke( inject_sh_w3_to_wt_kernel_type(adv_increment, increment) )
    else
      ! Stay on current mesh
      call adv_increment%initialise( field_n%get_function_space() )
      call invoke( setval_X(adv_increment, increment) )
    end if

    call invoke( X_minus_bY( field_np1, field_n, step_dt, adv_increment) )

    nullify(transport_runtime, mesh, detj_at_w2, cell_orientation, &
            dep_pts_x_get, dep_pts_y_get, dep_pts_z_get)

  end subroutine ffsl_advective_control

end module ffsl_control_alg_mod
