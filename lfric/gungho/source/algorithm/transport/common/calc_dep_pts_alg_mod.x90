!-----------------------------------------------------------------------------
! (c) Crown copyright 2018 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> @brief   Algorithms for calculating departure points used by FFSL/SL transport.
!> @details Departure points for the cell edges are calculated using departure
!!          winds. These are computed by dividing the computational winds by
!!          Det(J) at cell edges. These algorithms compute the departure points,
!!          (in 3D, in the horizontal, or in the vertical)
!!          and the choice of Det(J) calculation (upwinded or averaged).
!!          This is used by the flux form semi-Lagrangian (FFSL) and the
!!          vertical semi-Lagrangian (SL) transport schemes.

module calc_dep_pts_alg_mod

  use constants_mod,                     only: LARGE_REAL_NEGATIVE, i_def, r_def
  use io_config_mod,                     only: subroutine_timers
  use timer_mod,                         only: timer
  use field_mod,                         only: field_type
  use calc_upwind_detj_at_w2_kernel_mod, only: calc_upwind_detj_at_w2_kernel_type
  use vertical_deppt_kernel_mod,         only: vertical_deppt_kernel_type
  use vertical_uniform_deppt_kernel_mod, only: vertical_uniform_deppt_kernel_type
  use function_space_mod,                only: function_space_type
  use function_space_collection_mod,     only: function_space_collection
  use fs_continuity_mod,                 only: W3, W2
  use finite_element_config_mod,         only: element_order
  use flux_direction_mod,                only: x_direction, y_direction, z_direction
  use departure_points_config_mod,       only: method, n_dep_pt_iterations, &
                                               vertical_method,             &
                                               departure_grid_physical,     &
                                               departure_grid_uniform,      &
                                               departure_grid
  use subgrid_config_mod,                only: dep_pt_stencil_extent,        &
                                               calculate_detj,               &
                                               calculate_detj_averaged,      &
                                               calculate_detj_upwind
  use psykal_lite_mod,                   only: invoke_calc_deppts,           &
                                               invoke_extract_xy,            &
                                               invoke_cosmic_departure_wind, &
                                               invoke_correct_ffsl_wind
  use fem_constants_mod,                 only: get_detj_at_w2,               &
                                               get_detj_at_w2_above,         &
                                               get_detj_at_w2_below
  use geometric_constants_mod,           only: get_coordinates,              &
                                               get_panel_id,                 &
                                               get_height
  use log_mod,                           only: log_event,                    &
                                               LOG_LEVEL_INFO,               &
                                               LOG_LEVEL_ERROR
  use mesh_mod,                          only: mesh_type
  use ffsl_divergence_alg_mod,           only: ffsl_divergence_alg

  implicit none

  private
  public :: calc_dep_pts
  public :: calc_hori_dep_pts
  public :: calc_vert_dep_pts
  public :: select_detj_at_w2

contains

  !> @brief   An algorithm for calculating departure points used by FFSL transport.
  !> @details The algorithm calculates the departure points for the cell edges.
  !!          The departure points are calculated in the x, y and z direction
  !!          separately as 1D calculations.
  !!          This is used by the dimensionally-split swept-area approach of
  !!          the flux form semi-Lagrangian (FFSL) scheme.
  !!
  !> @param[in,out] dep_pts_x         Departure points in x direction
  !> @param[in,out] dep_pts_y         Departure points in y direction
  !> @param[in,out] dep_pts_z         Departure points in z direction
  !> @param[in,out] cfl               Vertical CFL
  !> @param[in,out] wind_divergence   Divergence of wind field
  !> @param[in]     wind_n            Wind field at timestep n
  !> @param[in]     wind_np1          Wind field at timestep n+1
  !> @param[in]     detj_at_w2        Det(J) at W2 dofs
  !> @param[in]     cell_orientation  Orientation of halo cells
  !> @param[in]     dt                The model timestep length
  subroutine calc_dep_pts( dep_pts_x,        &
                           dep_pts_y,        &
                           dep_pts_z,        &
                           cfl,              &
                           wind_divergence,  &
                           wind_n,           &
                           wind_np1,         &
                           detj_at_w2,       &
                           cell_orientation, &
                           dt )

    implicit none

    type( field_type ), intent(inout) :: dep_pts_x
    type( field_type ), intent(inout) :: dep_pts_y
    type( field_type ), intent(inout) :: dep_pts_z
    type( field_type ), intent(inout) :: cfl
    type( field_type ), intent(inout) :: wind_divergence
    type( field_type ), intent(in)    :: wind_n
    type( field_type ), intent(in)    :: wind_np1
    type( field_type ), intent(in)    :: detj_at_w2
    type( field_type ), intent(in)    :: cell_orientation
    real( kind=r_def ), intent(in)    :: dt

    type( field_type ) :: u_x_fem_n, u_y_fem_n, u_x_fem_np1, u_y_fem_np1
    type( field_type ) :: dep_wind_x_n, dep_wind_y_n
    type( field_type ) :: dep_wind_x_np1, dep_wind_y_np1
    type( field_type ) :: departure_wind_n, departure_wind_np1
    type( field_type ) :: corrected_dep_wind_x_n, corrected_dep_wind_y_n
    type( field_type ) :: corrected_dep_wind_x_np1, corrected_dep_wind_y_np1
    type( field_type ) :: divergence_x, divergence_y, divergence_z

    type( field_type ), pointer :: chi(:) => null()
    type( field_type ), pointer :: panel_id => null()
    type( field_type ), pointer :: height_w2 => null()

    type( function_space_type ), pointer :: w2_fs => null()
    type( function_space_type ), pointer :: w3_fs => null()

    type(mesh_type), pointer :: mesh => null()

    w2_fs => dep_pts_x%get_function_space()
    mesh  => wind_n%get_mesh()
    w3_fs => function_space_collection%get_fs( mesh, element_order, W3 )

    chi => get_coordinates(mesh%get_id())
    panel_id => get_panel_id(mesh%get_id())
    height_w2 => get_height(W2, mesh%get_id())

    call u_x_fem_n%initialise( vector_space = w2_fs )
    call u_y_fem_n%initialise( vector_space = w2_fs )
    call u_x_fem_np1%initialise( vector_space = w2_fs )
    call u_y_fem_np1%initialise( vector_space = w2_fs )
    call dep_wind_x_n%initialise( vector_space = w2_fs )
    call dep_wind_y_n%initialise( vector_space = w2_fs )
    call dep_wind_x_np1%initialise( vector_space = w2_fs )
    call dep_wind_y_np1%initialise( vector_space = w2_fs )
    call departure_wind_n%initialise( vector_space = w2_fs )
    call departure_wind_np1%initialise( vector_space = w2_fs )
    call corrected_dep_wind_x_n%initialise( vector_space = w2_fs )
    call corrected_dep_wind_y_n%initialise( vector_space = w2_fs )
    call corrected_dep_wind_x_np1%initialise( vector_space = w2_fs )
    call corrected_dep_wind_y_np1%initialise( vector_space = w2_fs )

    call divergence_x%initialise( vector_space = w3_fs )
    call divergence_y%initialise( vector_space = w3_fs )
    call divergence_z%initialise( vector_space = w3_fs )

    if ( subroutine_timers ) call timer( 'calc_dep_pts' )

    ! Calculate vertical departure points and departure winds.
    ! Currently the trapezoidal method has been choosen for calculating departure
    ! points in the vertical.
    ! *_n and *_np1 denotes fields at timestep n and timestep n+1 with density known
    ! at timestep n.
    call invoke( setval_c( dep_pts_x, 0.0_r_def ),                        &
                 setval_c( dep_pts_y, 0.0_r_def ),                        &
                 setval_c( dep_pts_z, 0.0_r_def ),                        &
                 setval_c( cfl, 0.0_r_def ),                              &
                 setval_c( departure_wind_n, LARGE_REAL_NEGATIVE ),       &
                 setval_c( departure_wind_np1, LARGE_REAL_NEGATIVE ),     &
                 setval_c( u_x_fem_n, LARGE_REAL_NEGATIVE ),              &
                 setval_c( u_y_fem_n, LARGE_REAL_NEGATIVE ),              &
                 setval_c( u_x_fem_np1, LARGE_REAL_NEGATIVE ),            &
                 setval_c( u_y_fem_np1, LARGE_REAL_NEGATIVE ),            &
                 X_divideby_Y(departure_wind_n, wind_n, detj_at_w2),      &
                 X_divideby_Y(departure_wind_np1, wind_np1, detj_at_w2),  &
                 vertical_deppt_kernel_type( dep_pts_z,                   &
                                             cfl,                         &
                                             departure_wind_n,            &
                                             departure_wind_np1,          &
                                             height_w2,                   &
                                             n_dep_pt_iterations,         &
                                             vertical_method, dt )  )

    ! Calculate horizontal departure points.

    ! Separate finite-element wind field into x and y directional components.
    call invoke_extract_xy( u_x_fem_n, u_y_fem_n, wind_n, cell_orientation )
    call invoke_extract_xy( u_x_fem_np1, u_y_fem_np1, wind_np1, cell_orientation )

    ! Divide the Piola wind coefficients, u_x_fem and u_y_fem, by Det(J) at the W2 dofs.
    ! Returning wind coefficients, dep_wind_x and dep_wind_y, which have dimension 1/T.
    ! dep_wind_x and dep_wind_y have no length associated with them since we solve
    ! for departure points on a rescaled mesh which is dimensionless where the
    ! distance between cell edges is length 1.0.
    call invoke_cosmic_departure_wind( dep_wind_x_n, dep_wind_y_n, u_x_fem_n, u_y_fem_n, detj_at_w2, x_direction )
    call invoke_cosmic_departure_wind( dep_wind_x_n, dep_wind_y_n, u_x_fem_n, u_y_fem_n, detj_at_w2, y_direction )
    call invoke_cosmic_departure_wind( dep_wind_x_np1, dep_wind_y_np1, u_x_fem_np1, u_y_fem_np1, detj_at_w2, x_direction )
    call invoke_cosmic_departure_wind( dep_wind_x_np1, dep_wind_y_np1, u_x_fem_np1, u_y_fem_np1, detj_at_w2, y_direction )

    ! For Cosmic if the wind value is assumed positive in the x or y direction then it moves mass in the positive x or
    ! y direction. Note that Cosmic locally defines an x or y direction on each panel of the cubed sphere.
    ! The basis function in the y direction actually points in the negative direction.
    ! Therefore a negative Piola wind coefficient means that the wind is in the positive y direction.
    ! The following code corrects the wind coefficient values so that the wind has the correct sign in the x and y direction.
    call invoke_correct_ffsl_wind( corrected_dep_wind_x_n, corrected_dep_wind_y_n,                &
                                   dep_wind_x_n, dep_wind_y_n, cell_orientation, x_direction )
    call invoke_correct_ffsl_wind( corrected_dep_wind_x_n, corrected_dep_wind_y_n,                &
                                   dep_wind_x_n, dep_wind_y_n, cell_orientation, y_direction )
    call invoke_correct_ffsl_wind( corrected_dep_wind_x_np1, corrected_dep_wind_y_np1,            &
                                   dep_wind_x_np1, dep_wind_y_np1, cell_orientation, x_direction )
    call invoke_correct_ffsl_wind( corrected_dep_wind_x_np1, corrected_dep_wind_y_np1,            &
                                   dep_wind_x_np1, dep_wind_y_np1, cell_orientation, y_direction )

    ! The departure points are calculated at cell edge values.
    ! The code assumes lowest order W2 nodal points, i.e. one W2 dof per cell edge.
    call invoke_calc_deppts( corrected_dep_wind_x_n, corrected_dep_wind_x_np1, dep_pts_x,   &
                             cell_orientation, x_direction, method, dep_pt_stencil_extent, dt )
    call invoke_calc_deppts( corrected_dep_wind_y_n, corrected_dep_wind_y_np1, dep_pts_y,   &
                             cell_orientation, y_direction, method, dep_pt_stencil_extent, dt )

    ! Calculate the divergence of the wind field used in Cosmic.
    call ffsl_divergence_alg( divergence_x, corrected_dep_wind_x_n, detj_at_w2, &
                              cell_orientation, x_direction )

    call ffsl_divergence_alg( divergence_y, corrected_dep_wind_y_n, detj_at_w2, &
                              cell_orientation, y_direction )

    call ffsl_divergence_alg( divergence_z, departure_wind_n, detj_at_w2, &
                              cell_orientation, z_direction )

    call invoke( X_plus_Y(wind_divergence, divergence_x, divergence_y),     &
                 inc_X_plus_Y( wind_divergence, divergence_z) )

    call departure_wind_n%log_minmax( LOG_LEVEL_INFO, 'departure_wind_n' )
    call departure_wind_np1%log_minmax( LOG_LEVEL_INFO, 'departure_wind_np1' )
    call dep_pts_x%log_minmax( LOG_LEVEL_INFO, 'dep_pts_x' )
    call dep_pts_y%log_minmax( LOG_LEVEL_INFO, 'dep_pts_y' )
    call dep_pts_z%log_minmax( LOG_LEVEL_INFO, 'dep_pts_z' )

    nullify( w2_fs, mesh )

    if ( subroutine_timers ) call timer( 'calc_dep_pts' )

  end subroutine calc_dep_pts


  !===========================================================================!
  !> @brief   An algorithm for calculating horizontal departure points.
  !> @details The algorithm calculates the departure points for the cell edges.
  !!          The departure points are calculated in the x and y direction
  !!          separately as 1D calculations.
  !!          This is used by the dimensionally-split swept-area approach of
  !!          the flux form semi-Lagrangian (FFSL) scheme.
  !!
  !> @param[in,out] dep_pts_x         Departure points in x direction
  !> @param[in,out] dep_pts_y         Departure points in y direction
  !> @param[in]     wind_n            Wind field at timestep n
  !> @param[in]     wind_np1          Wind field at timestep n+1
  !> @param[in]     detj_at_w2        Det(J) at W2 dofs
  !> @param[in]     cell_orientation  Orientation of halo cells
  !> @param[in]     dt                The model timestep length
  subroutine calc_hori_dep_pts( dep_pts_x,        &
                                dep_pts_y,        &
                                wind_n,           &
                                wind_np1,         &
                                detj_at_w2,       &
                                cell_orientation, &
                                dt )

    implicit none

    type( field_type ), intent(inout) :: dep_pts_x
    type( field_type ), intent(inout) :: dep_pts_y
    type( field_type ), intent(in)    :: wind_n
    type( field_type ), intent(in)    :: wind_np1
    type( field_type ), intent(in)    :: detj_at_w2
    type( field_type ), intent(in)    :: cell_orientation
    real( kind=r_def ), intent(in)    :: dt

    type( field_type ) :: u_x_fem_n, u_y_fem_n, u_x_fem_np1, u_y_fem_np1
    type( field_type ) :: dep_wind_x_n, dep_wind_y_n
    type( field_type ) :: dep_wind_x_np1, dep_wind_y_np1
    type( field_type ) :: corrected_dep_wind_x_n, corrected_dep_wind_y_n
    type( field_type ) :: corrected_dep_wind_x_np1, corrected_dep_wind_y_np1

    type( field_type ), pointer :: chi(:) => null()
    type( field_type ), pointer :: panel_id => null()

    type( function_space_type ), pointer :: w2_fs => null()
    type( function_space_type ), pointer :: w3_fs => null()

    type(mesh_type), pointer ::  mesh => null()

    w2_fs => dep_pts_x%get_function_space()
    mesh  => wind_n%get_mesh()
    w3_fs => function_space_collection%get_fs( mesh, element_order, W3 )

    chi => get_coordinates(mesh%get_id())
    panel_id => get_panel_id(mesh%get_id())

    call u_x_fem_n%initialise( vector_space = w2_fs )
    call u_y_fem_n%initialise( vector_space = w2_fs )
    call u_x_fem_np1%initialise( vector_space = w2_fs )
    call u_y_fem_np1%initialise( vector_space = w2_fs )
    call dep_wind_x_n%initialise( vector_space = w2_fs )
    call dep_wind_y_n%initialise( vector_space = w2_fs )
    call dep_wind_x_np1%initialise( vector_space = w2_fs )
    call dep_wind_y_np1%initialise( vector_space = w2_fs )
    call corrected_dep_wind_x_n%initialise( vector_space = w2_fs )
    call corrected_dep_wind_y_n%initialise( vector_space = w2_fs )
    call corrected_dep_wind_x_np1%initialise( vector_space = w2_fs )
    call corrected_dep_wind_y_np1%initialise( vector_space = w2_fs )

    if ( subroutine_timers ) call timer( 'calc_hori_dep_pts' )

    ! Initialise departure points as zero and other variables as LARGE_REAL_NEGATIVE

    call invoke( setval_c( dep_pts_x, 0.0_r_def ),             &
                 setval_c( dep_pts_y, 0.0_r_def ),             &
                 setval_c( u_x_fem_n, LARGE_REAL_NEGATIVE ),   &
                 setval_c( u_y_fem_n, LARGE_REAL_NEGATIVE ),   &
                 setval_c( u_x_fem_np1, LARGE_REAL_NEGATIVE ), &
                 setval_c( u_y_fem_np1, LARGE_REAL_NEGATIVE ) )

    ! Separate finite-element wind field into x and y directional components.
    call invoke_extract_xy( u_x_fem_n, u_y_fem_n, wind_n, cell_orientation )
    call invoke_extract_xy( u_x_fem_np1, u_y_fem_np1, wind_np1, cell_orientation )

    ! Divide the Piola wind coefficients, u_x_fem and u_y_fem, by Det(J) at the W2 dofs.
    ! Returning wind coefficients, dep_wind_x and dep_wind_y, which have dimension 1/T.
    ! dep_wind_x and dep_wind_y have no length associated with them since we solve
    ! for departure points on a rescaled mesh which is dimensionless where the
    ! distance between cell edges is length 1.0.
    call invoke_cosmic_departure_wind( dep_wind_x_n, dep_wind_y_n, u_x_fem_n, u_y_fem_n, detj_at_w2, x_direction )
    call invoke_cosmic_departure_wind( dep_wind_x_n, dep_wind_y_n, u_x_fem_n, u_y_fem_n, detj_at_w2, y_direction )
    call invoke_cosmic_departure_wind( dep_wind_x_np1, dep_wind_y_np1, u_x_fem_np1, u_y_fem_np1, detj_at_w2, x_direction )
    call invoke_cosmic_departure_wind( dep_wind_x_np1, dep_wind_y_np1, u_x_fem_np1, u_y_fem_np1, detj_at_w2, y_direction )

    ! For Cosmic if the wind value is assumed positive in the x or y direction then it moves mass in the positive x or
    ! y direction. Note that Cosmic locally defines an x or y direction on each panel of the cubed sphere.
    ! The basis function in the y direction actually points in the negative direction.
    ! Therefore a negative Piola wind coefficient means that the wind is in the positive y direction.
    ! The following code corrects the wind coefficient values so that the wind has the correct sign in the x and y direction.
    call invoke_correct_ffsl_wind( corrected_dep_wind_x_n, corrected_dep_wind_y_n,                &
                                   dep_wind_x_n, dep_wind_y_n, cell_orientation, x_direction )
    call invoke_correct_ffsl_wind( corrected_dep_wind_x_n, corrected_dep_wind_y_n,                &
                                   dep_wind_x_n, dep_wind_y_n, cell_orientation, y_direction )
    call invoke_correct_ffsl_wind( corrected_dep_wind_x_np1, corrected_dep_wind_y_np1,            &
                                   dep_wind_x_np1, dep_wind_y_np1, cell_orientation, x_direction )
    call invoke_correct_ffsl_wind( corrected_dep_wind_x_np1, corrected_dep_wind_y_np1,            &
                                   dep_wind_x_np1, dep_wind_y_np1, cell_orientation, y_direction )

    ! The departure points are calculated at cell edge values.
    ! The code assumes lowest order W2 nodal points, i.e. one W2 dof per cell edge.
    call invoke_calc_deppts( corrected_dep_wind_x_n, corrected_dep_wind_x_np1, dep_pts_x,   &
                             cell_orientation, x_direction, method, dep_pt_stencil_extent, dt )
    call invoke_calc_deppts( corrected_dep_wind_y_n, corrected_dep_wind_y_np1, dep_pts_y,   &
                             cell_orientation, y_direction, method, dep_pt_stencil_extent, dt )

    call dep_pts_x%log_minmax( LOG_LEVEL_INFO, 'dep_pts_x' )
    call dep_pts_y%log_minmax( LOG_LEVEL_INFO, 'dep_pts_y' )

    nullify( w2_fs, mesh )

    if ( subroutine_timers ) call timer( 'calc_hori_dep_pts' )

  end subroutine calc_hori_dep_pts


  !===========================================================================!
  !> @brief   An algorithm for calculating vertical departure points.
  !> @details The algorithm calculates the departure points for the cell edges.
  !!          The departure points are calculated in the z direction.
  !!          This is used by the dimensionally-split swept-area approach of
  !!          the flux form semi-Lagrangian (FFSL) scheme as well as the
  !!          vertical semi-Lagrangian and SLICE schemes.
  !!
  !> @param[in,out] dep_pts_z         Departure points in z direction
  !> @param[in,out] cfl               Vertical CFL from departure points
  !> @param[in]     wind_n            Wind field at timestep n
  !> @param[in]     wind_np1          Wind field at timestep n+1
  !> @param[in]     detj_at_w2        Det(J) at W2 dofs
  !> @param[in]     dt                The model timestep length
  subroutine calc_vert_dep_pts( dep_pts_z,        &
                                cfl,              &
                                wind_n,           &
                                wind_np1,         &
                                detj_at_w2,       &
                                dt )

    implicit none

    type( field_type ), intent(inout) :: dep_pts_z
    type( field_type ), intent(inout) :: cfl
    type( field_type ), intent(in)    :: wind_n
    type( field_type ), intent(in)    :: wind_np1
    type( field_type ), intent(in)    :: detj_at_w2
    real( kind=r_def ), intent(in)    :: dt

    type( field_type ) :: departure_wind_n, departure_wind_np1

    type( field_type ), pointer :: chi(:) => null()
    type( field_type ), pointer :: panel_id => null()
    type( field_type ), pointer :: height_w2 => null()

    type( function_space_type ), pointer :: w2_fs => null()
    type( function_space_type ), pointer :: w3_fs => null()

    type( mesh_type ), pointer ::  mesh => null()

    w2_fs => dep_pts_z%get_function_space()
    mesh  => wind_n%get_mesh()
    w3_fs => function_space_collection%get_fs( mesh, element_order, W3 )

    chi => get_coordinates( mesh%get_id() )
    panel_id => get_panel_id( mesh%get_id() )
    height_w2 => get_height(W2, mesh%get_id())

    call departure_wind_n%initialise( vector_space = w2_fs )
    call departure_wind_np1%initialise( vector_space = w2_fs )

    if ( subroutine_timers ) call timer( 'calc_vert_dep_pts' )

    ! Calculate vertical departure points and departure winds.
    ! Currently the trapezoidal method has been choosen for calculating departure
    ! points in the vertical.
    ! *_n and *_np1 denotes fields at timestep n and timestep n+1 with density known
    ! at timestep n.
    call invoke( setval_c( dep_pts_z, 0.0_r_def ),                       &
                 setval_c( cfl, 0.0_r_def ),                             &
                 setval_c( departure_wind_n, LARGE_REAL_NEGATIVE ),      &
                 setval_c( departure_wind_np1, LARGE_REAL_NEGATIVE ),    &
                 X_divideby_Y(departure_wind_n, wind_n, detj_at_w2),     &
                 X_divideby_Y(departure_wind_np1, wind_np1, detj_at_w2) )

    select case(departure_grid)

    case(departure_grid_uniform)
      ! Assume uniform grid for departure point calculation
      call invoke( vertical_uniform_deppt_kernel_type( dep_pts_z,                  &
                                                       cfl,                        &
                                                       departure_wind_n,           &
                                                       departure_wind_np1,         &
                                                       n_dep_pt_iterations,        &
                                                       vertical_method, dt )  )

    case default
      ! Use physical grid
      call invoke( vertical_deppt_kernel_type( dep_pts_z,                  &
                                               cfl,                        &
                                               departure_wind_n,           &
                                               departure_wind_np1,         &
                                               height_w2,                  &
                                               n_dep_pt_iterations,        &
                                               vertical_method, dt )  )
    end select

    call dep_pts_z%log_minmax( LOG_LEVEL_INFO, 'dep_pts_z' )

    nullify( w2_fs, mesh )

    if ( subroutine_timers ) call timer( 'calc_vert_dep_pts' )

  end subroutine calc_vert_dep_pts


  !===========================================================================!
  !> @brief   Select either averaged or upwind Det(J) at vertical W2 dofs.
  !> @details Det(J) at vertical W2 dofs can be calculated using either an
  !!          average from the cells either side or from the upwind cell.
  !!
  !> @param[in]     advecting_wind  Advecting wind to determine upwind direction
  !> @param[in,out] detj_at_w2      Det(J) at W2 dofs
  subroutine select_detj_at_w2( advecting_wind, &
                                detj_at_w2 )

    implicit none

    type( field_type ), intent(in)    :: advecting_wind
    type( field_type ), intent(inout) :: detj_at_w2

    ! Det(J) at W2 fields
    type( field_type ), pointer :: detj_at_w2_ave   => null()
    type( field_type ), pointer :: detj_at_w2_above => null()
    type( field_type ), pointer :: detj_at_w2_below => null()

    ! Mesh ID variable
    integer( kind=i_def ) ::  mesh_id

    ! Get Mesh ID
    mesh_id = advecting_wind%get_mesh_id()

    ! Get Det(J) at W2 using averaged Det(J)
    detj_at_w2_ave => get_detj_at_w2(mesh_id)

    select case (calculate_detj)

      case (calculate_detj_averaged)
        ! Set detj_at_w2 to use average Det(J) of neighbouring cells
        call invoke( setval_X(detj_at_w2,detj_at_w2_ave) )

      case (calculate_detj_upwind)
        ! Get Det(J) at W2 from cells above and below respectively
        detj_at_w2_above => get_detj_at_w2_above(mesh_id)
        detj_at_w2_below => get_detj_at_w2_below(mesh_id)

        ! Set detj_at_w2 to use average Det(J) for horizontal dofs
        call invoke( setval_X(detj_at_w2,detj_at_w2_ave),                 &
        ! Update vertical parts of detj_at_w2 to use upwind Det(J)
                     calc_upwind_detj_at_w2_kernel_type(detj_at_w2,       &
                                                        detj_at_w2_above, &
                                                        detj_at_w2_below, &
                                                        advecting_wind) )

      case default
          call log_event( "Gungho: Invalid Det(J) calculation method", LOG_LEVEL_ERROR )
    end select

    nullify( detj_at_w2_above, detj_at_w2_below, detj_at_w2_ave )

  end subroutine select_detj_at_w2

end module calc_dep_pts_alg_mod
