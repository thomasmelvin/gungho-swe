!-----------------------------------------------------------------------------
! (c) Crown copyright 2021 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!> @brief An algorithm for performing 1D vertical semi-Lagrangian advective transport.
!> @details The algorithm performs a 1D vertical semi-Lagrangian advective
!!          transport of a field. It computes the field at the departure point
!!          using a cubic or quintic interpolation.

module vertical_sl_advective_alg_mod

  use constants_mod,                      only: r_def
  use io_config_mod,                      only: subroutine_timers
  use timer_mod,                          only: timer
  use field_mod,                          only: field_type
  use vertical_sl_theta_kernel_mod,       only: vertical_sl_theta_kernel_type
  use vertical_sl_rho_kernel_mod,         only: vertical_sl_rho_kernel_type
  use transport_config_mod,               only: vertical_sl_order,       &
                                                vertical_sl_order_cubic, &
                                                vertical_sl_order_quintic
  use log_mod,                            only: log_event, LOG_LEVEL_ERROR
  use mesh_mod,                           only: mesh_type
  use transport_enumerated_types_mod,     only: splitting_strang_vhv
  use transport_metadata_mod,             only: transport_metadata_type
  use transport_runtime_alg_mod,          only: transport_runtime_type
  use transport_runtime_collection_mod,   only: get_transport_runtime
  use fs_continuity_mod,                  only: W3, Wtheta

  implicit none

  private

  public :: vertical_sl_advective_alg

contains

  !-----------------------------------------------------------------------------
  !> @brief An algorithm to interpolate data to departure points (SL-advection).
  !!
  !> @param[in,out]  field_np1          Field at timestep n+1 = field_n at departure point
  !> @param[in]      field_n            Field at timestep n
  !> @param[in]      dt                 Time step (local)
  !> @param[in]      transport_metadata Metadata for the advection of field
  subroutine vertical_sl_advective_alg( field_np1, field_n, dt, transport_metadata )

    implicit none

    type(field_type),              intent(inout) :: field_np1
    type(field_type),              intent(in)    :: field_n
    real(kind=r_def),              intent(in)    :: dt
    type(transport_metadata_type), intent(in)    :: transport_metadata

    type(field_type)          :: dep_pts_z
    type(field_type), pointer :: dep_pts_z_get => null()
    type(mesh_type),  pointer :: mesh => null()
    type(transport_runtime_type), pointer :: transport_runtime => null()

    if ( subroutine_timers ) call timer( 'vertical_sl_advective_alg' )

    if ( vertical_sl_order /= vertical_sl_order_cubic   .and. &
         vertical_sl_order /= vertical_sl_order_quintic       ) then
      call log_event( "vertical_sl_advective: Invalid vertical_sl_order", LOG_LEVEL_ERROR )
    end if

    ! Get transport_runtime
    mesh => field_n%get_mesh()
    transport_runtime => get_transport_runtime(mesh)

    ! Get departure points from transport_runtime
    dep_pts_z_get  => transport_runtime%get_departure_points_z_w2( field_n%get_mesh_id() )
    call dep_pts_z%initialise( vector_space = dep_pts_z_get%get_function_space() )
    call invoke( setval_X(dep_pts_z, dep_pts_z_get) )

    ! If Strang splitting divide departure distance by 2
    if ( transport_metadata%get_splitting() ==  splitting_strang_vhv ) then
      call invoke( inc_a_times_X(0.5_r_def, dep_pts_z) )
    end if

    ! Compute SL advective transport (vertical only) of
    !field_np1 =  field_n_D
    call invoke( setval_X( field_np1, field_n ) )

    select case ( field_n%which_function_space() )
      case ( W3 )
        call invoke( vertical_sl_rho_kernel_type( dep_pts_z, field_np1 ) )
      case ( Wtheta )
        call invoke( vertical_sl_theta_kernel_type( dep_pts_z, field_np1 ) )
      case default
        call log_event( "Vertical_sl_advective_alg only valid for W3 & Wtheta spaces", LOG_LEVEL_ERROR )
    end select

    nullify( dep_pts_z_get, mesh, transport_runtime )

    if ( subroutine_timers ) call timer( 'vertical_sl_advective_alg' )

  end subroutine vertical_sl_advective_alg

end module vertical_sl_advective_alg_mod
