!-----------------------------------------------------------------------------
! (C) Crown copyright 2021 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!> @brief Map a W2 field to the shifted W2 mesh.

module map_w2_to_sh_w2_alg_mod

  use constants_mod,                    only: i_def
  use extrusion_mod,                    only: SHIFTED, DOUBLE_LEVEL
  use field_mod,                        only: field_type
  use fs_continuity_mod,                only: Wtheta
  use geometric_constants_mod,          only: get_dA_at_w2, &
                                              get_height
  use mesh_mod,                         only: mesh_type
  use mesh_collection_mod,              only: mesh_collection
  use sample_w2_to_sh_w2_kernel_mod,    only: sample_w2_to_sh_w2_kernel_type

  implicit none

  private

  public :: sample_w2_to_sh_w2_alg

contains

  !> @brief Sample a W2 field in the shifted W2 function space.
  !> @param[in,out] w2_field_shifted The W2 field sampled in shifted W2
  !> @param[in]     w2_field         The W2 field to map
  subroutine sample_w2_to_sh_w2_alg(w2_field_shifted, w2_field)

    implicit none

    ! Arguments
    type(field_type), intent(inout) :: w2_field_shifted
    type(field_type), intent(in)    :: w2_field

    ! Internal arguments
    integer(kind=i_def)          :: primary_mesh_id
    integer(kind=i_def)          :: shifted_mesh_id
    integer(kind=i_def)          :: double_level_mesh_id
    type(mesh_type),     pointer :: primary_mesh => null()
    type(mesh_type),     pointer :: shifted_mesh => null()
    type(mesh_type),     pointer :: double_level_mesh => null()
    type(field_type),    pointer :: dA_w2 => null()
    type(field_type),    pointer :: dA_w2_shifted => null()
    type(field_type),    pointer :: dA_w2_double_level => null()
    type(field_type),    pointer :: height_wt
    type(field_type),    pointer :: height_wt_shifted

    ! Get mesh information
    primary_mesh => w2_field%get_mesh()
    shifted_mesh => mesh_collection%get_mesh(primary_mesh, SHIFTED)
    double_level_mesh => mesh_collection%get_mesh(primary_mesh, DOUBLE_LEVEL)
    primary_mesh_id = primary_mesh%get_id()
    shifted_mesh_id = shifted_mesh%get_id()
    double_level_mesh_id = double_level_mesh%get_id()
    dA_w2 => get_dA_at_w2(primary_mesh_id)
    dA_w2_shifted => get_dA_at_w2(shifted_mesh_id)
    dA_w2_double_level => get_dA_at_w2(double_level_mesh_id)

    ! Get height
    height_wt => get_height(WTHETA, primary_mesh_id)
    height_wt_shifted => get_height(WTHETA, shifted_mesh_id)

    ! Map field to shifted mesh
    call invoke( sample_w2_to_sh_w2_kernel_type( w2_field_shifted,   &
                                                 w2_field,           &
                                                 dA_w2_shifted,      &
                                                 dA_w2,              &
                                                 dA_w2_double_level, &
                                                 height_wt_shifted,  &
                                                 height_wt           &
                                                 ) )

    nullify( primary_mesh, shifted_mesh, double_level_mesh, &
             dA_w2, dA_w2_shifted, dA_w2_double_level,      &
             height_wt, height_wt_shifted )

  end subroutine sample_w2_to_sh_w2_alg

end module map_w2_to_sh_w2_alg_mod
