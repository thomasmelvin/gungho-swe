!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!>@brief Algorithm to compute various conserved quantities
!>@details Computes various conserved quantities and checks how
!> accurately they have been conserved
module conservation_algorithm_mod

  use compute_total_aam_kernel_mod,    only: compute_total_aam_kernel_type
  use compute_total_energy_kernel_mod, only: compute_total_energy_kernel_type
  use compute_total_mass_kernel_mod,   only: compute_total_mass_kernel_type

  use constants_mod,                   only: r_def, i_def, i_timestep
  use function_space_collection_mod,   only: function_space_collection
  use field_mod,                       only: field_type
  use finite_element_config_mod,       only: element_order, &
                                             nqp_exact
  use fs_continuity_mod,               only: W3
  use function_space_mod,              only: function_space_type
  use log_mod,                         only: log_event,         &
                                             log_scratch_space, &
                                             LOG_LEVEL_INFO
  use mesh_mod,                        only: mesh_type
  use quadrature_xyoz_mod,             only: quadrature_xyoz_type
  use quadrature_rule_gaussian_mod,    only: quadrature_rule_gaussian_type
  use physical_op_constants_mod,       only: get_geopotential
  use geometric_constants_mod,         only: get_coordinates, &
                                             get_panel_id
  use io_config_mod,                   only: subroutine_timers
  use planet_config_mod,               only: scaled_omega, cv
  use timer_mod,                       only: timer

  implicit none

  private
  public :: conservation_algorithm

contains

  !>@brief Algorithm to compute various conserved quantities
  !>@details Computes various conserved quantities and checks how
  !> accurately they have been conserved
  !> @param[in] rho Density field
  !> @param[in] u Velocity field
  !> @param[in] theta Potential temperature field
  !> @param[in] exner Exner pressure field
  subroutine conservation_algorithm( rho,          &
                                     u,            &
                                     theta,        &
                                     exner)

    implicit none

    ! Prognostic fields
    type( field_type ), intent( in ) :: u, rho, theta, exner

    ! Local variables
    type( field_type ), pointer :: geopotential => null()
    type( quadrature_xyoz_type ) :: qr
    type( quadrature_rule_gaussian_type ) :: quadrature_rule
    ! Coordinate fields
    type( field_type ), pointer :: chi(:) => null()
    type( field_type ), pointer :: panel_id => null()

    type(function_space_type), pointer :: w3_fs => null()

    type( field_type ) :: mass, aam, energy

    real(kind=r_def) :: total_mass, total_aam, total_energy
    type(mesh_type), pointer :: mesh => null()

    if ( subroutine_timers ) call timer('conservation_alg')

    ! Get a quadrature rule
    qr = quadrature_xyoz_type(nqp_exact, quadrature_rule)
    mesh => rho%get_mesh()
    w3_fs => function_space_collection%get_fs( mesh, element_order, W3)

    geopotential => get_geopotential(mesh%get_id())
    chi          => get_coordinates(mesh%get_id())
    panel_id     => get_panel_id(mesh%get_id())

    ! Initialise Mass, Energy and Axial Angular Momentum fields
    call mass%initialise( vector_space = w3_fs )
    call energy%initialise( vector_space = w3_fs )
    call aam%initialise( vector_space = w3_fs )

    ! Compute conserved quantities
    call invoke( name = "Compute conserved quantities",                   &
    ! Compute Total Mass
                 compute_total_mass_kernel_type(mass, rho, chi,           &
                                                panel_id, qr),            &
                 sum_X(total_mass, mass),                                 &
    ! Compute Total Energy
                 compute_total_energy_kernel_type(energy,                 &
                                                  u, rho, exner, theta,   &
                                                  geopotential, chi,      &
                                                  panel_id, cv, qr),      &
                 sum_X(total_energy, energy),                             &
    ! Compute Total Axial Angular Momentum
                 compute_total_aam_kernel_type(aam, u, rho, chi,          &
                                               panel_id, scaled_omega,    &
                                               qr),                       &
                 sum_X(total_aam, aam) )

    write( log_scratch_space, '(A, E32.24)') &
          'Conservation: dry mass ', total_mass
    call log_event( log_scratch_space, LOG_LEVEL_INFO )
    write( log_scratch_space, '(A, E32.24)') &
          'Conservation: dry energy ', total_energy
    call log_event( log_scratch_space, LOG_LEVEL_INFO )
    write( log_scratch_space, '(A, E32.24)') &
          'Conservation: dry aam ', total_aam
    call log_event( log_scratch_space, LOG_LEVEL_INFO )


    nullify( geopotential )
    nullify( chi, panel_id, w3_fs, mesh )

    if ( subroutine_timers ) call timer('conservation_alg')

  end subroutine conservation_algorithm

end module conservation_algorithm_mod
