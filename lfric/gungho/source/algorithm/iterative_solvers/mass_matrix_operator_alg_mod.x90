!-----------------------------------------------------------------------------
! (C) Crown copyright 2018 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> @brief Application of the mass matrix operator.
!>
!> @details Applies the appropriate mass matrix operator to a field.
module mass_matrix_operator_alg_mod

  use linear_operator_mod,                only: abstract_linear_operator_type
  use vector_mod,                         only: abstract_vector_type
  use field_mod,                          only: field_type
  use field_vector_mod,                   only: field_vector_type
  use constants_mod,                      only: i_def, r_def, l_def
  use log_mod,                            only: log_event,       &
                                                LOG_LEVEL_ERROR, &
                                                LOG_LEVEL_INFO,  &
                                                log_scratch_space
  use operator_mod,                       only: operator_type
  implicit none

  type, public, extends(abstract_linear_operator_type) :: &
                        mass_matrix_operator_type
  private
  logical(kind=l_def)          :: apply_bc
  type(operator_type), pointer :: mass_matrix => null()
    contains
    !> Over-ride the abstract interface
    !> param[in,out] self A linear operator
    !> param[in] x A field vector the linear operator is applied to
    !> param[in,out] y A field vector, the result
    procedure, public  :: apply => apply_mass_matrix_operator
    procedure, private :: apply_mass_matrix_operator

    final :: destroy_mass_matrix_operator

  end type mass_matrix_operator_type

  interface mass_matrix_operator_type
    module procedure mass_matrix_operator_constructor
  end interface

contains

  !> @brief Construct new instance of type.
  !>
  !> @details Construct the mass matrix operator object.
  !> @param[in] mass_matrix Operator to apply
  !> @param[in] apply_bc Flag to control application of boundary condition kernel
  !> @return Instance of the mass matrix operator
  function mass_matrix_operator_constructor(mass_matrix, apply_bc) result(self)
    implicit none

    type(mass_matrix_operator_type)         :: self
    logical(kind=l_def),         intent(in) :: apply_bc
    type(operator_type), target, intent(in) :: mass_matrix

    call log_event( 'Constructing mass matrix operator...', LOG_LEVEL_INFO )

    self%apply_bc = apply_bc
    self%mass_matrix => mass_matrix
    call log_event( 'done', LOG_LEVEL_INFO )

  end function mass_matrix_operator_constructor

  !> @brief Apply mass matrix operator to a pressure field to obtain \f$y=Mx\f$.
  !>
  !> @param[in,out] self Instance of mass_matrix_operator_type
  !> @param[in] x Field \f$x\f$ to apply operator to
  !> @param[in,out] y Resulting field \f$y=Mx\f$
  subroutine apply_mass_matrix_operator(self, x, y)

    use enforce_bc_kernel_mod,    only: enforce_bc_kernel_type
    use matrix_vector_kernel_mod, only: matrix_vector_kernel_type

    implicit none

    class(mass_matrix_operator_type), intent(inout) :: self
    class(abstract_vector_type),      intent(in)    :: x
    class(abstract_vector_type),      intent(inout) :: y

    ! Workaround for PSyclone to get pointers of the correct type for x and y
    type(field_type), pointer :: x_vec => null(), &
                                 y_vec => null()

    select type (x)

    type is (field_vector_type)

      select type (y)

      type is (field_vector_type)
        ! Get pointers to x and y abstract types
        x_vec => x%get_field(1)
        y_vec => y%get_field(1)

        call invoke( setval_c(y_vec, 0.0_r_def), &
                     matrix_vector_kernel_type(y_vec, x_vec, self%mass_matrix) )
        if (self%apply_bc) call invoke( enforce_bc_kernel_type( y_vec ) )

      class default
        write(log_scratch_space, '(A)') &
              "mass_matrix_operator_alg_mod: incorrect vector_type argument y"
        call log_event(log_scratch_space, LOG_LEVEL_ERROR)

      end select

    class default

      write(log_scratch_space, '(A)') &
            "mass_matrix_operator_alg_mod: incorrect vector_type argument x"
      call log_event(log_scratch_space, LOG_LEVEL_ERROR)

    end select

    nullify( x_vec, y_vec )

  end subroutine apply_mass_matrix_operator

  !> @brief Finalizer for the mass matrix operator.
  !>
  !> @param [in,out] self The mass matrix operator
  subroutine destroy_mass_matrix_operator(self)
    implicit none
    type(mass_matrix_operator_type), intent(inout) :: self
    nullify( self%mass_matrix )
  end subroutine destroy_mass_matrix_operator

end module mass_matrix_operator_alg_mod
