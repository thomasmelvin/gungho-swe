!-----------------------------------------------------------------------------
! (C) Crown copyright 2018 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!>@brief Trivial preconditioner for a field vector
!>
!>@details This preconditioner simply copies the fields, i.e. realises the
!> operation \f$ y = P x = x\f$

module null_preconditioner_alg_mod
  use vector_mod,         only : abstract_vector_type
  use field_vector_mod,   only : field_vector_type
  use preconditioner_mod, only : abstract_preconditioner_type
  use log_mod,            only : log_event, &
                                 LOG_LEVEL_INFO, &
                                 LOG_LEVEL_ERROR, &
                                 log_scratch_space
  use constants_mod,      only : i_def, r_def

  implicit none

  type, public, extends(abstract_preconditioner_type) :: null_preconditioner_type

   integer(kind=i_def) :: useless

   contains
     ! Overide the (abstract interface) for application of a preconditioner
     ! \f$y = P.x\f$
     procedure, public  :: apply => apply_null_preconditioner
     procedure, private :: apply_null_preconditioner

     final :: destroy_null_preconditioner

  end type null_preconditioner_type

  ! Overload the default structure constructor
  interface null_preconditioner_type
     module procedure null_preconditioner_constructor
  end interface

contains

  !> @brief Construct a <code> null_preconditioner_type</code> object
  !>
  !> @return self the constructed preconditioner object
  function null_preconditioner_constructor() result(self)

    use log_mod,                       only: log_event, LOG_LEVEL_INFO

    implicit none

    type(null_preconditioner_type)  :: self

    call log_event( 'Constructing null preconditioner...', &
         LOG_LEVEL_INFO )
    ! Make it do something
    self%useless = 1
    call log_event( 'done', LOG_LEVEL_INFO )

  end function null_preconditioner_constructor


  !>@brief Apply the preconditioner to calculate \f$y = P.x = x\f$
  !>
  !>@details Apply the trivial (null) preconditioner by setting \f$y=x\f$
  !>
  !>@param[inout] self instance of type null_preconditioner_type
  !>@param[inout] x field-vector containing the right hand side of the pressure
  !>@param[inout] y field-vector containing the solution
  subroutine apply_null_preconditioner(self, x, y)

    implicit none
    class(null_preconditioner_type), intent(inout) :: self
    class(abstract_vector_type),        intent(in)    :: x
    class(abstract_vector_type),        intent(inout) :: y

    select type(x)
    type is(field_vector_type)
       select type(y)
       type is(field_vector_type)
          call y%copy(x)
       class default
          write(log_scratch_space, '(A)') &
                "null_preconditioner_mod: incorrect vector_type argument y"
          call log_event(log_scratch_space, LOG_LEVEL_ERROR)
       end select
    class default
       write(log_scratch_space, '(A)') "null_preconditioner_mod: incorrect vector_type argument x"
       call log_event(log_scratch_space, LOG_LEVEL_ERROR)
    end select

  end subroutine apply_null_preconditioner

  !>@brief Destructor
  !>
  !>@param[inout] self Instance of type to be destroyed
  subroutine destroy_null_preconditioner(self)
    implicit none
    type(null_preconditioner_type), intent(inout) :: self

  end subroutine destroy_null_preconditioner

end module null_preconditioner_alg_mod

