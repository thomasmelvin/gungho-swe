!-----------------------------------------------------------------------------
! (C) Crown copyright 2019 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!>@brief Set prognostic fields from FD start dump
module map_fd_to_prognostics_alg_mod
  use constants_mod,                   only: r_def, i_def
  use log_mod,                         only: log_event,         &
                                             log_scratch_space, &
                                             LOG_LEVEL_INFO,    &
                                             LOG_LEVEL_TRACE
  use base_mesh_config_mod,            only: geometry,          &
                                             geometry_spherical
  ! Derived Types
  use field_mod,                       only: field_type
  use field_collection_mod,            only: field_collection_type
  use mesh_mod,                        only: mesh_type
  use operator_mod,                    only: operator_type


  use quadrature_xyoz_mod,             only: quadrature_xyoz_type
  use quadrature_rule_gaussian_mod,    only: quadrature_rule_gaussian_type
  use fem_constants_mod,               only: get_rmultiplicity
  use geometric_constants_mod,         only: get_height,          &
                                             get_coordinates,     &
                                             get_panel_id,        &
                                             get_da_at_w2
  use physical_op_constants_mod,       only: get_coriolis,  &
                                             get_u_lon_map, &
                                             get_u_lat_map, &
                                             get_u_up_map
  use fs_continuity_mod,               only: W3, W2
  use initialization_config_mod,       only: hydro_coriolis, read_w2h_wind
  use planet_config_mod,               only: gravity, p_zero, kappa, rd, cp
  use sort_ref_kernel_mod,             only: sort_ref_kernel_type
  use io_config_mod,                   only: subroutine_timers
  use timer_mod,                       only: timer
  use combine_w2_field_kernel_mod,     only: combine_w2_field_kernel_type

  implicit none

  private
  public :: map_fd_to_prognostics, hydrostatic_balance, set_wind

contains

  !> @details Setting FE prognostic fields from FD fields
  !> @param[in,out] prognostic_fields  Collection of prognostic fields
  !> @param[in,out] mr                 Array of moisture mixing ratios
  !> @param[in]     fd_fields          Collection of input Finite Difference
  !>                                   fields
  subroutine map_fd_to_prognostics(prognostic_fields, mr, moist_dyn,          &
                                   fd_fields)

    use mr_indices_mod,             only : imr_v, imr_cl, imr_ci, imr_r, &
                                           imr_s, imr_g
    use moist_dyn_mod,              only : num_moist_factors, gas_law
    use moist_dyn_factors_alg_mod,  only : moist_dyn_factors_alg

    implicit none

    ! FE Prognostic fields
    type(field_collection_type), intent( inout ) :: prognostic_fields
    type(field_type),            intent( inout ) :: mr(:)
    type(field_type),            intent( inout ) :: moist_dyn(num_moist_factors)

    type( field_collection_type), intent( in ) :: fd_fields

    !Local dereferenced fields
    type( field_type ), pointer :: theta                  => null()
    type( field_type ), pointer :: rho                    => null()
    type( field_type ), pointer :: u                      => null()
    type( field_type ), pointer :: exner                  => null()

    ! FD  fields
    type( field_type ), pointer :: h_wind_in_w2h          => null()
    type( field_type ), pointer :: ew_wind_in_w3          => null()
    type( field_type ), pointer :: ns_wind_in_w3          => null()
    type( field_type ), pointer :: dry_rho_in_w3          => null()
    type( field_type ), pointer :: upward_wind_in_wtheta  => null()
    type( field_type ), pointer :: theta_in_wtheta        => null()
    type( field_type ), pointer :: mv_in_wtheta           => null()
    type( field_type ), pointer :: mcl_in_wtheta          => null()
    type( field_type ), pointer :: mcf_in_wtheta          => null()
    type( field_type ), pointer :: mr_in_wtheta           => null()
    type( field_type ), pointer :: dA => null()
    integer(i_def)              :: mesh_id

    !FD (source) fields
    if ( read_w2h_wind ) then
      h_wind_in_w2h       => fd_fields%get_field('h_wind')
    else
      ew_wind_in_w3       => fd_fields%get_field('ew_wind_in_w3')
      ns_wind_in_w3       => fd_fields%get_field('ns_wind_in_w3')
    end if

    dry_rho_in_w3         => fd_fields%get_field('dry_rho_in_w3')
    upward_wind_in_wtheta => fd_fields%get_field('upward_wind_in_wtheta')
    theta_in_wtheta       => fd_fields%get_field('theta_in_wtheta')
    mv_in_wtheta          => fd_fields%get_field('mv_in_wtheta')
    mcl_in_wtheta         => fd_fields%get_field('mcl_in_wtheta')
    mcf_in_wtheta         => fd_fields%get_field('mcf_in_wtheta')
    mr_in_wtheta          => fd_fields%get_field('mr_in_wtheta')

    !Prognostic (target) fields
    u                     => prognostic_fields%get_field('u')
    theta                 => prognostic_fields%get_field('theta')
    exner                 => prognostic_fields%get_field('exner')
    rho                   => prognostic_fields%get_field('rho')

    ! Some variables should coming in from the restart file, but currently
    ! they are not output by UM2LFRIC and are set to zero or a default value
    ! This will need to be reviewed if this becomes a checkpoint-restart
    ! routine and/or um2lfric is updated for GAL physics
    call invoke( setval_x(theta, theta_in_wtheta),    &
                 setval_x(rho, dry_rho_in_w3),        &
                 setval_x(mr(imr_v), mv_in_wtheta),   &
                 setval_x(mr(imr_cl), mcl_in_wtheta), &
                 setval_x(mr(imr_ci), mcf_in_wtheta), &
                 setval_x(mr(imr_r), mr_in_wtheta),   &
                 setval_c(mr(imr_s), 0.0_r_def),      &
                 setval_c(mr(imr_g), 0.0_r_def),      &
                 setval_c(exner, 0.0_r_def),          &
                 setval_c(upward_wind_in_wtheta, 0.0_r_def))

    if ( read_w2h_wind )then
     ! We read in the horizontal (normal to face) winds on the w2h points
     mesh_id = u%get_mesh_id()
     dA => get_da_at_w2(mesh_id)
     call invoke( combine_w2_field_kernel_type( u, h_wind_in_w2h, &
                                                upward_wind_in_wtheta),    &
                  inc_X_times_Y(u, dA) )
    else
     ! We read in cell centred zonal/meridional winds
      call set_wind( u, ew_wind_in_w3, ns_wind_in_w3, upward_wind_in_wtheta )
    end if

    ! Update factors for moist dynamics
    call moist_dyn_factors_alg( moist_dyn, mr )
    ! Remove any static instability
    call invoke( sort_ref_kernel_type(theta) )
    ! Initialize hydrostatically balanced exner field
    call hydrostatic_balance( exner, rho, theta, u, moist_dyn )

    call log_event( "Gungho: Set prognostic fields from FD fields", LOG_LEVEL_INFO )

  end subroutine map_fd_to_prognostics

  !> @param[in,out] u Wind (FE)
  !> @param[in] u_lon Zonal Wind (FD)
  !> @param[in] u_lat Meridional Wind (FD)
  !> @param[in] u_up Upward Wind (FD)
  subroutine set_wind(u, u_lon, u_lat, u_up)

    use enforce_bc_kernel_mod,       only: enforce_bc_kernel_type
    use mass_matrix_solver_alg_mod,  only: mass_matrix_solver_alg
    use matrix_vector_kernel_mod,    only: matrix_vector_kernel_type
    implicit none

    type( field_type ), intent( inout ) :: u
    type( field_type ), intent( in )    :: u_lat, u_lon, u_up

    type( field_type )                    :: r_u
    type( operator_type ), pointer        :: u_lon_map => null()
    type( operator_type ), pointer        :: u_lat_map => null()
    type( operator_type ), pointer        :: u_up_map => null()

    type( mesh_type ), pointer :: mesh => null()

    if ( subroutine_timers ) call timer("set_wind")

    call u%copy_field_properties(r_u)

    mesh => u%get_mesh()

    u_lon_map => get_u_lon_map( mesh%get_id() )
    u_lat_map => get_u_lat_map( mesh%get_id() )
    u_up_map  => get_u_up_map( mesh%get_id() )

    call invoke( setval_c( u,   0.0_r_def ),                       &
                 setval_c( r_u, 0.0_r_def ),                       &
                 matrix_vector_kernel_type(r_u, u_lon, u_lon_map), &
                 matrix_vector_kernel_type(r_u, u_lat, u_lat_map), &
                 matrix_vector_kernel_type(r_u, u_up, u_up_map),   &
                 enforce_bc_kernel_type( r_u ) )
    call mass_matrix_solver_alg(u, r_u)

    nullify( mesh )

    if ( subroutine_timers ) call timer("set_wind")

  end subroutine set_wind

  !> @param[in,out] exner Exner pressure
  !> @param[in] theta     Theta
  !> @param[in] rho       Dry density
  !> @param[in] u         Wind
  !> @param[in] moist_dyn Moisture arrays for dynamics
  subroutine hydrostatic_balance(exner, rho, theta, u, moist_dyn)

    use hydrostatic_eos_exner_kernel_mod,  only : hydrostatic_eos_exner_kernel_type
    use hydrostatic_coriolis_kernel_mod,   only : hydrostatic_coriolis_kernel_type
    use moist_dyn_mod,                     only : num_moist_factors
    use matrix_vector_kernel_mod,          only : matrix_vector_kernel_type
    use convert_hdiv_field_kernel_mod,     only : convert_hdiv_field_kernel_type
    use nodal_xyz_coordinates_kernel_mod,  only : nodal_xyz_coordinates_kernel_type
    use psykal_builtin_light_mod,          only : invoke_convert_cart2sphere_vector
    use mass_matrix_solver_alg_mod,        only : mass_matrix_solver_alg

    implicit none

    type( field_type ), intent( inout ) :: exner
    type( field_type ), intent( in )    :: theta, rho, u
    type( field_type ), intent( in )    :: moist_dyn(num_moist_factors)

    type(field_type)               :: c_terms(3)
    type(field_type)               :: physical_chi(3)
    type(field_type )              :: coriolis_term, r_c
    type(field_type),      pointer :: w2_rmultiplicity => null()
    type(field_type),      pointer :: chi(:) => null()
    type(field_type),      pointer :: panel_id => null()
    type(field_type),      pointer :: height_w3 => null()
    type(operator_type),   pointer :: coriolis => null()
    type(mesh_type),       pointer :: mesh => null()
    integer(i_def)                 :: i

    mesh => exner%get_mesh()

    height_w3 => get_height( W3, mesh%get_id() )

    if (hydro_coriolis) then

      chi              => get_coordinates( mesh%get_id() )
      panel_id         => get_panel_id( mesh%get_id() )
      coriolis         => get_coriolis( mesh%get_id() )
      w2_rmultiplicity => get_rmultiplicity( W2, mesh%get_id() )

      ! Create intermediate fields.
      do i = 1,3
        call u%copy_field_properties(c_terms(i))
        call u%copy_field_properties(physical_chi(i))
        call invoke( setval_c(c_terms(i), 0.0_r_def) )
      end do
      call coriolis_term%initialise( vector_space=u%get_function_space() )
      call r_c%initialise( vector_space=u%get_function_space() )

      ! Apply Coriolis mass matrix.
      call invoke( setval_c(r_c, 0.0_r_def) )
      call invoke( matrix_vector_kernel_type( r_c, u, coriolis ) )

      ! Calculate Coriolis values.
      call invoke( setval_c( coriolis_term, 0.0_r_def ),      &
                   enforce_bc_kernel_type( r_c ) )
      call mass_matrix_solver_alg(coriolis_term, r_c)

      ! Convert Coriolis term to 3 components (XYZ) in physical space.
      call invoke( convert_hdiv_field_kernel_type( c_terms, coriolis_term, &
                                                   chi, panel_id ) )

      do i = 1,3
        call invoke( inc_X_times_Y(c_terms(i), w2_rmultiplicity) )
      end do

      ! Convert coordinate field to physical space, i.e. to chi at W2 nodes.
      call invoke( nodal_xyz_coordinates_kernel_type(physical_chi, chi, panel_id) )

      ! Convert to standard SI units (m/s) in spherical coordinates.
      if ( geometry == geometry_spherical ) then
        call invoke_convert_cart2sphere_vector(c_terms, physical_chi)
      end if

      ! Initialize working up from theta distro and hydrostatic balance
      ! with Coriolis terms.
      call invoke( hydrostatic_coriolis_kernel_type( exner, rho, theta,      &
                                                     c_terms(3),             &
                                                     moist_dyn, height_w3,   &
                                                     gravity, p_zero, kappa, &
                                                     rd, cp ) )

    else

      ! Initialize working up from theta distro and hydrostatic balance.
      call invoke( hydrostatic_eos_exner_kernel_type( exner, rho, theta,      &
                                                      moist_dyn, height_w3,   &
                                                      gravity, p_zero, kappa, &
                                                      rd, cp ) )
    end if

    nullify( mesh )

  end subroutine hydrostatic_balance

end module map_fd_to_prognostics_alg_mod
