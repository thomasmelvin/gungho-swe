!-----------------------------------------------------------------------------
! (c) Crown copyright 2021 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-------------------------------------------------------------------------------
!
!> @brief Compute moisture mixing ratios for an unsaturated atmosphere.

module init_unsaturated_profile_alg_mod

use constants_mod,                   only: r_def, i_def
use field_bundle_mod,                only: set_bundle_scalar, clone_bundle
use field_mod,                       only: field_type
use function_space_mod,              only: function_space_type
use idealised_config_mod,            only: test, test_grabowski_clark
use init_gungho_prognostics_alg_mod, only: init_exner_field, &
                                           init_mr_fields,   &
                                           init_rho_field
use log_mod,                         only: LOG_LEVEL_ERROR,  &
                                           LOG_LEVEL_INFO,   &
                                           log_event,        &
                                           log_scratch_space
use moist_dyn_factors_alg_mod,       only: moist_dyn_factors_alg
use moist_dyn_mod,                   only: num_moist_factors
use mr_indices_mod,                  only: nummr, imr_v, imr_cl
use norm_alg_mod,                    only: rel_l2_error_alg
use physics_mappings_alg_mod,        only: map_physics_scalars
use planet_config_mod,               only: rd, p_zero, kappa, &
                                           recip_epsilon
use relative_humidity_kernel_mod,    only: relative_humidity_kernel_type

implicit none

private

!-------------------------------------------------------------------------------
! Contained functions/subroutines
!-------------------------------------------------------------------------------
public :: init_unsaturated_profile_alg

contains

!> @brief Compute moisture mixing ratios for an unsaturated atmosphere.
!> @details The initial moisture mixing ratio fields are computed for an
!>          unsaturated atmosphere, whose thermodynamics are specified in terms
!>          of a relative humidity field and initially in hydrostatic balance
!>
!>          Solving this problem is complex, as the moisture field contributes
!>          to calculating the hydrostatically balanced pressure, while the
!>          pressure is used to calculate the vapour saturation field. We use
!>          an iterative procedure to arrive at appropriate values.
!>
!> @param[in] theta           potential temperature field
!> @param[in,out] mr          array of moisture mixing ratio fields
!> @param[in,out] exner       Exner pressure field
!> @param[in,out] rho         dry density field
!> @param[in,out] moist_dyn   array of fields with moist dynamics factors
subroutine init_unsaturated_profile_alg( theta, mr, exner, rho, moist_dyn )

  implicit none

  ! Arguments
  type(field_type), intent(in)    :: theta
  type(field_type), intent(inout) :: mr(nummr)
  type(field_type), intent(inout) :: exner
  type(field_type), intent(inout) :: rho
  type(field_type), intent(inout) :: moist_dyn(num_moist_factors)

  ! Internal variables
  type(field_type) :: latest_exner      ! latest guess for exner field
  type(field_type) :: exner_at_wt       ! Exner pressure converted to Wtheta
  type(field_type) :: specified_rel_hum ! specified relative humidity field
  type(field_type) :: latest_rel_hum    ! latest relative humidity field
  type(field_type) :: latest_mr_v       ! latest water vapour mixing ratio field

  type(function_space_type), pointer :: wt_fs => null()

  integer(kind=i_def) :: outer_count, inner_count
  real(kind=r_def)    :: initial_time, errornorm, one_minus_delta

  ! These parameters are somewhat arbitrary and have been found by trial
  ! and error. However it is not super-important to maximise efficiency
  ! here as this is only used in the initialisation process for specific
  ! idealised tests.
  real(kind=r_def),    parameter :: delta = 0.8_r_def ! damping factor
  real(kind=r_def),    parameter :: tol_outer = 1.0e-8_r_def
  real(kind=r_def),    parameter :: tol_inner = 1.0e-6_r_def
  integer(kind=i_def), parameter :: max_outer_iterations = 20
  integer(kind=i_def), parameter :: max_inner_iterations = 3

  call log_event( "Gungho: Using unsaturated profile initialisation", LOG_LEVEL_INFO )

  !----------------------------------------------------------------------------!
  ! Initialise fields
  !----------------------------------------------------------------------------!

  initial_time = 0.0_r_def
  one_minus_delta = 1.0_r_def - delta
  wt_fs => theta%get_function_space()
  call specified_rel_hum%initialise( vector_space = wt_fs )
  call latest_rel_hum%initialise( vector_space = wt_fs )
  call latest_mr_v%initialise( vector_space = wt_fs )
  call latest_exner%initialise( vector_space = exner%get_function_space() )
  call exner_at_wt%initialise( vector_space = wt_fs )

  !----------------------------------------------------------------------------!
  ! Specify background relative humidity field
  !----------------------------------------------------------------------------!

  select case( test )
  case( test_grabowski_clark )
      call invoke( setval_c(specified_rel_hum, 0.2_r_def ) )

    case default
      call log_event( "Gungho: Your idealised test is not compatible " // &
                      "with the unsaturated profile routine", LOG_LEVEL_ERROR )
  end select

  !----------------------------------------------------------------------------!
  ! Do nested loops to compute background prognostic fields
  !----------------------------------------------------------------------------!

  ! Set initial moisture fields to be zero
  ! This will not be changed if moisture_formulation = 'dry'
  call set_bundle_scalar(0.0_r_def, mr, nummr)

  ! First guess for mr_v is 0.02
  call invoke( setval_c( mr(imr_v), 0.02_r_def) )

  ! Give first guess for Exner
  call moist_dyn_factors_alg( moist_dyn, mr )
  call init_exner_field( exner, theta, moist_dyn, initial_time )

  ! Outer loop -- compute exner from hydrostatic balance
  do outer_count = 1, max_outer_iterations

    ! Find exner and update best guess
    call moist_dyn_factors_alg( moist_dyn, mr )
    call init_exner_field( latest_exner, theta, moist_dyn, initial_time )
    call invoke( inc_aX_plus_bY( one_minus_delta, exner, &
                                 delta, latest_exner ) )

    ! Convert exner to Wtheta
    call map_physics_scalars( exner_at_wt, exner )


    ! Compute best guess of relative humidity
    call invoke( relative_humidity_kernel_type( latest_rel_hum, mr(imr_v), &
                                                theta, exner_at_wt,        &
                                                recip_epsilon, kappa,      &
                                                p_zero ) )

    ! Check tolerance and break if we are close enough
    errornorm = rel_l2_error_alg( latest_rel_hum, specified_rel_hum )
    write(log_scratch_space, '(A,I5,A,E32.24)') &
      'Outer iteration: ', outer_count, ', Error-norm: ', errornorm
    call log_event(log_scratch_space, LOG_LEVEL_INFO)
    if (errornorm < tol_outer) then
      exit
    end if

    ! Inner loop -- Picard iteration to get water vapour
    do inner_count = 1, max_inner_iterations
      ! Find moisture mixing ratios and update best guess
      call invoke( X_divideby_Y( latest_mr_v, specified_rel_hum,             &
                                              latest_rel_hum ),              &
                   inc_X_times_Y( latest_mr_v, mr(imr_v) ),                  &
                   inc_aX_plus_bY( one_minus_delta, mr(imr_v),               &
                                   delta, latest_mr_v),                      &
                   relative_humidity_kernel_type( latest_rel_hum, mr(imr_v), &
                                                  theta, exner_at_wt,        &
                                                  recip_epsilon, kappa,      &
                                                  p_zero ) )

      ! Check tolerance and break if we are close enough
      errornorm = rel_l2_error_alg( latest_rel_hum, specified_rel_hum )
      write(log_scratch_space, '(A,I5,A,E32.24)') &
        'Inner iteration: ', inner_count, ', Error-norm: ', errornorm
      call log_event(log_scratch_space, LOG_LEVEL_INFO)
      if (errornorm < tol_inner) then
        exit
      end if
    end do ! inner loop

    ! Raise error if we reach maximum number of iterations
    if (outer_count == max_outer_iterations) then
      write(log_scratch_space, '(A,I5,A)') &
      'Unsaturated balance solver has not converged after ', outer_count, ' iterations'
      call log_event(log_scratch_space, LOG_LEVEL_ERROR)
    end if

  end do ! outer loop

  ! Update moist dynamics factors and readjust to get hydrostatic balance again
  call moist_dyn_factors_alg( moist_dyn, mr )
  call init_exner_field( exner, theta, moist_dyn, initial_time )

  !----------------------------------------------------------------------------!
  ! Apply perturbation to water vapour
  !----------------------------------------------------------------------------!

  ! Now apply perturbation to water vapour field
  call init_mr_fields( mr, theta, exner, rho, moist_dyn )

  ! Adjust the dry density field so that the pressure is kept the same
  call init_rho_field( rho, theta, exner, moist_dyn, initial_time )

  !----------------------------------------------------------------------------!
  ! Finalise internal fields and pointers
  !----------------------------------------------------------------------------!

  call specified_rel_hum%field_final()
  call latest_rel_hum%field_final()
  call latest_mr_v%field_final()
  call latest_exner%field_final()
  call exner_at_wt%field_final()
  nullify( wt_fs )

end subroutine init_unsaturated_profile_alg

end module init_unsaturated_profile_alg_mod
