!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------
!> @brief Algorithms to do field processing to produce generic and specific
!>        diagnostics for different I/O methods
module diagnostic_alg_mod
  use constants_mod,                    only: i_def, r_def, l_def, str_max_filename
  use finite_element_config_mod,        only: element_order
  use base_mesh_config_mod,             only: geometry, &
                                              geometry_spherical
  use planet_config_mod,                only: cp
  use mesh_mod,                         only: mesh_type
  use function_space_collection_mod,    only: function_space_collection
  use fs_continuity_mod,                only: W1, W2, W3, Wtheta, W2H
  use field_mod,                        only: field_type
  use operator_mod,                     only: operator_type
  use nodal_xyz_coordinates_kernel_mod, only: nodal_xyz_coordinates_kernel_type
  use psykal_lite_mod,                  only: invoke_compute_dof_level_kernel
  use psykal_builtin_light_mod,         only: invoke_convert_cart2sphere_vector, &
                                              invoke_pointwise_convert_xyz2llr
  use fem_constants_mod,                only: get_rmultiplicity
  use geometric_constants_mod,          only: get_coordinates,     &
                                              get_panel_id
  use norm_alg_mod,                     only: l2_norm_alg, rel_l2_error_alg
  use project_output_mod,               only: project_output
  use log_mod,                          only: log_event,         &
                                              log_scratch_space, &
                                              LOG_LEVEL_INFO,    &
                                              LOG_LEVEL_ERROR

  implicit none

  private
  public :: divergence_diagnostic_alg
  public :: hydbal_diagnostic_alg
  public :: scalar_nodal_diagnostic_alg
  public :: vector_nodal_diagnostic_alg
  public :: scalar_ugrid_diagnostic_alg
  public :: vorticity_diagnostic_alg
  public :: extract_w2h_diagnostic_alg
  public :: column_total_diagnostics_alg
  public :: calc_wbig_diagnostic_alg
  public :: pressure_diag_alg

contains

  !> @details Calculates the l2 error norm for wind divergence
  !> @param[in,out] divergence  Divergence field
  !> @param[in,out] l2          l2 norm
  !> @param[in] u               3D wind field
  !> @param[in] mesh            Mesh
  subroutine divergence_diagnostic_alg(divergence, l2, u, mesh)
    use dg_matrix_vector_kernel_mod,  only: dg_matrix_vector_kernel_type
    use fem_constants_mod,            only: get_inverse_w3_mass_matrix, &
                                            get_div
    use constants_mod,                only: pi

    implicit none
    type(field_type), intent(inout) :: divergence
    real(r_def), intent(inout)      :: l2
    type(field_type), intent(in)    :: u
    type(mesh_type),  intent(in), pointer :: mesh

    type(field_type)             :: div_u
    type(operator_type), pointer :: div => null(), m3_inv => null()

    call divergence%initialise( vector_space = function_space_collection%get_fs(mesh,element_order, W3) )
    call div_u%initialise( vector_space = function_space_collection%get_fs(mesh,element_order, W3) )
    div    => get_div(mesh%get_id())
    m3_inv => get_inverse_w3_mass_matrix(mesh%get_id())
    ! Compute l2 norm of area integrated quantity
    call invoke( dg_matrix_vector_kernel_type( div_u, u, div ),             &
                ! Convert to pointwise W3 field for output
                 dg_matrix_vector_kernel_type( divergence, div_u , m3_inv ) )
    l2 = l2_norm_alg(divergence)

  end subroutine divergence_diagnostic_alg

!=============================================================================!
  !> @details An algorithm for calculating the l2 error for the density field.
  !>          It is capable of calculating the error at each timestep by using
  !>          set_rho_alg algorithm which will return the analytic density value
  !>          at each timestep.
  !> @param[in,out] l2   l2 norm
  !> @param[in] rho_num  Density
  !> @param[in] timestep Timestep
  !> @param[in] dt       The model timestep length
  subroutine density_diagnostic_alg(l2, rho_num, timestep, dt)
    use field_mod,                    only: field_type
    use set_rho_alg_mod,              only: set_rho_alg

    implicit none

    real(r_def), intent(inout)   :: l2
    type(field_type), intent(in) :: rho_num
    integer(i_def),   intent(in) :: timestep
    real(r_def),      intent(in) :: dt

    type(field_type)             :: rho_analytic

    call rho_analytic%initialise( vector_space = rho_num%get_function_space() )

    call set_rho_alg( rho_analytic, timestep, dt )

    l2 = rel_l2_error_alg(rho_num, rho_analytic)

  end subroutine density_diagnostic_alg

!=============================================================================!
  !> @details An algorithm for calculating the l2 norm for the hydrostatic
  !>          imbalance. It calculates the sum of pressure gradient and
  !>          gravity term at each timestep using the hydrostatic kernel.
  !> @param[in,out] l2        l2 norm
  !> @param[in]     theta     Potential temperature
  !> @param[in]     moist_dyn Moist dynamics factors
  !> @param[in]     exner     Exner pressure
  !> @param[in]     mesh      Mesh
  subroutine hydbal_diagnostic_alg(l2, theta, moist_dyn, exner, mesh)
    use field_mod,                   only: field_type
    use quadrature_xyoz_mod,         only: quadrature_xyoz_type
    use fs_continuity_mod,           only: W2V

    use moist_dyn_mod,               only: num_moist_factors

    ! PsyKAl PSYClone kernels
    use enforce_bc_kernel_mod,       only: enforce_bc_kernel_type
    use hydrostatic_kernel_mod,      only: hydrostatic_kernel_type
    use physical_op_constants_mod,   only: get_geopotential
    use fem_constants_mod,           only: get_qr


    implicit none
    type(field_type), intent(in) :: theta, moist_dyn(num_moist_factors), exner
    real(r_def), intent(inout)   :: l2
    type(field_type), pointer    :: geopotential => null()
    type(field_type)             :: hyd_imbal
    type(mesh_type),  intent(in), pointer :: mesh

    ! the quadrature object
    type( quadrature_xyoz_type ), pointer :: qr => null()

    type(mesh_type), pointer :: theta_mesh => null()

    call hyd_imbal%initialise(                                               &
             vector_space = function_space_collection%get_fs( mesh,          &
                                                              element_order, &
                                                              W2V) )

    qr => get_qr()

    ! Get geopotential field from runtime_constants
    theta_mesh   => theta%get_mesh()
    geopotential => get_geopotential(theta_mesh%get_id())

    call invoke( setval_c(hyd_imbal, 0.0_r_def), &
                 hydrostatic_kernel_type( hyd_imbal, exner, theta, moist_dyn, &
                                          geopotential, cp, qr ),             &
                 enforce_bc_kernel_type( hyd_imbal ) )

    l2 = l2_norm_alg(hyd_imbal)

    nullify( geopotential, qr, theta_mesh )

  end subroutine hydbal_diagnostic_alg

  !> @details Generic diagnostic processing for a scalar field to nodal format
  !>          Allows optional projection to W3
  !> @param[in,out] output_field      The output field. A 1-element array to satisfy project_output API
  !> @param[in,out] nodal_coordinates Coordinates of the output field
  !> @param[in,out] level             Levels of the output field
  !> @param[in] field_name            Name of the field to be output
  !> @param[in] field                 The input field
  !> @param[in] mesh                  Mesh object
  !> @param[in] W3_project            Logical to allow projection to W3
  subroutine scalar_nodal_diagnostic_alg( output_field, nodal_coordinates, &
                                          level, field_name, field, mesh,  &
                                          W3_project )

    implicit none

    type(field_type), intent(inout) :: nodal_coordinates(3)
    type(field_type), intent(inout) :: output_field(1)
    type(field_type), intent(inout) :: level
    character(len=*), intent(in)    :: field_name
    type(field_type), intent(in)    :: field

    type(mesh_type),  intent(in), pointer :: mesh

    logical(l_def),   intent(in)    :: W3_project

    ! Local variables
    type(field_type), pointer       :: chi(:) => null()
    type(field_type), pointer       :: panel_id => null()
    integer(i_def)                  :: i

    ! get chi field
    chi      => get_coordinates( mesh%get_id() )
    panel_id => get_panel_id( mesh%get_id() )

    ! Check if projection required, setup output field and filename

    if (W3_project) then

      ! Projection to W3, but check if field is already W3

      if (field%which_function_space() == W3) then

        ! Already on W3, so log a warning but continue
        write( log_scratch_space, '(A,A,A)' )  'Diagnostics: ', &
                                  trim(field_name), &
                                  ' already on W3, no projection applied'
        call log_event( log_scratch_space, LOG_LEVEL_INFO )

        ! Setup output field the same as input
        call field%copy_field_properties(output_field(1))
        call invoke( setval_X(output_field(1), field) )

      else

        ! Project the field to the output field
        call project_output( field, output_field, 1, W3 , mesh )

      end if

    else

      ! No projection required

      ! Setup output field the same as input
      call field%copy_field_properties(output_field(1))
      call invoke( setval_X(output_field(1), field) )

    end if

    ! Create nodal coordinates and levels fields from the properties
    ! of the output field
    do i = 1,3
      call output_field(1)%copy_field_properties(nodal_coordinates(i))
    end do

    call output_field(1)%copy_field_properties(level)

    ! Convert field to physical nodal output & sample chi on nodal points
    call invoke( nodal_xyz_coordinates_kernel_type(nodal_coordinates, chi, panel_id) )

    ! If in spherical geometry,
    ! convert the coordinate field to (longitude, latitude, radius)
    if ( geometry == geometry_spherical ) then
      call invoke_pointwise_convert_xyz2llr(nodal_coordinates)
    end if

    ! Compute fractional level of every dof
    call invoke_compute_dof_level_kernel(level)


  end subroutine scalar_nodal_diagnostic_alg

  !> @details Generic diagnostic processing for a vector field to nodal format
  !> @param[in,out] output_field      The output field
  !> @param[in,out] output_dim        Dimension of the output field
  !> @param[in,out] nodal_coordinates Coordinates of the output field
  !> @param[in,out] level             Levels of the output field
  !> @param[in] field_name            Name of the field to be output
  !> @param[in] field                 The input field
  subroutine vector_nodal_diagnostic_alg(output_field, output_dim, &
                                         nodal_coordinates, level, &
                                         field_name, field)

    use convert_hdiv_field_kernel_mod,  only: convert_hdiv_field_kernel_type
    use convert_hcurl_field_kernel_mod, only: convert_hcurl_field_kernel_type

    implicit none

    integer(i_def), intent(inout)   :: output_dim
    type(field_type), intent(inout) :: nodal_coordinates(3)
    type(field_type), intent(inout) :: output_field(3)
    type(field_type), intent(inout) :: level
    character(len=*), intent(in)    :: field_name
    type(field_type), intent(in)    :: field

    ! Local variables
    type(field_type), pointer       :: chi(:) => null(), &
                                       panel_id => null()
    integer(i_def)                  :: i
    integer(i_def)                  :: output_fs
    type(field_type), pointer       :: rmultiplicity
    type(mesh_type),  pointer       :: mesh => null()



    ! Get chi field
    mesh     => field%get_mesh()
    chi      => get_coordinates( mesh%get_id() )
    panel_id => get_panel_id( mesh%get_id() )

    ! Create nodal coordinates, nodal output and levels fields
    ! from the properties of the input field

    do i = 1,3
      call field%copy_field_properties(nodal_coordinates(i))
      call field%copy_field_properties(output_field(i))
      call invoke( setval_c(output_field(i), 0.0_r_def) )
    end do

    call field%copy_field_properties(level)

    ! Convert field to physical nodal output & sample chi on nodal points
    call invoke( nodal_xyz_coordinates_kernel_type(nodal_coordinates, chi, panel_id) )

    output_fs = field%which_function_space()

    ! Apply Piola transform to get collocated components

    if ( output_fs == W1 ) then
      call invoke( convert_hcurl_field_kernel_type(output_field, field, chi, panel_id) )
      output_dim = 3
    else if ( output_fs == W2 ) then
      call invoke( convert_hdiv_field_kernel_type(output_field, field, chi, panel_id) )
      output_dim = 3
    else
      ! If we didn't get a W1 or W2 field, just pass it through
      write( log_scratch_space, '(A,A,A)' )  'Diagnostics: ', &
                                 trim(field_name), &
                                 ' not W1 or W2, no conversion applied'
      call log_event( log_scratch_space, LOG_LEVEL_INFO )

      call invoke( setval_X(output_field(1), field) )
      output_dim = 1
    end if

    ! Scale by the reciprocal of multiplicity (number of shared dofs
    ! in a cell
    if ( output_fs == W1 .or. output_fs == W2) then
      rmultiplicity => get_rmultiplicity( output_fs, mesh%get_id() )
      do i = 1,output_dim
        call invoke( inc_X_times_Y(output_field(i), rmultiplicity) )
      end do
    end if

    ! Convert the vector spaces to standard SI units
    ! (m/s) in orthogonal directions and, if in spherical geometry,
    !  convert the coordinate field to (longitude, latitude, radius)
    if ( geometry == geometry_spherical ) then
      if ( output_fs == W1 .or. output_fs == W2) then
        call invoke_convert_cart2sphere_vector(output_field, nodal_coordinates)
      end if
      call invoke_pointwise_convert_xyz2llr(nodal_coordinates)
    end if

    ! Compute fractional level of every dof
    call invoke_compute_dof_level_kernel(level)

    nullify ( mesh )

  end subroutine vector_nodal_diagnostic_alg


  !> @details Generic diagnostic processing for a scalar field output in ugrid format
  !>          Allows optional projection to W3
  !> @param[in,out] output_field      The output field
  !> @param[in] field_name            The field name to use for output
  !> @param[in] field                 The input field
  !> @param[in] mesh                  Mesh
  !> @param[in] W3_project            Logical to allow projection to W3
  subroutine scalar_ugrid_diagnostic_alg( output_field, field_name, field, &
                                          mesh, W3_project )

    implicit none
    type(field_type), intent(inout) :: output_field(1)
    character(len=*), intent(in)    :: field_name
    type(field_type), intent(in)    :: field
    type(mesh_type),  intent(in), pointer :: mesh
    logical(l_def),   intent(in)    :: W3_project

    ! Check if projection required, setup output field and filename

    if (W3_project) then

      ! Projection to W3, but check if field is already W3

      if (field%which_function_space() == W3) then

        ! Already on W3, so log a warning but continue
        write( log_scratch_space, '(A,A,A)' )  'Diagnostics: ', &
                                  trim(field_name), &
                                  ' already on W3, no projection applied'
        call log_event( log_scratch_space, LOG_LEVEL_INFO )

      else

        ! Project the field to the output field
        call project_output( field, output_field, 1, W3 , mesh )

      end if

    else

      ! No projection required

      ! Setup output field the same as input
      call field%copy_field_properties(output_field(1))
      call invoke( setval_X(output_field(1), field) )

    end if

  end subroutine scalar_ugrid_diagnostic_alg

  !> @details Calculates the diagnostic vorticity from the wind
  !> @param[out] vorticity  Vorticity ( curl(u) ) to compute
  !> @param[in]  u          3D wind field
  !> @param[in]  timestep   Model timestep number
  subroutine vorticity_diagnostic_alg(vorticity, u)
    use io_config_mod,                  only: use_xios_io
    use fs_continuity_mod,              only: W1, W2
    use compute_vorticity_alg_mod,      only: compute_vorticity_alg
    use finite_element_config_mod,      only: element_order, &
                                              vorticity_in_w1
    use function_space_collection_mod,  only: function_space_collection
    use field_parent_mod,               only: write_interface
    use lfric_xios_write_mod,           only: write_field_face
    implicit none

    type(field_type), intent(out) :: vorticity
    type(field_type), intent(in)  :: u

    procedure(write_interface), pointer :: tmp_write_ptr => null()
    type(mesh_type), pointer            :: mesh => null()

    mesh => u%get_mesh()
    if ( vorticity_in_w1 ) then
      call vorticity%initialise( vector_space = &
          function_space_collection%get_fs(mesh, element_order, W1) )
    else
      call vorticity%initialise( vector_space = &
          function_space_collection%get_fs(mesh, element_order, W2) )
    end if
    call compute_vorticity_alg(vorticity, u, .false.)

    if ( use_xios_io ) then
      tmp_write_ptr => write_field_face
      ! Vector fields that are projected to scalar components
      call vorticity%set_write_behaviour(tmp_write_ptr)
      nullify( tmp_write_ptr )
    end if

    nullify( mesh )

  end subroutine vorticity_diagnostic_alg

  subroutine extract_w2h_diagnostic_alg( h_wind, v_wind, wind)
    use split_w2_field_kernel_mod,        only: split_w2_field_kernel_type

    implicit none

    type(field_type), intent(inout)  :: h_wind, v_wind
    type(field_type), intent(in)     :: wind

    call h_wind%initialise( vector_space = &
              function_space_collection%get_fs(wind%get_mesh(), element_order, W2H) )

    call v_wind%initialise( vector_space = &
              function_space_collection%get_fs(wind%get_mesh(), element_order, Wtheta) )

    call invoke( split_w2_field_kernel_type(h_wind, v_wind, wind) )

  end subroutine extract_w2h_diagnostic_alg

!=============================================================================!
  !> @brief Calculate column totals of dry and wet fields.
  !> @details Calculates column totals for wet + dry air, dry air only and each
  !!          of the different moisture spieces represented by LFRic.
  !> @param[in] rho_field  3D dry density field
  !> @param[in] mr         Bundle of moisture mixing ratios (nummr is index for speices X)
  !> @param[in] theta_field_in_w3 3D potential temperature (theta) field
  !> @param[in] exner_field 3D Exner pressure field
  !> @param[in] mesh       The primary mesh
  !> @param[in] twod_mesh  The 2D mesh

  subroutine column_total_diagnostics_alg(rho_field, mr, theta_field_in_w3, exner_field, &
                                          mesh, twod_mesh)

    use compute_column_integral_kernel_mod, only: compute_column_integral_kernel_type
    use geometric_constants_mod,            only: get_height
    use io_config_mod,                      only: write_diag, use_xios_io
    use lfric_xios_write_mod,               only: write_field_single_face
    use field_parent_mod,                   only: write_interface
    use mr_indices_mod,                     only: nummr, mr_names
    use function_space_mod,                 only: function_space_type
    use physics_mappings_alg_mod,           only: map_physics_scalars
    use planet_config_mod,                  only: radius, cv, gravity

    implicit none

    type(field_type),  intent(in)    :: rho_field
    type(field_type),  intent(in)    :: mr(nummr)
    type(field_type),  intent(in)    :: theta_field_in_w3
    type(field_type),  intent(in)    :: exner_field
    type(mesh_type),   intent(in), pointer :: mesh
    type(mesh_type),   intent(in), pointer :: twod_mesh

    ! Set up local fields
    ! 3D fields
    type( field_type ) :: mr_w3(nummr)         ! mixing ratio of moist species X
    type( field_type ) :: rho_moist_X(nummr)   ! moist mass per unit volume in cell (rho_field * mr_w3)
    type( field_type ) :: air_temperature      ! air temperature on W3
    type( field_type ) :: pot_energy           ! potential energy field

    ! 2D fields
    type( field_type ) :: tot_col_dry_air_mass      ! dry column mass
    type( field_type ) :: tot_col_moist_mass(nummr) ! moist column mass total for species X
    type( field_type ) :: tot_col_wetplusdry_mass   ! moist + dry mass column total
    type( field_type ) :: tot_col_int_energy        ! dry column internal energy per unit area
    type( field_type ) :: tot_col_pot_energy        ! dry column potential energy per unit area

    integer(kind=i_def)  :: i_mr

    ! Set pointers
    type( field_type ), pointer :: height_w3 => null()
    type( field_type ), pointer :: height_wth => null()
    type(function_space_type), pointer :: w3_fs => null()
    procedure(write_interface), pointer :: write_diag_behaviour => null()

    height_w3  => get_height( W3, mesh%get_id() )
    height_wth => get_height( Wtheta, mesh%get_id() )
    w3_fs      => rho_field%get_function_space()
    write_diag_behaviour => write_field_single_face

    ! Set up tot_col_dry_air_mass field and make it writeable
    call tot_col_dry_air_mass%initialise( vector_space = &
                    function_space_collection%get_fs(twod_mesh, 0, W3) )

    call tot_col_dry_air_mass%copy_field_properties(tot_col_wetplusdry_mass)
    call tot_col_dry_air_mass%copy_field_properties(tot_col_int_energy)
    call tot_col_dry_air_mass%copy_field_properties(tot_col_pot_energy)

    ! Make the 2D column total fields write-enabled for diagnostic purposes
    call tot_col_dry_air_mass%set_write_behaviour(write_diag_behaviour)
    call tot_col_wetplusdry_mass%set_write_behaviour(write_diag_behaviour)
    call tot_col_int_energy%set_write_behaviour(write_diag_behaviour)
    call tot_col_pot_energy%set_write_behaviour(write_diag_behaviour)

    call invoke( compute_column_integral_kernel_type(rho_field, height_w3, &
                                                height_wth, tot_col_dry_air_mass, &
                                                radius) )

    call invoke( setval_X(tot_col_wetplusdry_mass, tot_col_dry_air_mass) )

    do i_mr = 1, nummr

      ! Initialise the moisture fields
      call mr_w3(i_mr)%initialise( vector_space = w3_fs )

      call rho_moist_X(i_mr)%initialise( vector_space = w3_fs )

      call tot_col_moist_mass(i_mr)%initialise( vector_space = &
                      function_space_collection%get_fs(twod_mesh, 0, W3) )

      call tot_col_moist_mass(i_mr)%set_write_behaviour(write_diag_behaviour)

      ! Get mr field on w3
      call map_physics_scalars(mr_w3(i_mr), mr(i_mr))  ! argument order is target, source

      call invoke( X_times_Y(rho_moist_X(i_mr), rho_field, mr_w3(i_mr)) )

      call invoke( compute_column_integral_kernel_type(rho_moist_X(i_mr), height_w3, &
                                                  height_wth, tot_col_moist_mass(i_mr), &
                                                  radius) )

      if (write_diag .and. use_xios_io) then

        call tot_col_moist_mass(i_mr)%write_field('processed__tot_col_'//trim(mr_names(i_mr)))

      end if

      ! Increment by each moisture species to get total wet + dry mass
      call invoke( inc_X_plus_Y(tot_col_wetplusdry_mass, tot_col_moist_mass(i_mr)) )

    end do

    ! Set up the air_temperature field then calculate it
    call rho_field%copy_field_properties(air_temperature)
    call invoke( X_times_Y(air_temperature, theta_field_in_w3, exner_field) )
    ! Calculate cv * air_temperature * rho_field and run kernel for column
    ! dry internal energy
    call invoke( inc_aX_times_Y(cv, air_temperature, rho_field), &
                 compute_column_integral_kernel_type(air_temperature, height_w3, &
                                                 height_wth, tot_col_int_energy, &
                                                 radius) )

    ! Retrieve height field and set as pot_energy then calculate column potential energy
    call height_w3%copy_field(pot_energy)
    call invoke( inc_aX_times_Y(gravity, pot_energy, rho_field), &
                 compute_column_integral_kernel_type(pot_energy, height_w3, &
                                                 height_wth, tot_col_pot_energy, &
                                                 radius) )
    if (write_diag .and. use_xios_io) then

      call tot_col_dry_air_mass%write_field('processed__tot_col_dry_air_mass')
      call tot_col_wetplusdry_mass%write_field('processed__tot_col_wetplusdry_mass')
      call tot_col_int_energy%write_field('processed__tot_col_int_energy')
      call tot_col_pot_energy%write_field('processed__tot_col_pot_energy')

    end if

  end subroutine column_total_diagnostics_alg

!=============================================================================!
  !> @brief Calculates Wbig: set 3D field to 1 where vertical velocity exceeds
  !!          1 m s-1 and output.
  !> @details Wbig is given a value of 1 if the value of w (vertical velocity)
  !!          at that location is larger than 1 m s-1, otherwise it is set to
  !!          zero. The diagnostic's primary use is in long, climate runs where
  !!          it is averaged in time to help indicate whether the model has any
  !!          stability problems.
  !> @param[in] w_in_wth  3D vertical velocity field seen by the model physics
  !> @param[in] mesh      The primary mesh

  subroutine calc_wbig_diagnostic_alg( w_in_wth, mesh )

    use calc_wbig_kernel_mod,             only: calc_wbig_kernel_type
    use io_config_mod,                    only: write_diag, use_xios_io
    use lfric_xios_write_mod,             only: write_field_single_face
    use field_parent_mod,                 only: write_interface

    implicit none

    ! Set up necessary fields
    type(field_type), intent(in)          :: w_in_wth
    type(mesh_type),  intent(in), pointer :: mesh

    type( field_type ) :: wbig

    ! Give wbig the same properties as w_in_wth (on WTHETA levels)
    call w_in_wth%copy_field_properties(wbig)

    call invoke( calc_wbig_kernel_type(w_in_wth, wbig) )

    if (write_diag .and. use_xios_io) then

      call wbig%write_field('processed__wbig')

    end if

  end subroutine calc_wbig_diagnostic_alg
!=============================================================================!
  !> @brief Calculate the pressure from the exner function and output it as
  !>        a diagnostic
  !> @param[in] exner The exner function (Pa)
  subroutine pressure_diag_alg(exner)

    use planet_config_mod, only: p_zero, one_over_kappa
    use io_config_mod,     only: use_xios_io

    implicit none

    type(field_type), intent(in) :: exner
    type(field_type)             :: pressure
    integer(i_def)               :: fs

    call exner%copy_field(pressure)

    call invoke(inc_X_powreal_a(pressure, one_over_kappa), &
                inc_a_times_X(p_zero, pressure))

    if (use_xios_io) then
      fs = pressure%which_function_space()
      if (fs == W3) then
        call pressure%write_field('processed__pressure_in_w3')
      else if (fs == Wtheta) then
        call pressure%write_field('processed__pressure_in_wth')
      end if
    end if

  end subroutine pressure_diag_alg

end module diagnostic_alg_mod
