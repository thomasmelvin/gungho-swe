{# Macros used in the rose stem suite.rc #}

{# #########################################################################}
{# MACROS                                                                  #}
{# #########################################################################}

{# RUN_APPLICATION                                                         #}
{# Main macro that is called for all apps. the first two arguments are     #}
{# required and give the app name and the configuration to use             #}

{%- macro run_application( appName, configuration,
                           plotstr=None, resolutions=[('')],
                           precisions=[rdef_default],
                           run_with_compilers=[TARGET_SCIENCE_COMPILER],
                           support_meshes=[''], env=None, checkkgo=True,
                           publish=False ) %}

{# Macro agruments                                                         #}
{# precisions: List argment of integer strings, this specify the default   #}
{#             precisions for real numbers (r_def) to build/run this task  #}
{#             e.g. precisions=["32","64"] to run the task with 32-bit and #}
{#             64-bit real numbers                                         #}

{%    set crun = 1 %}
{%    if env %}
{%      if 'crun' in env.keys() %}
{%        set crun = env['crun'] %}
{%      endif %}
{%    endif %}

{%-   set appLabel = appName + '_' + configuration %}

{%-   if appLabel not in appConfigsCompilerRuns.keys() %}
{%-     do appConfigsCompilerRuns.update({appLabel : run_with_compilers}) %}
{%-   else %}
{%-     do appConfigsCompilerRuns[appLabel].extend(run_with_compilers) %}
{%-   endif %}

{%-   if appLabel not in appPrecisionRuns.keys() %}
{%-     do appPrecisionRuns.update({appLabel : precisions} ) %}
{%-   else %}
{%-     do appPrecisionRuns[appLabel].extend(precisions) %}
{%-   endif %}

{%-   if appName not in appPrecisionBuilds.keys() %}
{%-     do appPrecisionBuilds.update({appName : precisions} ) %}
{%-   else %}
{%-     do appPrecisionBuilds[appName].extend(precisions) %}
{%-   endif %}

{%-   set run_application_profile = (run_application_profile | default('fast-debug', true)) %}

{%-   set mesh_label = (TARGET_MESH_COMPILER|lower + '_' +
                        mesh_rdef + '-bit_' +
                        mesh_build) %}

{%-   for compiler in appConfigsCompilerRuns[appLabel] %}
{%-     for precision in appPrecisionRuns[appLabel] %}

{%-       set label = (compiler|lower + '_' + precision + '-bit_' + run_application_profile) %}

{%-       for resolution in resolutions %}
{%-         set res_value, dt_values, res_label, dt_labels, res_opt = resolution | get_resolution_labels() %}
{%-         for i in range(0,dt_values|length) %}
{%-           set appName_res_label = appLabel ~ res_label ~ dt_labels[i] %}

        [[[R1]]] {#- Repeat once at the start #}
            graph = """
            export_source => compile_mesh_tools_with_{{mesh_label}}
            export_source => compile_{{projectName}}_with_{{label}}

{%-           if publish %}
            compile_{{projectName}}_with_{{label}}:finish => publish_{{label}}_compile
            publish_{{label}}_compile:finish => publish_node
{%-           endif %}

{%-           if TARGET_SCIENCE_COMPILER in TARGET_PERFORM_RUN %}
{%-             if res_label != '' %}
            compile_mesh_tools_with_{{mesh_label}} => generate_mesh{{res_label}}_{{mesh_label}}
            generate_mesh{{res_label}}_{{mesh_label}} => run_{{appName_res_label}}_{{label}}
{%-             endif %} {#- res_label != '' #}
{%-             if support_meshes != [''] %}
{%-               for mesh_name in support_meshes %}
            compile_mesh_tools_with_{{mesh_label}} => generate_mesh_{{mesh_name|replace('.','p')}}_{{mesh_label}}
            generate_mesh_{{mesh_name|replace('.','p')}}_{{mesh_label}} => run_{{appName_res_label}}_{{label}}
{%-               endfor %}
{%-             endif %} {#- support_meshes != [''] #}
{%-           endif %} {#- TARGET_SCIENCE_COMPILER in TARGET_PERFORM_RUN #}

            compile_{{projectName}}_with_{{label}} => run_{{appName_res_label}}_{{label}}


                    """
         [[[R{{crun}}/P1/{{crun}}]]] {#- Repeat cycle times, once per cycle ending on last cycle #}
            graph = """
            run_{{appName_res_label}}_{{label}}[-P1] => run_{{appName_res_label}}_{{label}}
                    """

         [[[R1/P1/{{crun}}]]] {#- Repeat once at last cycle #}
            graph = """
{%-           if checkkgo and TARGET_SCIENCE_COMPILER in TARGET_PERFORM_KGO_TESTS %}
            run_{{appName_res_label}}_{{label}}[{{crun}}] => check_{{appName_res_label}}_{{label}}
{%-           endif %} {# checkkgo #}

{%-           if plotstr %}
{%-             do plot_config.update({appLabel : plotstr}) %}
            run_{{appName_res_label}}_{{label}} => plot_{{appName_res_label}}_{{label}}
            plot_{{appName_res_label}}_{{label}}:finish => publish_node
{%-             if publish %}
            plot_{{appName_res_label}}_{{label}} => publish_{{appName_res_label}}_{{label}}_plots
            publish_{{appName_res_label}}_{{label}}_plots:finish => publish_node
{%-             endif %}
{%-           endif %}
                    """

{%-         endfor %}   {# i #}
{%-       endfor %}   {# resolution #}
{%-     endfor %}   {# rdef_precision #}
{%-   endfor %}   {# appConfigsCompilerRuns #}

{%- endmacro %} {# run_application #}



{#- #########################################################################}
{%- macro canned_test(appName, precisions=[rdef_default]) %}

{%-   if appName not in appPrecisionBuilds.keys() %}
{%-     do appPrecisionBuilds.update({appName : precisions} ) %}
{%-   else %}
{%-     do appPrecisionBuilds[appName].extend(precisions) %}
{%-   endif %}
{%-   if appName and appName not in appsToRun %}
{%-     do appsToRun.append(appName) %}
{%-   endif %}

        [[[R1]]]
{%-   if TARGET_SCIENCE_COMPILER in TARGET_PERFORM_RUN %}
{%-     if appName in appPrecisionBuilds %}
{%-       for precision in precisions %}
{%-         set label = TARGET_SCIENCE_COMPILER | lower + '_'
                      + precision + '-bit_fast-debug' %}
            export_source => compile_{{projectName}}_with_{{label}}
            compile_{{projectName}}_with_{{label}} => run_{{appName}}_canned_test_{{label}}
{%-       endfor %}
{%-     endif %}
{%-   endif %}

{%- endmacro %}



{#- #########################################################################}
{%- macro publish_commit() %}

        [[[R1/P1/$]]]
            # Repeat once in the final cycle
            graph = """
            publish_node  => publish_index
            publish_index => mirror_results_local
{%-   if MIRROR_UPLOAD_URL %}
            publish_index => mirror_results_remote
{%-   endif %}
                    """

        [[[^/P1]]]
            # Repeat every cycle from the start
            graph = """
            publish_node[-P1] => publish_node
                    """

{%- endmacro %}



{#- #########################################################################}
{%- macro schedule() %}

{%-   for group in groupsToRun %}
{%-     if group in groups.keys() %}
{%-       for mission in groups[group] %}
{{          mission | execute_macro() }}
{%-       endfor %}
{%-     endif %}
{%-   endfor %}

{%- endmacro %}



{#- #########################################################################}
{%- macro setTaskEnv(scheduledTasksDict, compilers) %}

{%-   for group in groupsToRun %}
{%-     if group in groups.keys() %}
{%-       for mission in groups[group] %}
{%-         set appName, key, env_dict, macro_name = mission | get_env_macro() %}
{%-         if macro_name == 'run_application' %}
{%-           if appName not in appsToRun %}
{%-             do appsToRun.append(appName) %}
{%-           endif %}
{%-           set appKey = key + '_' + science_label %}
{%-           do scheduledTasksDict.update({appKey: env_dict}) %}

{#            Add env dictionary to any additional tasks
              for this `run_application` #}
{%-           set key, resPrecisions = mission | get_precision_macro() %}
{%-           set run_application_profile = (run_application_profile | default('fast-debug', true)) %}
{%-           for compiler in compilers %}
{%-             for precision in resPrecisions %}
{%-               set appKey = key + '_' + compiler + '_' +
                               precision + '-bit_' + run_application_profile %}
{%-               do scheduledTasksDict.update({appKey: env_dict}) %}
{%-             endfor %}
{%-           endfor %}

{%-         endif %}
{%-       endfor %}
{%-     endif %}
{%-   endfor %}

{%- endmacro %}



{#- #########################################################################}
{%- macro setCrunInfo(crunInfo,scheduledTasksDict) %}

{%-   for key, env_dict in scheduledTasksDict.items() %}
{%-     if 'crun' in env_dict.keys() %}
{%        if env_dict['crun'] > crunInfo['maxcrun']  %}
{%-         do crunInfo.update({'maxcrun':env_dict['crun']})  -%}
{%-       endif  -%}
{%-     endif %}
{%-   endfor %}

{%- endmacro %}



{#- #########################################################################}
{%- macro setResolutions(resolution_choices, support_meshes) %}

{%-   for group in groupsToRun %}
{%-     if group in groups.keys() %}
{%-       for mission in groups[group] %}

{%-         set appKey, resList, resDict, resSupportMeshes = mission | get_resolution_macro() %}

{%-         if appKey %}

{%            if resList %}
{%-             if appKey not in resolution_choices.keys() %}
{%-               do resolution_choices.update({appKey:[]})  -%}
{%-             endif %}
{%-             for res in resList %}
{%-               if res not in resolution_choices[appKey] %}
{%-                 do resolution_choices[appKey].append(res) -%}
{%-               endif %}
{%-             endfor %}
{%-           endif %}

{%            if resSupportMeshes %}
{%-             if appKey not in support_meshes.keys() %}
{%-               do support_meshes.update({appKey:[]})  -%}
{%-             endif %}
{%-             for res in resSupportMeshes %}
{%-               if res not in support_meshes[appKey] %}
{%-                 do support_meshes[appKey].append(res) -%}
{%-               endif %}
{%-             endfor %}
{%-           endif %}

{%-         endif %}
{%-       endfor %} {# mission #}
{%-     endif %}
{%-   endfor %} {# group #}

{%- endmacro %} {# setResolutions #}



{#- #########################################################################}
{%- macro setPrecisions(rdef_build_precisions) %}

{%-   for group in groupsToRun %}
{%-     if group in groups.keys() %}
{%-       for mission in groups[group] %}
{%-         set appKey, resPrecisions = mission | get_precision_macro() %}
{%-         if appKey %}

{%            if resPrecisions %}
{%-             for precision in resPrecisions %}
{%-               if precision not in rdef_build_precisions %}
{%-                 do rdef_build_precisions.append(precision) -%}
{%-               endif %}
{%-             endfor %}
{%-           else %}
{%-             if rdef_default not in rdef_build_precisions %}
{%-               do rdef_build_precisions.append(rdef_default) -%}
{%-             endif %}
{%-           endif %}

{%-         endif %}
{%-       endfor %} {# mission #}
{%-     endif %}
{%-   endfor %} {# group #}

{%- endmacro %} {# setPrecisions #}



{# The check_compiler macro allows each app to be compiled either (1) on all #}
{# available environment compilers (by designating "all" in suite_control.rc #}
{# entry), or (2) by a single named compiler (e.g. 'intel','gnu', etc.).     #}
{# If a compiler is named but is not in the environment (e.g. 'cray' in      #}
{# meto-spice), the call is ignored. This allows suite_control.rc to encode  #}
{# for different task sets in meto-spice and meto-xc40.                      #}
{#- ##########################################################################}
{%- macro check_compilers( appName, configuration, compiler, build,
                           resolution=(''), precisions=[rdef_default],
                           publish=False ) %}
      [[[R1]]]
{%-   set perform_run = [] %}
{%-   set all_compilers = target[PRIMARY_TARGET['platform']]['setup']['compiler'].keys() %}
{%-   set compilers = [] %}
{%-   set appLabel = appName + '_' + configuration %}
{%-   set science_key = appName + '_' + configuration + '_' + science_label %}
{%-   set environment = scheduledTasksDict[science_key] %}

{%-   if compiler in all_compilers %}
{%-     do compilers.append( compiler ) %}
{%-     for precision in precisions %}
{%-       set application_key = appName + '_' + configuration + '_'
                              + compiler + '_' + precision + '-bit_'
                              + build %}
{%-       do scheduledTasksDict.update({application_key: environment}) %}
{%-     endfor %} {# rdef_precision #}
{%-   elif compiler == 'all' %} {# otherwise, do all #}
{%-     for compiler in all_compilers %}
{%-       do compilers.append( compiler ) %}
{%-       for precision in precisions %}
{%-         set application_key = appName + '_' + configuration + '_'
                                + compiler + '_' + precision + '-bit_'
                                + build %}
{%-         do scheduledTasksDict.update({application_key: environment}) %}
{%-       endfor %} {# rdef_precision #}
{%-     endfor %}
{%-   endif %}

{%-   if build == 'fast-debug' %}
{%-     do perform_run.extend( TARGET_PERFORM_RUN ) %}
{%-   elif build == 'full-debug' %}
{%-     do perform_run.extend( TARGET_PERFORM_DEBUG_RUN ) %}
{%-   endif %}

{%-   set run_with_compilers = perform_run | reject("==", "none") %}
{%-   if appLabel not in appConfigsCompilerRuns.keys() %}
{%-     do appConfigsCompilerRuns.update({appLabel : run_with_compilers})%}
{%-   else %}
{%-     set difference = run_with_compilers | reject("in", appConfigsCompilerRuns[appLabel]) %}
{%-     do appConfigsCompilerRuns[appLabel].extend(difference) %}
{%-   endif %}

{%-   set mesh_label = (TARGET_MESH_COMPILER|lower + '_' +
                        mesh_rdef + '-bit_' +
                        mesh_build|lower) %}

{%-   for compiler in compilers %}
{%-     for precision in precisions %}

{%-       set label = (compiler|lower + '_' + precision + '-bit_' + build|lower) %}

{{        unit_tests_graph( compiler, precision ) }}
{{        integration_tests_graph( compiler, precision ) }}

            export_source => compile_{{projectName}}_with_{{label}}
            export_source => compile_mesh_tools_with_{{mesh_label}}
{%-       if publish %}
            compile_{{projectName}}_with_{{label}}:finish => publish_{{label}}_compile
            publish_{{label}}_compile:finish => publish_node
{%-       endif %}

{%-       if compiler in perform_run %}
{%-         set res_value, dt_values, res_label, dt_labels, res_opt = resolution | get_resolution_labels() %}
{%-         for i in range(0, dt_values|length) %}
{%-           set appLabel_res = appLabel ~ res_label ~ dt_labels[i] %}
            compile_mesh_tools_with_{{mesh_label}} => generate_mesh{{res_label}}_{{mesh_label}}
            generate_mesh{{res_label}}_{{mesh_label}} => run_{{appLabel_res}}_{{label}}
            compile_{{projectName}}_with_{{label}} => run_{{appLabel_res}}_{{label}}
{%-           if publish %}
            run_{{appLabel_res}}_{{label}}:finish => publish_{{appLabel_res}}_{{label}}_run
            publish_{{appLabel_res}}_{{label}}_run:finish => publish_node
{%-           endif %}
{%-           if compiler in TARGET_PERFORM_KGO_TESTS %}
            run_{{appLabel_res}}_{{label}} => check_{{appLabel_res}}_{{label}}
{%-           endif %}
{%-         endfor %} {# i #}
{%-       endif %}

{%-     endfor %} {# rdef_precision #}
{%-   endfor %} {# compiler #}

{%- endmacro %} {# check_compilers #}


