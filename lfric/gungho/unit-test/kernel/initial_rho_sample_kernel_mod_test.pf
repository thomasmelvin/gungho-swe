!-----------------------------------------------------------------------------
! (C) Crown copyright 2019 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> Test the initial_rho_sample_kernel
module initial_rho_sample_kernel_mod_test

  use constants_mod,                       only : r_def, i_def
  use get_unit_test_m3x3_q3x3x3_sizes_mod, only : get_w0_m3x3_q3x3x3_size,   &
                                                  get_w3_m3x3_q3x3x3_size

  use get_unit_test_m3x3_dofmap_mod,       only : get_w0_m3x3_dofmap,        &
                                                  get_w3_m3x3_dofmap

  use get_unit_test_q3x3x3_basis_mod,      only : get_w0_q3x3x3_basis

  use pFUnit_Mod

  implicit none

  private
  public:: test_all

  @TestCase
  type, extends(TestCase), public  :: initial_rho_sample_kernel_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type initial_rho_sample_kernel_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use base_mesh_config_mod,       only : geometry_planar, &
                                           topology_fully_periodic
    use chi_transform_mod,          only : init_chi_transforms
    use feign_config_mod,           only : feign_base_mesh_config,      &
                                           feign_finite_element_config, &
                                           feign_idealised_config,      &
                                           feign_initial_density_config
    use finite_element_config_mod,  only : cellshape_quadrilateral, &
                                           coord_system_xyz
    use idealised_config_mod,       only : test_constant_field
    use initial_density_config_mod, only : tracer_background


    use extrusion_config_mod, only: method_uniform

    implicit none

    class(initial_rho_sample_kernel_test_type), intent(inout) :: this

    integer(kind=i_def) :: nlayers

    call feign_base_mesh_config( filename='foo',                   &
                                 prime_mesh_name='unit_test',      &
                                 geometry=geometry_planar,         &
                                 offline_partitioning=.false.,     &
                                 topology=topology_fully_periodic, &
                                 fplane=.false., f_lat_deg=45.0_r_def )

    call feign_finite_element_config(      &
        cellshape=cellshape_quadrilateral, &
        coord_order=0_i_def,               &
        coord_system=coord_system_xyz,     &
        element_order=0_i_def,             &
        rehabilitate=.true.,               &
        vorticity_in_w1=.false. )

    call feign_initial_density_config( tracer_background=1.0_r_def, &
                                       tracer_max=0.0_r_def,        &
                                       r1=0.0_r_def, x1=0.0_r_def,  &
                                       y1=0.0_r_def, z1=0.0_r_def,  &
                                       r2=0.0_r_def, x2=0.0_r_def,  &
                                       y2=0.0_r_def, z2=0.0_r_def)
    call feign_idealised_config( test=test_constant_field )

    call init_chi_transforms()

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use chi_transform_mod, only: final_chi_transforms
    use configuration_mod, only: final_configuration

    implicit none

    class(initial_rho_sample_kernel_test_type), intent(inout) :: this

    ! Finalise namelists
    call final_configuration()
    call final_chi_transforms()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use initial_rho_sample_kernel_mod, only: initial_rho_sample_kernel_code

    implicit none

    class(initial_rho_sample_kernel_test_type), intent(inout) :: this

    real(kind=r_def), parameter      :: tol = 1.0e-14_r_def
    real(kind=r_def), parameter      :: dx = 1.0_r_def
    real(kind=r_def), parameter      :: dy = 1.0_r_def
    real(kind=r_def), parameter      :: dz = 1.0_r_def
    real(kind=r_def), parameter      :: initial_time = 0.0_r_def
    real(kind=r_def), parameter      :: answer = 1.0_r_def

    ! Fields
    real(kind=r_def), allocatable    :: chi_1(:), chi_2(:), chi_3(:)
    real(kind=r_def), allocatable    :: rho(:), panel_id(:)

    ! Basis functions
    real(kind=r_def),    allocatable :: basis_w0(:,:,:,:)

    ! DoF maps
    integer(kind=i_def), allocatable :: map_w0(:,:)
    integer(kind=i_def), allocatable :: map_w3(:,:)

    ! Other integers
    integer(kind=i_def)              :: nlayers, ncells, dim_space, dim_space_diff
    integer(kind=i_def)              :: nqp_h, nqp_v
    integer(kind=i_def)              :: ndf_w3, undf_w3
    integer(kind=i_def)              :: ndf_w0, undf_w0
    integer(kind=i_def)              :: i, j, k, cell

    nlayers  = 3_i_def
    call get_w0_m3x3_q3x3x3_size( ndf_w0, undf_w0,           &
                                  ncells,                    &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v,              &
                                  nlayers )
    call get_w3_m3x3_q3x3x3_size( ndf_w3, undf_w3,           &
                                  ncells,                    &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v,              &
                                  nlayers )

    call get_w0_m3x3_dofmap(map_w0)
    call get_w3_m3x3_dofmap(map_w3)

    ! Get canned basis functions
    call get_w0_q3x3x3_basis(basis_w0)

    ! Compute coordinates
    allocate(chi_1(undf_w0))
    allocate(chi_2(undf_w0))
    allocate(chi_3(undf_w0))
    allocate(panel_id(undf_w3))
    cell = 1
    do j = 1,3
      do i = 1,3
        do k = 0,(nlayers-1)
          chi_1(map_w0(1, cell) + k) = (i - 1) * dx
          chi_2(map_w0(1, cell) + k) = (j - 1) * dy
          chi_3(map_w0(1, cell) + k) = k * dz
        end do
        cell = cell + 1
      end do
    end do

    panel_id(:) = 1.0_r_def

    ! Make up initial wrong fields
    allocate( rho(undf_w3) )
    rho(:) = 0.0_r_def

    call initial_rho_sample_kernel_code( nlayers,                 &
                                         rho,                     &
                                         chi_1, chi_2, chi_3,     &
                                         panel_id,                &
                                         initial_time,            &
                                         ndf_w3, undf_w3, map_w3, &
                                         ndf_w0, undf_w0, map_w0, &
                                         basis_w0,                &
                                         ndf_w3, undf_w3, map_w3 )

    ! Check if the values in the first column are now equal to the answer
    @assertEqual( answer, rho(1), tol )
    @assertEqual( answer, rho(2), tol )
    @assertEqual( answer, rho(3), tol )

    deallocate( rho )
    deallocate( chi_1 )
    deallocate( chi_2 )
    deallocate( chi_3 )
    deallocate( panel_id )
    deallocate( map_w0 )
    deallocate( map_w3 )
    deallocate( basis_w0 )

  end subroutine test_all

end module initial_rho_sample_kernel_mod_test
