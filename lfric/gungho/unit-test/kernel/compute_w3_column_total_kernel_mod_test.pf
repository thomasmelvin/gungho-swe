!-----------------------------------------------------------------------------
! (c) Crown copyright 2020 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!> Test the column total kernel to check that it calculates the correct total
!> mass in the column. It should return a new field with this column total
!> value in the bottom layer.
!>
module compute_w3_column_total_kernel_mod_test

  use constants_mod,                       only : i_def, r_def
  use get_unit_test_m3x3_q3x3x3_sizes_mod, only : get_w3_m3x3_q3x3x3_size
  use get_unit_test_m3x3_dofmap_mod,       only : get_w3_m3x3_dofmap
  use pFUnit_Mod

  implicit none

  private

  public :: compute_w3_column_total_kernel_test_type, test_all

  @TestCase
  type, extends(TestCase) :: compute_w3_column_total_kernel_test_type
    private
  contains
    procedure test_all
  end type compute_w3_column_total_kernel_test_type

contains

  @Test
  subroutine test_all( this )

    use compute_w3_column_total_kernel_mod, only : compute_w3_column_total_code

    implicit none

    class(compute_w3_column_total_kernel_test_type), intent(inout) :: this

    real(kind=r_def), parameter      :: tol = 1.0e-12_r_def
    real(kind=r_def)                 :: answer
    integer(kind=i_def)              :: nlayers, ncells, ncell_3d, cell, icell
    integer(kind=i_def)              :: ndf_w3, undf_w3
    integer(kind=i_def)              :: dim_space, dim_space_diff
    integer(kind=i_def)              :: nqp_h, nqp_v
    integer(kind=i_def), allocatable :: map_w3(:,:)
    real(kind=r_def), allocatable    :: mass(:)
    real(kind=r_def), allocatable    :: column_total(:)

    ! Set up domain from canned data
    nlayers=3
    call get_w3_m3x3_q3x3x3_size( ndf_w3, undf_w3, ncells,   &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v,              &
                                  nlayers )
    call get_w3_m3x3_dofmap(map_w3)

    ! Create the data
    allocate(mass(undf_w3))
    allocate(column_total(undf_w3))

    mass(:) = 1.0_r_def
    column_total(:) = 0.0_r_def

    cell = 1

    call compute_w3_column_total_code(                      &
                                        nlayers,            &
                                        column_total,       &
                                        mass,               &
                                        ndf_w3, undf_w3,    &
                                        map_w3(:,cell)      &
                                      )

    answer = mass(1)*nlayers
    @assertEqual(answer, column_total(map_w3(1, cell)), tol)

    deallocate(map_w3)
    deallocate(mass)
    deallocate(column_total)

  end subroutine test_all

end module compute_w3_column_total_kernel_mod_test