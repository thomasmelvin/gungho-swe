!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the Wtheta mass columnwise matrix computation
!>
module columnwise_op_asm_kernel_mod_test
  use constants_mod,                 only : i_def, r_def, r_solver

  use get_unit_test_m3x3_dofmap_mod, only : get_wtheta_m3x3_dofmap
  use get_unit_test_m3x3_q3x3x3_sizes_mod, &
       only : get_wtheta_m3x3_q3x3x3_size
  use get_unit_test_m3x3_cma_data_mod, &
       only : get_wtheta_m3x3_cma_data
  use pFUnit_Mod
  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: columnwise_op_asm_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type columnwise_op_asm_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(columnwise_op_asm_test_type), intent(inout) :: this

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(columnwise_op_asm_test_type), intent(inout) :: this

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use columnwise_op_asm_kernel_mod, only : &
         columnwise_op_asm_kernel_code

    implicit none

    class(columnwise_op_asm_test_type), intent(inout) :: this

    real(kind=r_solver), parameter :: tol = 1.0e-6_r_solver

    real(kind=r_solver) :: answer

    integer(kind=i_def) :: i, j, k, cell

    integer(kind=i_def) :: nlayers, ndf, undf, ncells, ncell_3d, unused
    integer(kind=i_def), allocatable :: map(:,:), indirection_map(:), column_banded_map(:,:)
    integer(kind=i_def) :: alpha, beta, g_m, g_p, bw
    integer(kind=i_def) :: ncol, nrow

    real(kind=r_solver), allocatable :: columnwise_mm(:,:,:)
    real(kind=r_def),    allocatable :: local_stencil(:,:,:)

    ! Test mass matrix kernel

    nlayers = 3
    call get_wtheta_m3x3_q3x3x3_size(ndf, undf, ncells, unused, unused, unused, unused, nlayers=nlayers)
    call get_wtheta_m3x3_dofmap( map )
    call get_wtheta_m3x3_cma_data(ndf, undf, ncells, nlayers, map, &
                                  alpha, beta, g_m, g_p, bw,   &
                                  ncol, nrow, indirection_map, column_banded_map )

    ncell_3d = nlayers * ncells
    allocate(local_stencil(ndf,ndf,ncell_3d))
    allocate(columnwise_mm(bw, nrow, ncells))
    columnwise_mm(:,:,:) = 0.0_r_solver

    cell = 1

    do i=1, ncell_3d
       local_stencil(:,:,i) = reshape( (/ 1.0_r_def/3.0_r_def, 1.0_r_def/6.0_r_def, &
                                 1.0_r_def/6.0_r_def, 1.0_r_def/3.0_r_def /), (/2, 2/))
    end do

    call columnwise_op_asm_kernel_code(cell,              &
                                       nlayers,           &
                                       ncells,            &
                                       ncell_3d,          &
                                       local_stencil,     &
                                       columnwise_mm,     &
                                       nrow,              &
                                       ncol,              &
                                       bw,                &
                                       alpha,             &
                                       beta,              &
                                       g_m,               &
                                       g_p,               &
                                       ndf,               &
                                       column_banded_map, &
                                       ndf,               &
                                       column_banded_map)
    do i = 1, nrow
      if (i == 1) then
         ! First row should be ( *, 1/3, 1/6 )
         answer = (1.0_r_solver/3.0_r_solver)
         @assertEqual(answer, columnwise_mm(2,i,1), tol)
         answer = (1.0_r_solver/6.0_r_solver)
         @assertEqual(answer, columnwise_mm(3,i,1), tol)
      else if (i == nrow) then
         ! Final row should be ( 1/6, 1/3, * )
         answer = (1.0_r_solver/6.0_r_solver)
         @assertEqual(answer, columnwise_mm(1,i,1), tol)
         answer = (1.0_r_solver/3.0_r_solver)
         @assertEqual(answer, columnwise_mm(2,i,1), tol)
      else
         ! All other rows should be ( 1/6, 2/3, 1/6 )

         answer = (1.0_r_solver/6.0_r_solver)
         @assertEqual(answer, columnwise_mm(1,i,1), tol)
         answer = (2.0_r_solver/3.0_r_solver)
         @assertEqual(answer, columnwise_mm(2,i,1), tol)
         answer = (1.0_r_solver/6.0_r_solver)
         @assertEqual(answer, columnwise_mm(3,i,1), tol)
      end if
    end do

    deallocate(local_stencil)
    deallocate(columnwise_mm)
    deallocate(map)
    deallocate(indirection_map)
    deallocate(column_banded_map)

  end subroutine test_all

end module columnwise_op_asm_kernel_mod_test
