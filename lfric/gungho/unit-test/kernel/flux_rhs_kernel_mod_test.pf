!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the flux rhs computation
!>
module flux_rhs_kernel_mod_test

  use constants_mod,                 only : i_def, r_def
  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: flux_rhs_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type flux_rhs_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use finite_element_config_mod, only : cellshape_quadrilateral, &
                                          coord_system_xyz
    use feign_config_mod,          only : feign_finite_element_config

    implicit none

    class(flux_rhs_test_type), intent(inout) :: this

    call feign_finite_element_config(           &
             cellshape=cellshape_quadrilateral, &
             coord_order=0_i_def,               &
             coord_system=coord_system_xyz,     &
             element_order=0_i_def,             &
             rehabilitate=.true.,               &
             vorticity_in_w1=.false. )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use configuration_mod,        only: final_configuration

    implicit none

    class(flux_rhs_test_type), intent(inout) :: this

    call final_configuration()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use flux_rhs_kernel_mod,        only : flux_rhs_code

    use get_unit_test_m3x3_q3x3x3_sizes_mod, only: get_w0_m3x3_q3x3x3_size, &
                                                   get_w2_m3x3_q3x3x3_size, &
                                                   get_w3_m3x3_q3x3x3_size

    use get_unit_test_m3x3_dofmap_mod, only: get_w0_m3x3_dofmap, &
                                             get_w2_m3x3_dofmap, &
                                             get_w3_m3x3_dofmap

    use get_unit_test_q3x3x3_basis_mod, only : get_w0_q3x3x3_basis, &
                                               get_w0_q3x3x3_diff_basis, &
                                               get_w2_q3x3x3_basis, &
                                               get_w3_q3x3x3_basis

    use get_unit_test_3x3x3_chi_mod, only: get_w0_3x3x3_field

    use get_unit_test_q3x3x3_quadrature_mod, only : get_gaussian_q3x3x3_quadrature_weights_xy, &
                                                    get_gaussian_q3x3x3_quadrature_weights_z
    implicit none

    class(flux_rhs_test_type), intent(inout) :: this

    real(r_def), parameter :: tol = 1.0e-6_r_def
    real(r_def), parameter :: dx = 4.0_r_def
    real(r_def), parameter :: dy = 3.0_r_def
    real(r_def), parameter :: dz = 2.0_r_def
    real(r_def) :: answer(3)

    integer(i_def) :: cell

    integer(i_def) :: nlayers, nqp_h, nqp_v
    integer(i_def) :: ndf_w0, ndf_w2, ndf_w3
    integer(i_def) :: undf_w0, undf_w2, undf_w3

  ! Dummy variable for passing into multi-getter routines where item is not needed
    integer(i_def) :: unused

    integer(i_def), allocatable :: map_w0(:,:)
    integer(i_def), allocatable :: map_w2(:,:)
    integer(i_def), allocatable :: map_w3(:,:)

    real(r_def), allocatable :: basis_w0(:,:,:,:)
    real(r_def), allocatable :: diff_basis_w0(:,:,:,:)
    real(r_def), allocatable :: basis_w2(:,:,:,:)
    real(r_def), allocatable :: basis_w3(:,:,:,:)

    real(r_def), allocatable :: wh(:), wv(:)

   ! Test field data
    real(r_def), allocatable :: chi_data(:,:)
    real(r_def), allocatable :: rhs_data(:)
    real(r_def), allocatable :: f_data(:)
    real(r_def), allocatable :: u_data(:)
    real(r_def), allocatable :: panel_id_data(:)

    ! Get canned data for a 3-layer mesh
    nlayers = 3

    ! Get sizes
    call get_w0_m3x3_q3x3x3_size( ndf_w0, undf_w0, unused, &
                                  unused, unused,          &
                                  nqp_h, nqp_v,            &
                                  nlayers )

    call get_w2_m3x3_q3x3x3_size( ndf_w2, undf_w2, unused, &
                                  unused, unused,          &
                                  unused, unused,          &
                                  nlayers )

    call get_w3_m3x3_q3x3x3_size( ndf_w3, undf_w3, unused, &
                                  unused, unused,          &
                                  unused, unused,          &
                                  nlayers )
    ! Get dofmaps
    call get_w0_m3x3_dofmap(map_w0)
    call get_w2_m3x3_dofmap(map_w2)
    call get_w3_m3x3_dofmap(map_w3)

    call get_w0_q3x3x3_basis(basis_w0)
    call get_w0_q3x3x3_diff_basis(diff_basis_w0)
    call get_w2_q3x3x3_basis(basis_w2)
    call get_w3_q3x3x3_basis(basis_w3)
    call get_gaussian_q3x3x3_quadrature_weights_xy(wh)
    call get_gaussian_q3x3x3_quadrature_weights_z(wv)

    ! Create the data arrays
    allocate(chi_data(undf_w0,3))
    allocate(rhs_data(undf_w2))
    allocate(f_data(undf_w3))
    allocate(u_data(undf_w2))
    allocate(panel_id_data(undf_w3))

    cell = 5

    call get_w0_3x3x3_field(chi_data(:,1), chi_data(:,2), chi_data(:,3), &
                            dx, dy, dz, map_w0, nlayers)

    ! Create the data
    f_data(:) = 2.0_r_def
    u_data(:) = 0.0_r_def
    rhs_data(:) = 0.0_r_def

    u_data(map_w2(5,cell)+0) = 0.0_r_def
    u_data(map_w2(5,cell)+1) = 1.0_r_def
    u_data(map_w2(6,cell)+1) = 1.0_r_def
    u_data(map_w2(6,cell)+2) = 0.0_r_def

    panel_id_data(:) =  1.0_r_def

    call flux_rhs_code( nlayers,                                 &
                        rhs_data,                                &
                        u_data,                                  &
                        f_data,                                  &
                        chi_data(:,1),                           &
                        chi_data(:,2),                           &
                        chi_data(:,3),                           &
                        panel_id_data,                           &
                        ndf_w2, undf_w2,                         &
                        map_w2(:,cell), basis_w2,                &
                        ndf_w3, undf_w3,                         &
                        map_w3(:,cell),  basis_w3,               &
                        ndf_w0, undf_w0,                         &
                        map_w0(:,cell), basis_w0, diff_basis_w0, &
                        ndf_w3, undf_w3,                         &
                        map_w3(:,cell),                          &
                        nqp_h, nqp_v, wh, wv                     &
                        )

    answer(1) = 5.0_r_def/90.0_r_def
    answer(2) = 5.0_r_def/6.0_r_def * (2.0_r_def/(4.0_r_def*3.0_r_def))*2.0_r_def
    answer(3) = 5.0_r_def/6.0_r_def * (2.0_r_def/(4.0_r_def*3.0_r_def))*2.0_r_def

    @assertEqual(answer, rhs_data(map_w2(5,cell):map_w2(5,cell)+2) , tol)

    deallocate(map_w0)
    deallocate(map_w2)
    deallocate(map_w3)
    deallocate(basis_w0)
    deallocate(diff_basis_w0)
    deallocate(basis_w2)
    deallocate(basis_w3)
    deallocate(wh)
    deallocate(wv)
    deallocate(chi_data)
    deallocate(rhs_data)
    deallocate(f_data)
    deallocate(u_data)
    deallocate(panel_id_data)

  end subroutine test_all

end module flux_rhs_kernel_mod_test
