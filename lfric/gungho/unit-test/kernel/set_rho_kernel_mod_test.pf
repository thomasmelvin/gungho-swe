!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the initial rho computation
!>
module set_rho_kernel_mod_test

  use constants_mod,                       only : i_def, r_def
  use get_unit_test_m3x3_q3x3x3_sizes_mod, only : get_w0_m3x3_q3x3x3_size, &
                                                  get_w3_m3x3_q3x3x3_size
  use get_unit_test_m3x3_dofmap_mod,       only : get_w0_m3x3_dofmap, &
                                                  get_w3_m3x3_dofmap
  use get_unit_test_q3x3x3_basis_mod,      only : get_w0_q3x3x3_diff_basis, &
                                                  get_w0_q3x3x3_basis, &
                                                  get_w3_q3x3x3_basis
  use get_unit_test_q3x3x3_quadrature_mod, only : get_gaussian_q3x3x3_quadrature_weights_xy, &
                                                  get_gaussian_q3x3x3_quadrature_weights_z
  use get_unit_test_3x3x3_chi_mod,         only : get_w0_3x3x3_field
  use pFUnit_Mod

  implicit none

  private
  public :: set_rho_kernel_test_type, test_all

  @TestCase
  type, extends(TestCase) :: set_rho_kernel_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type set_rho_kernel_test_type

  integer(i_def), parameter :: element_order = 0

  real(r_def), parameter :: gravity = 9.80665_r_def
  real(r_def), parameter :: radius  = 6371229.0_r_def
  real(r_def), parameter :: omega   = 8.0E-5_r_def
  real(r_def), parameter :: p_zero  = 100000.0_r_def
  real(r_def), parameter :: rd      = 287.05_r_def
  real(r_def), parameter :: cp      = 1005.0_r_def
  real(r_def), parameter :: scaling = 1.0_r_def
  real(r_def), parameter :: tracer_max        = 2.0_r_def
  real(r_def), parameter :: tracer_background = 0.1_r_def
  real(r_def), parameter :: y1                = 0.0_r_def
  real(r_def), parameter :: y2                = 0.0_r_def

  real(r_def), parameter :: bvf_square = 0.0001_r_def
  real(r_def), parameter :: theta_surf = 300.0_r_def
  real(r_def), parameter :: pert_width_scaling = 1.0_r_def

  integer(i_def),                                                  &
               parameter :: profile_size       = 4
  real(r_def), parameter :: profile_data(4)    = (/ 280.0_r_def,   &
                                                    300.0_r_def,   &
                                                    305.0_r_def,   &
                                                    400.0_r_def /)
  real(r_def), parameter :: profile_heights(4) = (/ 500.0_r_def,   &
                                                    4.0e3_r_def,   &
                                                    4.0e3_r_def,   &
                                                    40.0e3_r_def /)

  real(r_def), parameter :: surface_pressure = 1000.0e2_r_def

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )


    use base_mesh_config_mod,      only : geometry_planar, &
                                          topology_fully_periodic
    use chi_transform_mod,         only : init_chi_transforms
    use finite_element_config_mod, only : cellshape_quadrilateral, &
                                          coord_system_xyz
    use feign_config_mod,          only : feign_finite_element_config,      &
                                          feign_base_mesh_config,           &
                                          feign_idealised_config,           &
                                          feign_initial_density_config,     &
                                          feign_initial_temperature_config, &
                                          feign_planet_config,              &
                                          feign_initial_pressure_config

    use initial_pressure_config_mod,                      &
                                   only : method_balanced

    use initial_temperature_config_mod,                   &
                                   only : perturb_none

    use idealised_config_mod,      only : test_gravity_wave

    implicit none

    class(set_rho_kernel_test_type), intent(inout) :: this

    call feign_base_mesh_config( filename='foo',                   &
                                 prime_mesh_name='unit_test',      &
                                 geometry=geometry_planar,         &
                                 offline_partitioning=.false.,     &
                                 topology=topology_fully_periodic, &
                                 fplane=.false., f_lat_deg=0.0_r_def )

    call feign_finite_element_config(           &
             cellshape=cellshape_quadrilateral, &
             coord_order=0_i_def,               &
             coord_system=coord_system_xyz,     &
             element_order=0_i_def,             &
             rehabilitate=.true.,               &
             vorticity_in_w1=.false. )

    call feign_idealised_config( test=test_gravity_wave )
    call feign_initial_density_config( tracer_background=tracer_background,   &
                                       tracer_max=tracer_max,                 &
                                       r1=0.0_r_def, x1=0.0_r_def,            &
                                       y1=y1,        z1=0.0_r_def,            &
                                       r2=0.0_r_def, x2=0.0_r_def,            &
                                       y2=y2,        z2=0.0_r_def)

    call feign_initial_temperature_config( bvf_square=bvf_square,                 &
                                           theta_surf=theta_surf,                 &
                                           pert_width_scaling=pert_width_scaling, &
                                           perturb=perturb_none,                  &
                                           profile_size=profile_size,             &
                                           profile_data=profile_data,             &
                                           profile_heights=profile_heights )

    call feign_initial_pressure_config( method = method_balanced,             &
                                        surface_pressure = surface_pressure )

    call feign_planet_config( gravity=gravity, radius=radius, omega=omega, &
                              rd=rd, cp=cp, p_zero=p_zero,                 &
                              scaling_factor=scaling )

    call init_chi_transforms()

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use configuration_mod,        only: final_configuration
    use chi_transform_mod,        only: final_chi_transforms

    implicit none

    class(set_rho_kernel_test_type), intent(inout) :: this

    call final_configuration()
    call final_chi_transforms()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use set_rho_kernel_mod,     only : set_rho_code

    implicit none

    class(set_rho_kernel_test_type), intent(inout) :: this

    real(r_def), parameter :: tol = 1.0e-6_r_def
    real(r_def), parameter :: dx = 6000.0_r_def, &
                              dy = 2000.0_r_def, &
                              dz = 2000.0_r_def
    real(r_def) :: answer(3)

    integer(i_def) :: nlayers, ncells, cell, icell
    integer(i_def) :: ndf_w0, undf_w0, ndf_w3, undf_w3, ndf_pid, undf_pid
    integer(i_def) :: dim_space, dim_space_diff
    integer(i_def) :: nqp_h, nqp_v

    integer(i_def) :: i, j, k
    real(kind=r_def) :: time

    integer(i_def), allocatable :: map_w0(:,:)
    integer(i_def), allocatable :: map_w3(:,:)
    integer(i_def), allocatable :: map_pid(:,:)
    real(r_def), allocatable :: diff_basis_w0(:,:,:,:)
    real(r_def), allocatable :: basis_w0(:,:,:,:)
    real(r_def), allocatable :: basis_w3(:,:,:,:)
    real(r_def), allocatable :: wh(:), wv(:)

    real(r_def), allocatable :: chi1(:), chi2(:), chi3(:), panel_id(:)
    real(r_def), allocatable :: rho(:)

    nlayers = 3
    call get_w0_m3x3_q3x3x3_size( ndf_w0, undf_w0, ncells, &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, &
                                  nlayers )
    call get_w3_m3x3_q3x3x3_size( ndf_w3, undf_w3, ncells, &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, &
                                  nlayers )
    call get_w0_m3x3_dofmap(map_w0)
    call get_w3_m3x3_dofmap(map_w3)
    call get_w0_q3x3x3_diff_basis(diff_basis_w0)
    call get_w0_q3x3x3_basis(basis_w0)
    call get_w3_q3x3x3_basis(basis_w3)
    call get_gaussian_q3x3x3_quadrature_weights_xy(wh)
    call get_gaussian_q3x3x3_quadrature_weights_z(wv)

    ndf_pid = 1_i_def
    undf_pid = ncells
    call get_w3_m3x3_dofmap(map_pid, 1_i_def)

    ! Compute coordinates
    allocate(chi1(undf_w0))
    allocate(chi2(undf_w0))
    allocate(chi3(undf_w0))
    allocate(panel_id(undf_pid))

    call get_w0_3x3x3_field(chi1, chi2, chi3, dx, dy, dz, &
                            map_w0, nlayers)
    panel_id(:) = 1.0_r_def

    ! Create the data
    allocate(rho(undf_w3))
    rho(:) = 0.0_r_def

    time = 0.0_r_def
    cell = 1

    call set_rho_code( nlayers,           &
                       rho,               &
                       chi1,              &
                       chi2,              &
                       chi3,              &
                       panel_id,          &
                       time,              &
                       ndf_w3,            &
                       undf_w3,           &
                       map_w3(:,cell),    &
                       basis_w3,          &
                       ndf_w0,            &
                       undf_w0,           &
                       map_w0,            &
                       basis_w0,          &
                       diff_basis_w0,     &
                       ndf_pid,           &
                       ncells,            &
                       map_pid(:,cell),   &
                       nqp_h,             &
                       nqp_v,             &
                       wh,                &
                       wv )

    answer(1) = 1.059869_r_def
    answer(2) = 0.8758241_r_def
    answer(3) = 0.7175226_r_def
    do i = 1,3
      @assertEqual(answer(i), rho(map_w3(1,cell)+i-1), tol)
    end do

    deallocate(map_w0)
    deallocate(map_w3)
    deallocate(map_pid)
    deallocate(diff_basis_w0)
    deallocate(basis_w0)
    deallocate(basis_w3)
    deallocate(wh)
    deallocate(wv)

    deallocate(chi1)
    deallocate(chi2)
    deallocate(chi3)
    deallocate(panel_id)
    deallocate(rho)

  end subroutine test_all

end module set_rho_kernel_mod_test
