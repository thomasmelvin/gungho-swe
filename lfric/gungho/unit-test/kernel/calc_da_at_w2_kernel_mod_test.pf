!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the computation of face areas
!>
module calc_dA_at_w2_kernel_mod_test

  use constants_mod,                 only : i_def, r_def

  use get_unit_test_m3x3_q3x3x3_sizes_mod, only : get_w0_m3x3_q3x3x3_size, &
                                                  get_w2_m3x3_q3x3x3_size, &
                                                  get_w3_m3x3_q3x3x3_size

  use get_unit_test_m3x3_dofmap_mod,       only : get_w0_m3x3_dofmap, &
                                                  get_w2_m3x3_dofmap, &
                                                  get_w3_m3x3_dofmap

  use get_unit_test_q3x3x3_basis_mod,      only : get_w0_q3x3x3_diff_basis, &
                                                  get_w0_q3x3x3_basis

  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: calc_dA_at_w2_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type calc_dA_at_w2_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use finite_element_config_mod, only : cellshape_quadrilateral, &
                                          coord_system_xyz
    use formulation_config_mod,    only : eos_method_sampled,      &
                                          moisture_formulation_dry
    use feign_config_mod,          only : feign_finite_element_config, &
                                          feign_formulation_config

    implicit none

    class(calc_dA_at_w2_test_type), intent(inout) :: this

    call feign_finite_element_config(           &
             cellshape=cellshape_quadrilateral, &
             coord_order=0_i_def,               &
             coord_system=coord_system_xyz,     &
             element_order=0_i_def,             &
             rehabilitate=.true.,               &
             vorticity_in_w1=.false. )

    call feign_formulation_config( dlayer_on=.false.,               &
                                   dry_static_adjust=.false.,       &
                                   exner_from_eos=.false.,          &
                                   eos_method=eos_method_sampled,   &
                                   init_exner_bt=.false.,           &
                                   rotating=.true.,                 &
                                   l_multigrid=.false.,             &
                                   shallow=.false.,                 &
                                   moisture_formulation =           &
                                   moisture_formulation_dry,        &
                                   use_physics=.false.,             &
                                   use_wavedynamics=.false.,        &
                                   use_multires_coupling=.false.,   &
                                   si_momentum_equation=.true.,     &
                                   vector_invariant=.false.)

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(calc_dA_at_w2_test_type), intent(inout) :: this

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use, intrinsic :: iso_fortran_env, only : real64
    use calc_dA_at_w2_kernel_mod,      only : calc_dA_at_w2_code

    implicit none

    class(calc_dA_at_w2_test_type), intent(inout) :: this

    real(kind=r_def), parameter :: tol  = 1.0e-8_r_def  ! r_def 64bit tolerance
    real(kind=r_def), parameter :: dx   = 4.0_r_def
    real(kind=r_def), parameter :: dy   = 7.0_r_def
    real(kind=r_def), parameter :: dz   = 13.0_r_def
    real(kind=r_def), parameter :: dzdx = 0.75   ! slope to mimic orography

    ! Reference element parameters for the faces of the cube.
    integer(i_def), parameter :: W=1 !< "West" face of the cell.
    integer(i_def), parameter :: S=2 !< "South" face of the cell.
    integer(i_def), parameter :: E=3 !< "East" face of the cell.
    integer(i_def), parameter :: N=4 !< "North" face of the cell.
    integer(i_def), parameter :: B=5 !< "Bottom" face of the cell.
    integer(i_def), parameter :: T=6 !< "Top" face of the cell.

    ! Fields
    real(r_def), allocatable :: dA_w2(:)
    real(r_def), allocatable :: chi1(:), chi2(:), chi3(:), panel_id(:)

    ! Dofmaps
    integer(i_def), allocatable :: map_w0(:,:)
    integer(i_def), allocatable :: map_w2(:,:)
    integer(i_def), allocatable :: map_pid(:,:)

    ! Basis function
    real(r_def), allocatable :: diff_basis_w0(:,:,:,:)
    real(r_def), allocatable :: basis_w0(:,:,:,:)

    real(r_def)    :: tst, use_tol
    integer(i_def) :: i, j, k, cell

    ! Sizes
    integer(i_def) :: nlayers, ncells
    integer(i_def) :: ndf_w0, undf_w0, ndf_w2, undf_w2, ndf_pid, undf_pid
    integer(i_def) :: dim_space, dim_space_diff
    integer(i_def) :: nqp_h, nqp_v

    nlayers = 3
    call get_w0_m3x3_q3x3x3_size( ndf_w0, undf_w0, ncells,   &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v,              &
                                  nlayers )
    call get_w2_m3x3_q3x3x3_size( ndf_w2, undf_w2, ncells,   &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v,              &
                                  nlayers )
    call get_w3_m3x3_q3x3x3_size( ndf_pid, undf_pid, ncells, &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, 1 )

    call get_w0_m3x3_dofmap(map_w0)
    call get_w2_m3x3_dofmap(map_w2)
    call get_w3_m3x3_dofmap(map_pid, 1)

    call get_w0_q3x3x3_diff_basis(diff_basis_w0)
    call get_w0_q3x3x3_basis(basis_w0)

    ! Compute coordinates
    allocate(chi1(undf_w0))
    allocate(chi2(undf_w0))
    allocate(chi3(undf_w0))
    allocate(panel_id(undf_pid))

    panel_id(:) = 1.0_r_def

    cell = 1
    do j = 1,3
      do i = 1,3
        do k = 0,3
          chi1(map_w0( 1 ,cell ) + k) = real(i-1,r_def) * dx
          chi2(map_w0( 1, cell ) + k) = real(j-1,r_def) * dy
          chi3(map_w0( 1, cell ) + k) = real(k,r_def)   * dz +      &
                                        real(i-1,r_def) * dzdx * dx
        end do
        cell = cell + 1
      end do
    end do

    ! Create the data
    allocate( dA_w2( undf_w2 ) )
    dA_w2(:) = 0.0_r_def

    cell = 1

    call calc_dA_at_w2_code( nlayers,                  &
                             dA_w2,                    &
                             chi1,                     &
                             chi2,                     &
                             chi3,                     &
                             panel_id,                 &
                             ndf_w2,                   &
                             undf_w2,                  &
                             map_w2(:, cell),          &
                             ndf_w0,                   &
                             undf_w0,                  &
                             map_w0(:, cell),          &
                             basis_w0,                 &
                             diff_basis_w0,            &
                             ndf_pid,                  &
                             undf_pid,                 &
                             map_pid(:,cell) )

    ! dx = 4, dy = 7, dz = 13, dzdx=.75, hence areas are
    ! N,S: 7*13 = 91
    ! E,W: 4*13 = 52
    ! T,B: 5*7  = 35
    if ( r_def == real64 ) then
       use_tol = tol
       @assertEqual(91.0_r_def, dA_w2( map_w2( N, cell) ), use_tol)
       @assertEqual(91.0_r_def, dA_w2( map_w2( S, cell) ), use_tol)
       @assertEqual(52.0_r_def, dA_w2( map_w2( E, cell) ), use_tol)
       @assertEqual(52.0_r_def, dA_w2( map_w2( W, cell) ), use_tol)
       @assertEqual(35.0_r_def, dA_w2( map_w2( T, cell) ), use_tol)
       @assertEqual(35.0_r_def, dA_w2( map_w2( B, cell) ), use_tol)
    else
       tst     = dA_w2( map_w2( N, cell) )
       use_tol = 10.0_r_def*spacing( tst )
       @assertEqual(91.0_r_def, tst, use_tol)

       tst     = dA_w2( map_w2( S, cell) )
       use_tol = 10.0_r_def*spacing( tst )
       @assertEqual(91.0_r_def, tst, use_tol)

       tst     = dA_w2( map_w2( E, cell) )
       use_tol = 10.0_r_def*spacing( tst )
       @assertEqual(52.0_r_def, tst, use_tol)

       tst     = dA_w2( map_w2( W, cell) )
       use_tol = 10.0_r_def*spacing( tst )
       @assertEqual(52.0_r_def, tst, use_tol)

       tst     = dA_w2( map_w2( T, cell) )
       use_tol = 10.0_r_def*spacing( tst )
       @assertEqual(35.0_r_def, tst, use_tol)

       tst     = dA_w2( map_w2( B, cell) )
       use_tol = 10.0_r_def*spacing( tst )
       @assertEqual(35.0_r_def, tst, use_tol)
    endif

    deallocate(dA_w2)
    deallocate(chi1)
    deallocate(chi2)
    deallocate(chi3)
    deallocate(panel_id)
    deallocate(map_w0)
    deallocate(map_w2)
    deallocate(map_pid)
    deallocate(diff_basis_w0)
    deallocate(basis_w0)

  end subroutine test_all

end module calc_dA_at_w2_kernel_mod_test
