!-----------------------------------------------------------------------------
! (C) Crown copyright 2022 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

module vertical_uniform_deppt_kernel_mod_test

  use pFUnit_Mod
  use constants_mod,      only : i_def, r_def, r_second

  implicit none

  private
  public :: vertical_uniform_deppt_test_type , test_all

  @TestCase
  type, extends(TestCase) :: vertical_uniform_deppt_test_type
    private
  contains
    procedure setUp
    procedure test_all
    procedure tearDown
  end type vertical_uniform_deppt_test_type

  integer(i_def), parameter :: n_dep_pt_iterations = 3

  real(r_second), parameter :: dt  = 1.0_r_second
  real(r_def), parameter    :: alpha   = 0.5_r_def
  real(r_def), parameter    :: tau_u   = 0.5_r_def
  real(r_def), parameter    :: tau_t   = 0.5_r_def
  real(r_def), parameter    :: tau_r   = 0.5_r_def
  integer(i_def), parameter :: inner_iterations = 0
  integer(i_def), parameter :: outer_iterations = 0
  real(r_second), parameter :: spinup_period = 0.0_r_second
  logical, parameter        :: spinup_winds  = .false.
  logical, parameter        :: spinup_alpha  = .false.

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use feign_config_mod,             only : feign_departure_points_config, &
                                             feign_timestepping_config
    use timestepping_config_mod,      only : method_semi_implicit, &
                                             runge_kutta_method_ssp3
    use departure_points_config_mod,  only : method_euler,           &
                                             method_trapezoidal,     &
                                             method_midpoint,        &
                                             vertical_method_euler,  &
                                             departure_grid_uniform, &
                                             vertical_limit_boundary

    implicit none

    class(vertical_uniform_deppt_test_type), intent(inout) :: this

    call feign_departure_points_config( departure_grid = departure_grid_uniform,  &
                                        method = method_euler,                    &
                                        vertical_limit = vertical_limit_boundary, &
                                        vertical_method = vertical_method_euler,  &
                                        n_dep_pt_iterations=n_dep_pt_iterations  )

    call feign_timestepping_config(                                   &
             method=method_semi_implicit,                             &
             dt=dt,                                                   &
             alpha=alpha,                                             &
             tau_u=tau_u,                                             &
             tau_t=tau_t,                                             &
             tau_r=tau_r,                                             &
             outer_iterations=outer_iterations,                       &
             inner_iterations=inner_iterations,                       &
             runge_kutta_method=runge_kutta_method_ssp3,              &
             spinup_period=spinup_period,                             &
             spinup_alpha=spinup_alpha,                               &
             spinup_winds=spinup_winds )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use configuration_mod,        only: final_configuration

    implicit none

    class(vertical_uniform_deppt_test_type), intent(inout) :: this

    call final_configuration()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use calc_departure_point_kernel_mod,   only : calc_departure_point_code
    use flux_direction_mod,                only : x_direction
    use departure_points_config_mod,       only : vertical_method
    use vertical_uniform_deppt_kernel_mod, only : vertical_uniform_deppt_code

    implicit none

    class(vertical_uniform_deppt_test_type), intent(inout) :: this

    real(kind=r_def), parameter   :: tol    = 1.0e-6_r_def
    real(kind=r_def), allocatable :: u_field(:), dep_pts(:), cfl(:)
    integer(kind=i_def)           :: nlayers
    integer(kind=i_def)           :: ndf_w2
    integer(kind=i_def)           :: undf_w2
    integer(kind=i_def)           :: map_w2(6)

    nlayers = 5
    undf_w2 = 26
    ndf_w2 = 6
    map_w2 = (/ 1,6,11,16,21,22 /)

    allocate(u_field(1:undf_w2))
    allocate(dep_pts(1:undf_w2))
    allocate(cfl(1:undf_w2))

    ! Assume a constant wind field with departure distances less than one.
    u_field(:)  = 0.0_r_def
    u_field(21) = 0.0_r_def
    u_field(22) = 0.8_r_def
    u_field(23) = 0.8_r_def
    u_field(24) = 0.8_r_def
    u_field(25) = 0.8_r_def
    u_field(26) = 0.0_r_def

    ! Initialise dep_pts and CFL to zero
    dep_pts(:)  = 0.0_r_def
    cfl(:)  = 0.0_r_def

    call vertical_uniform_deppt_code(  nlayers,              &
                                       dep_pts,              &
                                       cfl,                  &
                                       u_field,              &
                                       u_field,              &
                                       n_dep_pt_iterations,  &
                                       vertical_method,      &
                                       real(dt, r_def),      &
                                       ndf_w2,               &
                                       undf_w2,              &
                                       map_w2 )

    @assertEqual( 0.0_r_def, dep_pts(21), tol)
    @assertEqual( 0.8_r_def, dep_pts(22), tol)
    @assertEqual( 0.8_r_def, dep_pts(23), tol)
    @assertEqual( 0.8_r_def, dep_pts(24), tol)
    @assertEqual( 0.8_r_def, dep_pts(25), tol)
    @assertEqual( 0.0_r_def, dep_pts(26), tol)

    @assertEqual( 0.0_r_def, cfl(21), tol)
    @assertEqual( 0.8_r_def, cfl(22), tol)
    @assertEqual( 0.8_r_def, cfl(23), tol)
    @assertEqual( 0.8_r_def, cfl(24), tol)
    @assertEqual( 0.8_r_def, cfl(25), tol)
    @assertEqual( 0.0_r_def, cfl(26), tol)

    ! Assume a varying wind field with departure distances greater than one.
    u_field(:) =  0.0_r_def
    u_field(21) = 0.0_r_def
    u_field(22) = 0.8_r_def
    u_field(23) = 1.6_r_def
    u_field(24) = 1.6_r_def
    u_field(25) = 0.8_r_def
    u_field(26) = 0.0_r_def

    call vertical_uniform_deppt_code( nlayers,              &
                                      dep_pts,              &
                                      cfl,                  &
                                      u_field,              &
                                      u_field,              &
                                      n_dep_pt_iterations,  &
                                      vertical_method,      &
                                      real(dt, r_def),      &
                                      ndf_w2,               &
                                      undf_w2,              &
                                      map_w2 )

    @assertEqual( 0.0_r_def, dep_pts(21), tol)
    @assertEqual( 0.8_r_def, dep_pts(22), tol)
    @assertEqual( 1.6_r_def, dep_pts(23), tol)
    @assertEqual( 1.6_r_def, dep_pts(24), tol)
    @assertEqual( 0.8_r_def, dep_pts(25), tol)
    @assertEqual( 0.0_r_def, dep_pts(26), tol)

    @assertEqual( 0.0_r_def, cfl(21), tol)
    @assertEqual( 0.8_r_def, cfl(22), tol)
    @assertEqual( 1.6_r_def, cfl(23), tol)
    @assertEqual( 1.6_r_def, cfl(24), tol)
    @assertEqual( 0.8_r_def, cfl(25), tol)
    @assertEqual( 0.0_r_def, cfl(26), tol)

    deallocate(u_field)
    deallocate(dep_pts)
    deallocate(cfl)

  end subroutine test_all

end module vertical_uniform_deppt_kernel_mod_test
