!-----------------------------------------------------------------------------
! (c) Crown copyright 2022 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> Test the transport metadata collection object
!>
module transport_metadata_collection_test

  use constants_mod,                  only : r_def, l_def, str_def
  use transport_enumerated_types_mod, only : equation_advective,    &
                                             equation_conservative, &
                                             splitting_none,        &
                                             splitting_strang_vhv,  &
                                             splitting_strang_hvh,  &
                                             scheme_mol_3d,         &
                                             scheme_split,          &
                                             split_method_mol,      &
                                             split_method_sl,       &
                                             monotone_none
  use transport_metadata_collection_mod, &
                                      only : transport_metadata_collection_type, &
                                             transport_metadata_collection
  use transport_metadata_mod,         only : transport_metadata_type
  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: transport_metadata_collection_test_type
    private

    integer, allocatable :: dummy_for_gcc

  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type transport_metadata_collection_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use feign_config_mod,     only : feign_transport_config
    use transport_config_mod, only : runge_kutta_method_ssp2,       &
                                     operators_fv,                  &
                                     slice_order_cubic,             &
                                     vertical_sl_order_quintic,     &
                                     ffsl_flux_splitting_full,      &
                                     ffsl_advective_splitting_full, &
                                     max_vert_cfl_calc_uniform,     &
                                     moisture_eqn_advective,        &
                                     ffsl_scheme_three_dim

    implicit none

    class(transport_metadata_collection_test_type), intent(inout) :: this

    ! We only going to use the field names in this unit-test,
    ! which are checked by the transport_metadata_collection
    ! All the other options are unused so don't matter
    call feign_transport_config( field_names = (/ 'do', 're', 'mi' /),                &
                                 profile_size = 3,                                    &
                                 scheme = (/ 1, 1, 1 /),                              &
                                 splitting = (/1, 1, 1/),                             &
                                 horizontal_method = (/ 1, 1, 1 /),                   &
                                 vertical_method = (/ 1, 1, 1 /),                     &
                                 monotone = (/ 1, 1, 1 /),                            &
                                 log_space = (/ .false., .false., .false. /),         &
                                 enforce_min_value = (/ .false., .false., .false. /), &
                                 min_value = (/ 0.0_r_def, 0.0_r_def, 0.0_r_def /),   &
                                 operators = operators_fv,                            &
                                 runge_kutta_method =                                 &
                                              runge_kutta_method_ssp2,                &
                                 fv_vertical_order = 2,                               &
                                 fv_horizontal_order = 2,                             &
                                 consistent_metric  = .false.,                        &
                                 oned_reconstruction = .false.,                       &
                                 cfl_mol_1d_stab = 1.0_r_def,                         &
                                 cfl_mol_2d_stab = 1.0_r_def,                         &
                                 cfl_mol_3d_stab = 1.0_r_def,                         &
                                 dry_field_name = 'do',                               &
                                 slice_order = slice_order_cubic,                     &
                                 vertical_sl_order =                                  &
                                              vertical_sl_order_quintic,              &
                                 use_density_predictor = .false.,                     &
                                 ffsl_flux_splitting =                                &
                                              ffsl_flux_splitting_full,               &
                                 ffsl_advective_splitting =                           &
                                              ffsl_advective_splitting_full,          &
                                 moisture_eqn=moisture_eqn_advective,                 &
                                 max_vert_cfl_calc = max_vert_cfl_calc_uniform,       &
                                 ffsl_scheme = ffsl_scheme_three_dim,                 &
                                 reversible = (/ .false., .false., .false. /)         &
                                 )


    ! Create top level function space collection
    transport_metadata_collection = transport_metadata_collection_type()

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use configuration_mod, only: final_configuration

    implicit none

    class(transport_metadata_collection_test_type), intent(inout) :: this

    call transport_metadata_collection%clear()
    call final_configuration()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  @test
  subroutine test_all( this )


    implicit none

    class(transport_metadata_collection_test_type), intent(inout) :: this

    real(kind=r_def),              parameter :: tol = 1.0e-12_r_def
    real(kind=r_def),              parameter :: zero_min_value = 0.0_r_def
    logical(kind=l_def),           parameter :: no_enforce_min_value = .false.
    logical(kind=l_def),           parameter :: no_logspace = .false.
    real(kind=r_def),              parameter :: one_min_value = 1.0_r_def
    logical(kind=l_def),           parameter :: enforce_min_value = .true.
    logical(kind=l_def),           parameter :: logspace = .true.
    logical(kind=l_def),           parameter :: divergence_factor = .true.
    logical(kind=l_def),           parameter :: reversible = .true.
    type(transport_metadata_type), pointer   :: metadata_ptr
    type(transport_metadata_type)            :: metadata
    character(len=str_def)                   :: fname

    ! Add two metadata objects and then get them
    fname = 'do'
    metadata = transport_metadata_type(fname,                 &
                                       equation_advective,    &
                                       splitting_none,        &
                                       scheme_mol_3d,         &
                                       split_method_mol,      &
                                       split_method_mol,      &
                                       monotone_none,         &
                                       no_enforce_min_value,  &
                                       zero_min_value,        &
                                       no_logspace,           &
                                       divergence_factor,     &
                                       reversible)

    call transport_metadata_collection%set_transport_metadata(metadata)

    fname = 're'
    metadata = transport_metadata_type(fname,                 &
                                       equation_conservative, &
                                       splitting_strang_vhv,  &
                                       scheme_split,          &
                                       split_method_mol,      &
                                       split_method_mol,      &
                                       monotone_none,         &
                                       no_enforce_min_value,  &
                                       zero_min_value,        &
                                       no_logspace,           &
                                       divergence_factor,     &
                                       reversible)

    call transport_metadata_collection%set_transport_metadata(metadata)

    fname = 'mi'
    metadata = transport_metadata_type(fname,                 &
                                       equation_conservative, &
                                       splitting_strang_hvh,  &
                                       scheme_split,          &
                                       split_method_mol,      &
                                       split_method_sl,       &
                                       monotone_none,         &
                                       enforce_min_value,     &
                                       one_min_value,         &
                                       logspace,              &
                                       divergence_factor,     &
                                       reversible)

    call transport_metadata_collection%set_transport_metadata(metadata)

    ! Get metadata
    fname = 'do'
    metadata_ptr => transport_metadata_collection%get_transport_metadata(fname)
    @assertEqual(fname, metadata_ptr%get_name())
    @assertEqual(equation_advective, metadata_ptr%get_equation())
    @assertEqual(splitting_none, metadata_ptr%get_splitting())
    @assertEqual(scheme_mol_3d, metadata_ptr%get_scheme())
    @assertEqual(no_enforce_min_value, metadata_ptr%get_enforce_min_value())
    @assertEqual(zero_min_value, metadata_ptr%get_min_value(), tol)
    @assertEqual(no_logspace, metadata_ptr%get_log_space())

    fname = 're'
    metadata_ptr => transport_metadata_collection%get_transport_metadata(fname)
    @assertEqual(fname, metadata_ptr%get_name())
    @assertEqual(equation_conservative, metadata_ptr%get_equation())
    @assertEqual(splitting_strang_vhv, metadata_ptr%get_splitting())
    @assertEqual(scheme_split, metadata_ptr%get_scheme())
    @assertEqual(no_enforce_min_value, metadata_ptr%get_enforce_min_value())
    @assertEqual(zero_min_value, metadata_ptr%get_min_value(), tol)
    @assertEqual(no_logspace, metadata_ptr%get_log_space())

    fname = 'mi'
    metadata_ptr => transport_metadata_collection%get_transport_metadata(fname)
    @assertEqual(fname, metadata_ptr%get_name())
    @assertEqual(equation_conservative, metadata_ptr%get_equation())
    @assertEqual(splitting_strang_hvh, metadata_ptr%get_splitting())
    @assertEqual(scheme_split, metadata_ptr%get_scheme())
    @assertEqual(enforce_min_value, metadata_ptr%get_enforce_min_value())
    @assertEqual(one_min_value, metadata_ptr%get_min_value(), tol)
    @assertEqual(logspace, metadata_ptr%get_log_space())

  end subroutine test_all

end module transport_metadata_collection_test
