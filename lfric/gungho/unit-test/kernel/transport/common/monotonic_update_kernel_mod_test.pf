!-----------------------------------------------------------------------------
! (C) Crown copyright 2018 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> Test the monotonic update computation
module monotonic_update_kernel_mod_test

  use constants_mod, only : i_def, r_def
  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: monotonic_update_test_type
    private
  contains
    procedure test_all
  end type monotonic_update_test_type

contains

  @Test
  subroutine test_all( this )

    use monotonic_update_kernel_mod, only: monotonic_update_code

    implicit none

    class(monotonic_update_test_type), intent(inout) :: this

    real(r_def), parameter :: tol = 1.0e-12_r_def

    integer(i_def), parameter                      :: nlayers = 1
    integer(i_def), parameter                      :: ndf_wt = 2
    integer(i_def), parameter                      :: stencil_size = 2
    integer(i_def), parameter                      :: undf_wt = ndf_wt*stencil_size
    integer(i_def), dimension(ndf_wt,stencil_size) :: map_wt

    real(r_def), dimension(undf_wt) :: adv, theta, inv_mt
    real(r_def), parameter          :: dt = 10.0_r_def
    real(r_def), parameter          :: dv = 8.0_r_def
    integer(i_def), parameter       :: order = 1
    real(r_def)                     :: answer

    integer(i_def) :: i

    do i = 1, stencil_size
      map_wt(1,i) = (i-1)*(nlayers+1) + 1
      map_wt(2,i) = (i-1)*(nlayers+1) + 2
    end do

    inv_mt(:) = 1.0/dv
    ! Create a random theta_field
    call random_number(theta)

    adv(:) = -1.0_r_def

    call monotonic_update_code( nlayers,              &
                                adv,                  &
                                theta,                &
                                stencil_size,         &
                                map_wt,               &
                                inv_mt,               &
                                dt,                   &
                                order,                &
                                ndf_wt,               &
                                undf_wt,              &
                                map_wt)
    answer = min((theta(1) - minval(theta))*dv/dt, &
             max((theta(1) - maxval(theta))*dv/dt,adv(1)))

    @assertEqual(answer, adv(1), tol)

  end subroutine test_all

end module monotonic_update_kernel_mod_test
