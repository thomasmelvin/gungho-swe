!-----------------------------------------------------------------------------
! (c) Crown copyright 2022 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> Test the transport metadata type
!>
module transport_metadata_test

  use constants_mod,                  only : r_def, l_def, str_def, i_def
  use transport_enumerated_types_mod, only : equation_advective,  &
                                             splitting_hv,        &
                                             scheme_split,        &
                                             split_method_ffsl,   &
                                             split_method_sl,     &
                                             monotone_none
  use transport_metadata_mod,         only : transport_metadata_type
  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: transport_metadata_test_type
    private

    integer, allocatable :: dummy_for_gcc

  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type transport_metadata_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(transport_metadata_test_type), intent(inout) :: this

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(transport_metadata_test_type), intent(inout) :: this

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  @test
  subroutine test_all( this )


    implicit none

    class(transport_metadata_test_type), intent(inout) :: this

    ! Set parameters for metadata
    character(len=str_def)        :: fname = 'some_field'
    integer(kind=i_def)           :: equation_form = equation_advective
    integer(kind=i_def)           :: scheme = scheme_split
    integer(kind=i_def)           :: splitting = splitting_hv
    integer(kind=i_def)           :: horizontal_method = split_method_ffsl
    integer(kind=i_def)           :: vertical_method = split_method_sl
    integer(kind=i_def)           :: monotone = monotone_none
    logical(kind=l_def)           :: enforce_min_value = .true.
    logical(kind=l_def)           :: logspace = .true.
    logical(kind=l_def)           :: divergence_factor = .false.
    real(kind=r_def)              :: min_value = 1.9_r_def
    logical(kind=l_def)           :: reversible = .false.
    type(transport_metadata_type) :: our_metadata


    ! Set up metadata object and then get them
    our_metadata = transport_metadata_type(fname,             &
                                           equation_form,     &
                                           splitting,         &
                                           scheme,            &
                                           horizontal_method, &
                                           vertical_method,   &
                                           monotone,          &
                                           enforce_min_value, &
                                           min_value,         &
                                           logspace,          &
                                           divergence_factor, &
                                           reversible)

    ! Check all properties of metadata object
    @assertEqual(fname, our_metadata%get_name())
    @assertEqual(equation_form, our_metadata%get_equation())
    @assertEqual(splitting, our_metadata%get_splitting())
    @assertEqual(scheme, our_metadata%get_scheme())
    @assertEqual(horizontal_method, our_metadata%get_horizontal_method())
    @assertEqual(vertical_method, our_metadata%get_vertical_method())
    @assertEqual(monotone, our_metadata%get_monotone())
    @assertEqual(enforce_min_value, our_metadata%get_enforce_min_value())
    @assertEqual(min_value, our_metadata%get_min_value())
    @assertEqual(logspace, our_metadata%get_log_space())
    @assertEqual(divergence_factor, our_metadata%get_divergence_factor())

  end subroutine test_all

end module transport_metadata_test
