!-----------------------------------------------------------------------------
! (C) Crown copyright 2018 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> Test the reconstruction computation using 1d polynomials
!> (valid for lowest order quadrilateral elements)
module poly1d_vert_w3_reconstruction_kernel_mod_test

  use constants_mod, only : i_def, r_def, l_def, EPS
  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: poly1d_vert_w3_reconstruction_test_type
    private
  contains
    procedure test_all
  end type poly1d_vert_w3_reconstruction_test_type

contains

  @Test
  subroutine test_all( this )

    use, intrinsic :: iso_fortran_env, only: real64
    use poly1d_vert_w3_reconstruction_kernel_mod,   only: poly1d_vert_w3_reconstruction_code

    use get_unit_test_planar_mesh_mod, &
                                     only: get_outward_normals_to_vertical_faces

    implicit none

    class(poly1d_vert_w3_reconstruction_test_type), intent(inout) :: this

    real(r_def), parameter :: tol = 1.0e-12_r_def  ! r_def 64bit tolerance
    real(r_def)            :: answer, use_tol

    integer(i_def), parameter :: nfaces_v = 2
    integer(i_def), parameter :: nlayers = 5
    integer(i_def), parameter :: mol_order = 2
    integer(i_def), parameter :: ndata = (mol_order+1)*nfaces_v
    integer(i_def), parameter :: ndf_w2 = 6
    integer(i_def), parameter :: ndf_w3 = 1
    integer(i_def), parameter :: ndf_c  = 1
    integer(i_def), parameter :: undf_w2 = (nlayers+1)
    integer(i_def), parameter :: undf_w3 = ndf_w3*nlayers
    integer(i_def), parameter :: undf_c  = ndata*(nlayers+1)

    integer(i_def), dimension(ndf_w2) :: map_w2
    integer(i_def), dimension(ndf_w3) :: map_w3
    integer(i_def), dimension(ndf_c)  :: map_c


    real(r_def), dimension(undf_w2) :: reconstruction
    real(r_def), dimension(undf_w2) :: reconstruct_answer
    real(r_def), dimension(undf_w2) :: wind
    real(r_def), dimension(undf_w3) :: density
    real(r_def), dimension(undf_c)  :: coeff

    integer(i_def) :: df, k, f
    logical(l_def) :: logspace

    map_w3(1) = 1
    map_c(1) = 1
    map_w2(1:4) = 0
    map_w2(5:6) = (/1, 2/)

    wind(:) = 1.0_r_def

    do k = 1,nlayers
      density(k) = real(k,r_def) - 0.5_r_def
    end do

    ! Quadratic fit for most of the domain
    do k = 1, nlayers-1
      df = k*ndata + map_c(1)
      coeff( df:2+df) = (/2.0_r_def, 5.0_r_def, -1.0_r_def/)/6.0_r_def
      df = (mol_order+1) + k*ndata + map_c(1)
      coeff( df:2+df) = (/-1.0_r_def, 5.0_r_def, 2.0_r_def/)/6.0_r_def
    end do
    ! Downwinding near boundaries
    k = 1
    df = (mol_order+1) +  k*ndata + map_c(1)
    coeff( df:2+df) = (/2.0_r_def, 5.0_r_def, -1.0_r_def/)/6.0_r_def
    k = nlayers-1
    df = k*ndata + map_c(1)
    coeff( df:2+df) = (/-1.0_r_def, 5.0_r_def, 2.0_r_def/)/6.0_r_def
    ! Extrapolation on boundaries
    k = nlayers
    do f = 0, 1
      df = f*(mol_order+1) + map_c(1)
      coeff( df:2+df ) = (/ 15.0_r_def, -10.0_r_def, 3.0_r_def/)/8.0_r_def
      df = f*(mol_order+1) + k*ndata + map_c(1)
      coeff( df:2+df ) = (/ 3.0_r_def, -10.0_r_def, 15.0_r_def/)/8.0_r_def
    end do
    ! First test standard polynomial interpolation
    logspace = .false.
    call poly1d_vert_w3_reconstruction_code( nlayers,                           &
                                             reconstruction,                    &
                                             wind,                              &
                                             density,                           &
                                             coeff,                             &
                                             ndata,                             &
                                             mol_order,                         &
                                             logspace,                          &
                                             ndf_w2,                            &
                                             undf_w2,                           &
                                             map_w2,                            &
                                             ndf_w3,                            &
                                             undf_w3,                           &
                                             map_w3,                            &
                                             ndf_c,                             &
                                             undf_c,                            &
                                             map_c)
    if ( r_def == real64 ) then
      use_tol = tol
    else
      use_tol = 10.0_r_def*spacing( reconstruction(map_w2(5)+1) )
    endif
    answer = 1.0_r_def
    @assertEqual(answer, reconstruction(map_w2(5)+1) , use_tol)
    answer = 2.0_r_def
    @assertEqual(answer, reconstruction(map_w2(5)+2) , tol)

    ! Next test standard polynomial interpolation in log-space

    do k = 1,nlayers
      density(k) = exp(-real(k,r_def)+0.5_r_def)
    end do
    logspace = .true.
    call poly1d_vert_w3_reconstruction_code( nlayers,                           &
                                             reconstruction,                    &
                                             wind,                              &
                                             density,                           &
                                             coeff,                             &
                                             ndata,                             &
                                             mol_order,                         &
                                             logspace,                          &
                                             ndf_w2,                            &
                                             undf_w2,                           &
                                             map_w2,                            &
                                             ndf_w3,                            &
                                             undf_w3,                           &
                                             map_w3,                            &
                                             ndf_c,                             &
                                             undf_c,                            &
                                             map_c)
    if ( r_def == real64 ) then
      use_tol = tol
    else
      use_tol = 10.0_r_def*spacing( reconstruction(map_w2(5)+1) )
    endif
    answer = exp(-1.0_r_def)
    @assertEqual(answer, reconstruction(map_w2(5)+1), use_tol)
    answer = exp(-2.0_r_def)
    @assertEqual(answer, reconstruction(map_w2(5)+2), use_tol)

    ! ------------------------------------------------------------------------ !
    ! Test that zero values don't cause blow up
    ! ------------------------------------------------------------------------ !

    ! Do reconstruction with zero density
    density(:) = 0.0_r_def
    reconstruction(:) = 0.0_r_def
    call poly1d_vert_w3_reconstruction_code( nlayers,                          &
                                             reconstruction,                   &
                                             wind,                             &
                                             density,                          &
                                             coeff,                            &
                                             ndata,                            &
                                             mol_order,                        &
                                             logspace,                         &
                                             ndf_w2,                           &
                                             undf_w2,                          &
                                             map_w2,                           &
                                             ndf_w3,                           &
                                             undf_w3,                          &
                                             map_w3,                           &
                                             ndf_c,                            &
                                             undf_c,                           &
                                             map_c)

    ! Now do reconstruction with tiny density as a control
    density(:) = EPS
    reconstruct_answer(:) = 0.0_r_def
    call poly1d_vert_w3_reconstruction_code( nlayers,                          &
                                             reconstruct_answer,               &
                                             wind,                             &
                                             density,                          &
                                             coeff,                            &
                                             ndata,                            &
                                             mol_order,                        &
                                             logspace,                         &
                                             ndf_w2,                           &
                                             undf_w2,                          &
                                             map_w2,                           &
                                             ndf_w3,                           &
                                             undf_w3,                          &
                                             map_w3,                           &
                                             ndf_c,                            &
                                             undf_c,                           &
                                             map_c)

    @assertEqual(reconstruction, reconstruct_answer, use_tol)

  end subroutine test_all

end module poly1d_vert_w3_reconstruction_kernel_mod_test
