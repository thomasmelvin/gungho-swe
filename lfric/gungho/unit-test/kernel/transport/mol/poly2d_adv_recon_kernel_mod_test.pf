!-----------------------------------------------------------------------------
! (C) Crown copyright 2018 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> Test the polynomial reconstruction of a tracer field on horizontal
!> edges (valid for lowest order quadrilateral elements)
module poly2d_adv_recon_kernel_mod_test

  use constants_mod,only : i_def, r_def
  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: poly2d_adv_recon_test_type
    private
  contains
    procedure test_all
  end type poly2d_adv_recon_test_type

contains

  @Test
  subroutine test_all( this )

    use poly2d_adv_recon_kernel_mod, only: poly2d_adv_recon_code

    use get_unit_test_planar_mesh_mod, &
                                     only: get_outward_normals_to_horizontal_faces

    implicit none

    class(poly2d_adv_recon_test_type), intent(inout) :: this

    real(r_def), parameter :: tol = 1.0e-12_r_def
    real(r_def)            :: answer

    integer(i_def), parameter                      :: nlayers = 3
    integer(i_def), parameter                      :: nfaces_h = 4
    integer(i_def), parameter                      :: stencil_size = 3
    integer(i_def), parameter                      :: ndata = stencil_size*nfaces_h
    integer(i_def), parameter                      :: ndf_w1 = 8
    integer(i_def), parameter                      :: ndf_w2 = 4
    integer(i_def), parameter                      :: ndf_wt = 2
    integer(i_def), parameter                      :: ndf_c  = 1
    integer(i_def), parameter                      :: undf_w1 = nfaces_h*(nlayers+1)
    integer(i_def), parameter                      :: undf_w2 = ndf_w2*nlayers
    integer(i_def), parameter                      :: undf_c  = ndata
    integer(i_def), dimension(ndf_w1)              :: map_w1
    integer(i_def), dimension(ndf_w2)              :: map_w2
    integer(i_def), dimension(ndf_c)               :: map_c
    integer(i_def), dimension(ndf_wt,stencil_size) :: stencil_map
    integer(i_def), parameter                      :: undf_wt = (nlayers+1)*stencil_size
    real(kind=r_def), dimension(3,ndf_w2,ndf_w1)   :: basis_w2
    real(r_def), allocatable, dimension(:,:)       :: outward_normals_to_horizontal_faces

    real(r_def), dimension(undf_w1) :: reconstruction
    real(r_def), dimension(undf_w2) :: wind
    real(r_def), dimension(undf_wt) :: tracer
    real(r_def), dimension(undf_c)  :: coeff

    integer(i_def) :: i

    do i = 1,ndf_w2
      map_w2(i) = 1 + (i-1)*nlayers
    end do
    do i = 1,nfaces_h
      map_w1(i) = 1 + (i-1)*(nlayers+1)
      map_w1(i+nfaces_h) = map_w1(i) + 1
    end do
    do i = 1,stencil_size
      stencil_map(1,i) = 1 + (i-1)*(nlayers+1)
      stencil_map(2,i) = 2 + (i-1)*(nlayers+1)
    end do
    map_c(:) = (/ 1 /)

    ! Get canned information for the reference cube
    call get_outward_normals_to_horizontal_faces(outward_normals_to_horizontal_faces)

    basis_w2(:,:,:) = 0.0_r_def

    basis_w2(1,1,1) = 1.0_r_def
    basis_w2(1,1,5) = 1.0_r_def
    basis_w2(1,1,2) = 0.5_r_def
    basis_w2(1,1,4) = 0.5_r_def
    basis_w2(1,1,6) = 0.5_r_def
    basis_w2(1,1,8) = 0.5_r_def

    basis_w2(2,2,2) =-1.0_r_def
    basis_w2(2,2,6) =-1.0_r_def
    basis_w2(2,2,1) =-0.5_r_def
    basis_w2(2,2,3) =-0.5_r_def
    basis_w2(2,2,5) =-0.5_r_def
    basis_w2(2,2,7) =-0.5_r_def

    basis_w2(1,3,3) = 1.0_r_def
    basis_w2(1,3,7) = 1.0_r_def
    basis_w2(1,3,2) = 0.5_r_def
    basis_w2(1,3,4) = 0.5_r_def
    basis_w2(1,3,6) = 0.5_r_def
    basis_w2(1,3,8) = 0.5_r_def

    basis_w2(2,4,4) =-1.0_r_def
    basis_w2(2,4,8) =-1.0_r_def
    basis_w2(2,4,1) =-0.5_r_def
    basis_w2(2,4,3) =-0.5_r_def
    basis_w2(2,4,5) =-0.5_r_def
    basis_w2(2,4,7) =-0.5_r_def

    wind(:) = 1.0_r_def

    ! Set up coeff field for quadratic fit in x direction
    coeff(:) = 0.0_r_def
    coeff((0 + 2*stencil_size) + map_c(1)) =  5.0_r_def/6.0_r_def
    coeff((1 + 2*stencil_size) + map_c(1)) = -1.0_r_def/6.0_r_def
    coeff((2 + 2*stencil_size) + map_c(1)) =  2.0_r_def/6.0_r_def

    ! Set up tracer field so that d(tracer)/dx = 10
    tracer(:) = 300.0_r_def
    do i = 0,nlayers
      tracer(stencil_map(1,1)+i) = 300.0_r_def
      tracer(stencil_map(1,2)+i) = 290.0_r_def
      tracer(stencil_map(1,3)+i) = 310.0_r_def
    end do
    reconstruction(:) = 0.0_r_def
    call poly2d_adv_recon_code( nlayers,              &
                                reconstruction,       &
                                wind,                 &
                                tracer,               &
                                stencil_size,         &
                                stencil_map,          &
                                coeff,                &
                                ndata,                &
                                stencil_size,         &
                                ndf_w1,               &
                                undf_w1,              &
                                map_w1,               &
                                ndf_w2,               &
                                undf_w2,              &
                                map_w2,               &
                                basis_w2,             &
                                ndf_wt,               &
                                undf_wt,              &
                                stencil_map(:,1),     &
                                ndf_c,                &
                                undf_c,               &
                                map_c,                &
                                nfaces_h,             &
                                outward_normals_to_horizontal_faces )
    answer = 305.0_r_def
    do i = 0,nlayers-1
      @assertEqual(answer, reconstruction(map_w1(3)+i) , tol)
    end do

  end subroutine test_all

end module poly2d_adv_recon_kernel_mod_test
