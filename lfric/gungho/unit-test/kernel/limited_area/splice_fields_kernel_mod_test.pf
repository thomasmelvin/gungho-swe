!-----------------------------------------------------------------------------
! (C) Crown copyright 2022 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> Test kernel that where the input mask above a threshold, replace the values
!> of the output field with the input field.

module splice_fields_kernel_mod_test

  use constants_mod, only : i_def, r_def
  use pFUnit_Mod

  implicit none

  private
  public :: test_splice_fields_kernel

  @TestCase
  type, extends(TestCase), public :: splice_fields_test_type
    private
    integer(kind=i_def) :: nlayers
    integer(kind=i_def) :: ncells
    integer(kind=i_def) :: ndf3, undf3
    integer(kind=i_def), allocatable :: map3(:,:)
    real(kind=r_def),    allocatable :: onion_layers(:)
    real(kind=r_def),    allocatable :: field_B(:)
    real(kind=r_def),    allocatable :: field_A(:)
    real(kind=r_def)                 :: threshold
    real(kind=r_def),    allocatable :: answer(:)
  contains
    procedure SetUp
    procedure tearDown
    procedure test_splice_fields_kernel
  end type splice_fields_test_type

  contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use get_unit_test_m3x3_dofmap_mod,       only : get_w3_m3x3_dofmap
    use get_unit_test_m3x3_q3x3x3_sizes_mod, only : get_w3_m3x3_q3x3x3_size
    implicit none

    class(splice_fields_test_type), intent(inout) :: this

    ! Quadrature (not used)
    integer(kind=i_def) :: nqp_h, nqp_v

    ! Dimensions (not used)
    integer(kind=i_def) :: dim_space, dim_space_diff

    ! Mesh
    this%nlayers = 1

    ! Setup W3 fields
    call get_w3_m3x3_q3x3x3_size(this%ndf3, this%undf3, this%ncells, &
                                 dim_space, dim_space_diff, &
                                 nqp_h, nqp_v, &
                                 this%nlayers)

    allocate(this%map3(this%ndf3,this%ncells))
    allocate(this%onion_layers(this%undf3))
    allocate(this%field_B(this%undf3))
    allocate(this%field_A(this%undf3))

    call get_w3_m3x3_dofmap(this%map3, this%nlayers)

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use boundaries_config_mod, only: boundaries_final

    implicit none

    class(splice_fields_test_type), intent(inout) :: this

    deallocate(this%map3)
    deallocate(this%onion_layers)
    deallocate(this%field_B)
    deallocate(this%field_A)

    call boundaries_final()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_splice_fields_kernel( this )

    use splice_fields_kernel_mod, only : splice_fields_code

    implicit none

    class(splice_fields_test_type), intent(inout) :: this

    real(kind=r_def), parameter :: tol = 1.0e-9_r_def

    integer(kind=r_def) :: cell, df

    ! Set up input and output masks
    this%field_B(:) = 1.0_r_def
    this%field_A(:) = 0.5_r_def
    this%onion_layers(:) = 2.0_r_def
    this%onion_layers(5) = 1.0_r_def
    this%threshold = 1.5_r_def

    ! Define answer
    ! 3x3 cell domain, central cell is cell id = 5
    allocate(this%answer(this%undf3))

    this%answer(:) = 1.0_r_def
    this%answer(5) = 0.5_r_def

    do cell=1,this%ncells
      call splice_fields_code(this%nlayers,      &
                              this%field_A,      &
                              this%field_B,      &
                              this%onion_layers, &
                              this%threshold,    &
                              this%ndf3,         &
                              this%undf3,        &
                              this%map3(:,cell), &
                              this%ndf3,         &
                              this%undf3,        &
                              this%map3(:,cell)  &
                              )
    end do

    ! Checking all DoFs
    do df = 1,this%undf3
      @assertEqual(this%field_A(df),this%answer(df), tol)
    end do

    deallocate(this%answer)

  end subroutine test_splice_fields_kernel

end module splice_fields_kernel_mod_test
