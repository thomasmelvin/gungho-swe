!-----------------------------------------------------------------------------
! Copyright (c) 2022,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the gas law factor in traditional moist dynamics
!>
module moist_dyn_gas_kernel_mod_test

  use constants_mod, only: i_def, r_def
  use pFUnit_Mod

  implicit none

  private
  public :: moist_dyn_gas_test_type, test_all

  @TestCase
  type, extends(TestCase) :: moist_dyn_gas_test_type
    private
    integer(i_def), allocatable :: map_wtheta(:)
    real(r_def),    allocatable :: mr_v(:)
    real(r_def),    allocatable :: moist_dyn_gas(:)
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type moist_dyn_gas_test_type

  integer(i_def), parameter :: nlayers = 5
  integer(i_def), parameter :: ndf_wtheta = 2
  integer(i_def), parameter :: undf_wtheta = nlayers * ndf_wtheta

  ! Data for planet namelist
  real(r_def), parameter :: cp              = 1000.0_r_def
  real(r_def), parameter :: gravity         = 10.0_r_def
  real(r_def), parameter :: omega           = 8.0E-5_r_def
  real(r_def), parameter :: p_zero          = 100000.0_r_def
  real(r_def), parameter :: radius          = 6000000_r_def
  real(r_def), parameter :: rd              = 300.0_r_def
  real(r_def), parameter :: scaling_factor  = 1.0_r_def

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use feign_config_mod, only: feign_planet_config

    implicit none

    class(moist_dyn_gas_test_type), intent(inout) :: this

    allocate(this%map_wtheta(ndf_wtheta))
    allocate(this%mr_v(undf_wtheta))
    allocate(this%moist_dyn_gas(undf_wtheta))

    call feign_planet_config( cp = cp, gravity = gravity,  omega = omega, &
                              p_zero = p_zero, radius = radius, rd = rd,  &
                              scaling_factor = scaling_factor )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(moist_dyn_gas_test_type), intent(inout) :: this

    deallocate(this%map_wtheta)
    deallocate(this%mr_v)
    deallocate(this%moist_dyn_gas)

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use, intrinsic :: iso_fortran_env, only : real64
    use moist_dyn_gas_kernel_mod,      only : moist_dyn_gas_code

    implicit none

    class(moist_dyn_gas_test_type), intent(inout) :: this

    real(r_def), parameter :: tol = 1.0e-9_r_def   ! r_def 64bit
    real(r_def)            :: answer

    integer(i_def)         :: k, df
    real(r_def)            :: z_factor
    real(r_def), parameter :: epsilon = 0.65004008580529138_r_def

    ! Single column with nlayers
    ! Fields are p/wise linear discontinuous functions
    this%map_wtheta = (/ 1_i_def, 1_i_def + nlayers /)

    ! Create the data
    do k = 0, nlayers - 1
      do df = 1, ndf_wtheta
        z_factor = 1.0_r_def - real(k + df - 1_i_def, kind = r_def) / &
                               real(nlayers, kind = r_def)
        this%mr_v(this%map_wtheta(df) + k) = 0.01_r_def * z_factor
      end do
    end do

    ! Test kernel
    call moist_dyn_gas_code(nlayers,                    &
                             this%moist_dyn_gas,        &
                             this%mr_v,                 &
                             ndf_wtheta, undf_wtheta,   &
                             this%map_wtheta )

    ! Check continuity at internal cell boundaries
    do k = 1, nlayers - 1
      answer =  this%moist_dyn_gas(this%map_wtheta(2) + k - 1)
      @assertEqual(this%moist_dyn_gas(this%map_wtheta(1) + k), answer, tol)
    end do

    ! Check gas law factor
    do k = 1, nlayers - 1
      do df = 1, ndf_wtheta
        z_factor = 1.0_r_def - real(k + df - 1_i_def, kind = r_def) / &
                               real(nlayers, kind = r_def)
        answer = 1.0_r_def + 0.01_r_def * z_factor / epsilon
        @assertEqual(this%moist_dyn_gas(this%map_wtheta(df) + k), answer, tol)
      end do
    end do

  end subroutine test_all

end module moist_dyn_gas_kernel_mod_test
