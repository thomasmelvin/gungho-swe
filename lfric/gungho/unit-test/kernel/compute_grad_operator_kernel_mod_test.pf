!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the gradient operator computation
!>
module compute_grad_operator_kernel_mod_test

  use constants_mod,                       only : i_def, r_def
  use get_unit_test_m3x3_q3x3x3_sizes_mod, only : get_w0_m3x3_q3x3x3_size,  &
                                                  get_w1_m3x3_q3x3x3_size,  &
                                                  get_w3_m3x3_q3x3x3_size
  use get_unit_test_q3x3x3_basis_mod,      only : get_w0_q3x3x3_diff_basis, &
                                                  get_w1_q3x3x3_basis,      &
                                                  get_w0_q3x3x3_basis
  use get_unit_test_m3x3_dofmap_mod,       only : get_w0_m3x3_dofmap, &
                                                  get_w3_m3x3_dofmap
  use get_unit_test_q3x3x3_quadrature_mod, only : get_gaussian_q3x3x3_quadrature_weights_xy, &
                                                  get_gaussian_q3x3x3_quadrature_weights_z
  use get_unit_test_3x3x3_chi_mod,         only : get_w0_3x3x3_field
  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: compute_grad_operator_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type compute_grad_operator_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use finite_element_config_mod, only : cellshape_quadrilateral, &
                                          coord_system_xyz
    use feign_config_mod,          only : feign_finite_element_config

    implicit none

    class(compute_grad_operator_test_type), intent(inout) :: this

    call feign_finite_element_config(           &
             cellshape=cellshape_quadrilateral, &
             coord_order=0_i_def,               &
             coord_system=coord_system_xyz,     &
             element_order=0_i_def,             &
             rehabilitate=.true.,               &
             vorticity_in_w1=.false. )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use configuration_mod,        only: final_configuration

    implicit none

    class(compute_grad_operator_test_type), intent(inout) :: this

    call final_configuration()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  @Test
  subroutine test_all( this )

    use compute_grad_operator_kernel_mod, &
                                    only : compute_grad_operator_code

    implicit none

    class(compute_grad_operator_test_type), intent(inout) :: this

    real(kind=r_def), dimension(12,8) :: answer
    real(kind=r_def), parameter :: tol = 1.0e-6_r_def
    real(kind=r_def), parameter :: dx = 6000.0_r_def
    real(r_def),      parameter :: dy = 1000.0_r_def
    real(r_def),      parameter :: dz = 2000.0_r_def

    integer(i_def) :: nlayers, ncells, ncell_3d, cell, icell
    integer(i_def) :: ndf_w0, undf_w0, ndf_w1, undf_w1
    integer(i_def) :: ndf_pid, undf_pid, ndf_wchi, undf_wchi
    integer(i_def) :: dim_space, dim_space_diff
    integer(i_def) :: nqp_h, nqp_v

    integer(i_def) :: i, j, k

    integer(i_def), allocatable :: map_wchi(:,:), map_pid(:,:)
    real(r_def), allocatable :: diff_basis_w0(:,:,:,:), &
                                basis_w1(:,:,:,:), &
                                diff_basis_wchi(:,:,:,:), &
                                basis_wchi(:,:,:,:)
    real(r_def), allocatable :: wh(:), wv(:)
    real(r_def), allocatable :: local_stencil(:,:,: )
    real(r_def), allocatable :: chi1(:), chi2(:), chi3(:), panel_id(:)

    nlayers=3
    call get_w0_m3x3_q3x3x3_size( ndf_w0, undf_w0, ncells, &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, &
                                  nlayers )
    call get_w0_q3x3x3_diff_basis(diff_basis_w0)
    call get_w0_q3x3x3_basis(basis_wchi)

    call get_w1_m3x3_q3x3x3_size( ndf_w1, undf_w1, ncells, &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, &
                                  nlayers )
    call get_w1_q3x3x3_basis(basis_w1)

    call get_w0_m3x3_q3x3x3_size( ndf_wchi, undf_wchi, ncells, &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, &
                                  nlayers )
    call get_w0_m3x3_dofmap(map_wchi)
    call get_w0_q3x3x3_diff_basis(diff_basis_wchi)
    call get_w3_m3x3_q3x3x3_size( ndf_pid, undf_pid, ncells, &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, 1 )
    call get_w3_m3x3_dofmap(map_pid, 1)

    call get_gaussian_q3x3x3_quadrature_weights_xy(wh)
    call get_gaussian_q3x3x3_quadrature_weights_z(wv)

    ! Compute coordinates
    allocate(chi1(undf_w0))
    allocate(chi2(undf_w0))
    allocate(chi3(undf_w0))
    allocate(panel_id(undf_pid))

    panel_id(:) = 1.0_r_def

    call get_w0_3x3x3_field(chi1, chi2, chi3, dx, dy, dz, &
                            map_wchi, nlayers)

    ncell_3d = ncells*nlayers
    allocate(local_stencil(ndf_w1, ndf_w0, ncell_3d))
    local_stencil(:,:,:) = 0.0_r_def

    ! Test the operator kernel
    cell = 1
    call compute_grad_operator_code( cell,                     &
                                     nlayers,                  &
                                     ncell_3d,                 &
                                     local_stencil,            &
                                     chi1,                     &
                                     chi2,                     &
                                     chi3,                     &
                                     panel_id,                 &
                                     ndf_w1,                   &
                                     basis_w1,                 &
                                     ndf_w0,                   &
                                     diff_basis_w0,            &
                                     ndf_wchi,                 &
                                     undf_wchi,                &
                                     map_wchi,                 &
                                     basis_wchi,               &
                                     diff_basis_wchi,          &
                                     ndf_pid,                  &
                                     undf_pid,                 &
                                     map_pid,                  &
                                     nqp_h,                    &
                                     nqp_v,                    &
                                     wh,                       &
                                     wv                        &
                                   )

    call grad_operator(answer)
    ! Normalise by average edge length
    answer(:,:) = answer(:,:) * 3.0_r_def / (dx + dy + dz )
    local_stencil(:, :, 1 ) =  local_stencil(:, :, 1 ) &
                                  * 3.0_r_def / (dx + dy + dz )
    @assertEqual(answer, local_stencil(:, :, 1 ), tol)

    deallocate(diff_basis_w0)
    deallocate(basis_wchi)
    deallocate(basis_w1)
    deallocate(map_wchi)
    deallocate(map_pid)
    deallocate(diff_basis_wchi)
    deallocate(wh)
    deallocate(wv)
    deallocate(chi1)
    deallocate(chi2)
    deallocate(chi3)
    deallocate(panel_id)
    deallocate(local_stencil)

  end subroutine test_all

  subroutine grad_operator( grad )
    use constants_mod, only: r_def
    implicit none

    real(kind=r_def), dimension(12,8), intent(inout) :: grad
    real(kind=r_def), dimension(12,12) :: m1
    real(kind=r_def), dimension(12,8) :: d10

    m1 = reshape( [ &
  0.1333333333333320E+04_r_def, &
  0.0000000000000000E+00_r_def, &
  0.6666666666666615E+03_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.6666666666666614E+03_r_def, &
  0.0000000000000000E+00_r_def, &
  0.3333333333333312E+03_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.3703703703703668E+02_r_def, &
  0.0000000000000000E+00_r_def, &
  0.1851851851851837E+02_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.1851851851851837E+02_r_def, &
  0.0000000000000000E+00_r_def, &
  0.9259259259259201E+01_r_def, &
  0.6666666666666615E+03_r_def, &
  0.0000000000000000E+00_r_def, &
  0.1333333333333321E+04_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.3333333333333312E+03_r_def, &
  0.0000000000000000E+00_r_def, &
  0.6666666666666615E+03_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.1851851851851837E+02_r_def, &
  0.0000000000000000E+00_r_def, &
  0.3703703703703667E+02_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.9259259259259201E+01_r_def, &
  0.0000000000000000E+00_r_def, &
  0.1851851851851837E+02_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.3333333333333302E+03_r_def, &
  0.1666666666666653E+03_r_def, &
  0.8333333333333280E+02_r_def, &
  0.1666666666666653E+03_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.1666666666666653E+03_r_def, &
  0.3333333333333301E+03_r_def, &
  0.1666666666666653E+03_r_def, &
  0.8333333333333280E+02_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.8333333333333280E+02_r_def, &
  0.1666666666666653E+03_r_def, &
  0.3333333333333302E+03_r_def, &
  0.1666666666666653E+03_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.1666666666666653E+03_r_def, &
  0.8333333333333280E+02_r_def, &
  0.1666666666666653E+03_r_def, &
  0.3333333333333301E+03_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.6666666666666614E+03_r_def, &
  0.0000000000000000E+00_r_def, &
  0.3333333333333312E+03_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.1333333333333321E+04_r_def, &
  0.0000000000000000E+00_r_def, &
  0.6666666666666614E+03_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.1851851851851837E+02_r_def, &
  0.0000000000000000E+00_r_def, &
  0.9259259259259201E+01_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.3703703703703668E+02_r_def, &
  0.0000000000000000E+00_r_def, &
  0.1851851851851837E+02_r_def, &
  0.3333333333333312E+03_r_def, &
  0.0000000000000000E+00_r_def, &
  0.6666666666666615E+03_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.6666666666666614E+03_r_def, &
  0.0000000000000000E+00_r_def, &
  0.1333333333333321E+04_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.9259259259259201E+01_r_def, &
  0.0000000000000000E+00_r_def, &
  0.1851851851851837E+02_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.1851851851851837E+02_r_def, &
  0.0000000000000000E+00_r_def, &
  0.3703703703703668E+02_r_def  &
    ], shape(m1) )

 d10 = real(reshape( [ &
 -1, -1,  0,  0, -1,  0,  0,  0,  0,  0,  0,  0, &
  0,  1, -1,  0,  0, -1,  0,  0,  0,  0,  0,  0, &
  0,  0,  1,  1,  0,  0, -1,  0,  0,  0,  0,  0, &
  1,  0,  0, -1,  0,  0,  0, -1,  0,  0,  0,  0, &
  0,  0,  0,  0,  1,  0,  0,  0, -1, -1,  0,  0, &
  0,  0,  0,  0,  0,  1,  0,  0,  0,  1, -1,  0, &
  0,  0,  0,  0,  0,  0,  1,  0,  0,  0,  1,  1, &
  0,  0,  0,  0,  0,  0,  0,  1,  1,  0,  0, -1  &
 ], shape(d10) ),r_def)

  grad = matmul(m1,d10)

    return
  end subroutine grad_operator

end module compute_grad_operator_kernel_mod_test
