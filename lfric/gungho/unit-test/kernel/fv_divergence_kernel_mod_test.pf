!-----------------------------------------------------------------------------
! (C) Crown copyright 2017 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

!> Test the finite-volume divergence calculation in x or y-direction only.
!>
module fv_divergence_kernel_mod_test

    use constants_mod,                 only : i_def, r_def
    use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: fv_divergence_test_type
    private
    real(kind=r_def), allocatable :: mass_divergence(:)
    real(kind=r_def), allocatable :: cell_orientation(:)
    real(kind=r_def), allocatable :: mass_flux(:)

    integer(i_def), allocatable   :: map_w2(:)
    integer(i_def), allocatable   :: map_w3(:)

  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type fv_divergence_test_type

    integer(i_def), parameter :: nlayers = 1
    integer(i_def), parameter :: ndf_w2  = 6
    integer(i_def), parameter :: undf_w2 = ndf_w2
    integer(i_def), parameter :: ndf_w3  = 1
    integer(i_def), parameter :: undf_w3 = ndf_w3

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(fv_divergence_test_type), intent(inout) :: this
    integer(i_def) :: i

    allocate( this%cell_orientation(undf_w3) )
    allocate( this%mass_flux(undf_w2) )
    allocate( this%mass_divergence(undf_w3) )
    allocate( this%map_w2(ndf_w2))
    allocate( this%map_w3(ndf_w3))

    this%map_w2 = (/ (i, i=1,ndf_w2) /)
    this%map_w3 = 1

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(fv_divergence_test_type), intent(inout) :: this

    deallocate( this%cell_orientation )
    deallocate( this%mass_flux )
    deallocate( this%mass_divergence )
    deallocate( this%map_w2 )
    deallocate( this%map_w3 )

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @test
  subroutine test_all( this )

    use fv_divergence_kernel_mod, only : fv_divergence_code
    use flux_direction_mod,       only : x_direction, y_direction, z_direction
    use mesh_mod,                 only : mesh_type

    implicit none

    class(fv_divergence_test_type), intent(inout) :: this

    real(kind=r_def), parameter :: tol = 1.0e-6_r_def

    this%cell_orientation = 1.0_r_def
    this%mass_flux = (/ 3.0_r_def, 1.0_r_def, 10.0_r_def, 9.0_r_def, 2.0_r_def, 8.0_r_def /)
    ! The fluxes have the following setup for cell_orientation = 1:
    !          9.0
    !     3.0       10.0
    !          1.0
    ! Hence the x-direction divergence will be 7 and in the y-direction 8.
    call fv_divergence_code( nlayers,                     &
                             this%mass_divergence,        &
                             this%cell_orientation,       &
                             this%mass_flux,              &
                             x_direction,                 &
                             ndf_w3,                      &
                             undf_w3,                     &
                             this%map_w3,                 &
                             ndf_w2,                      &
                             undf_w2,                     &
                             this%map_w2 )
    @assertEqual(this%mass_divergence(1), 7.0_r_def, tol)

    call fv_divergence_code( nlayers,                     &
                             this%mass_divergence,        &
                             this%cell_orientation,       &
                             this%mass_flux,              &
                             y_direction,                 &
                             ndf_w3,                      &
                             undf_w3,                     &
                             this%map_w3,                 &
                             ndf_w2,                      &
                             undf_w2,                     &
                             this%map_w2 )
    @assertEqual(this%mass_divergence(1), 8.0_r_def, tol)

    call fv_divergence_code( nlayers,                     &
                             this%mass_divergence,        &
                             this%cell_orientation,       &
                             this%mass_flux,              &
                             z_direction,                 &
                             ndf_w3,                      &
                             undf_w3,                     &
                             this%map_w3,                 &
                             ndf_w2,                      &
                             undf_w2,                     &
                             this%map_w2 )
    @assertEqual(this%mass_divergence(1), 6.0_r_def, tol)

    this%cell_orientation = 2.0_r_def
    this%mass_flux = (/ 3.0_r_def, 1.0_r_def, 10.0_r_def, 9.0_r_def, 1.0_r_def, -3.0_r_def /)
    ! The fluxes have the following setup for cell_orientation = 1:
    !          3.0
    !     1.0       9.0
    !          10.0
    ! Hence the x-direction divergence will be 7 and in the y-direction 8.
    call fv_divergence_code( nlayers,                     &
                             this%mass_divergence,        &
                             this%cell_orientation,       &
                             this%mass_flux,              &
                             x_direction,                 &
                             ndf_w3,                      &
                             undf_w3,                     &
                             this%map_w3,                 &
                             ndf_w2,                      &
                             undf_w2,                     &
                             this%map_w2 )
    @assertEqual(this%mass_divergence(1), 8.0_r_def, tol)

    call fv_divergence_code( nlayers,                     &
                             this%mass_divergence,        &
                             this%cell_orientation,       &
                             this%mass_flux,              &
                             y_direction,                 &
                             ndf_w3,                      &
                             undf_w3,                     &
                             this%map_w3,                 &
                             ndf_w2,                      &
                             undf_w2,                     &
                             this%map_w2 )
    @assertEqual(this%mass_divergence(1), -7.0_r_def, tol)

    call fv_divergence_code( nlayers,                     &
                             this%mass_divergence,        &
                             this%cell_orientation,       &
                             this%mass_flux,              &
                             z_direction,                 &
                             ndf_w3,                      &
                             undf_w3,                     &
                             this%map_w3,                 &
                             ndf_w2,                      &
                             undf_w2,                     &
                             this%map_w2 )
    @assertEqual(this%mass_divergence(1), -4.0_r_def, tol)

    this%cell_orientation = 3.0_r_def
    this%mass_flux = (/ 3.0_r_def, 1.0_r_def, 10.0_r_def, 9.0_r_def, 12.0_r_def, 5.0_r_def /)
    ! The fluxes have the following setup for cell_orientation = 3:
    !          1.0
    !     10.0     3.0
    !          9.0
    ! Hence the x-direction divergence will be -7 and in the y-direction -8.
    call fv_divergence_code( nlayers,                     &
                             this%mass_divergence,        &
                             this%cell_orientation,       &
                             this%mass_flux,              &
                             x_direction,                 &
                             ndf_w3,                      &
                             undf_w3,                     &
                             this%map_w3,                 &
                             ndf_w2,                      &
                             undf_w2,                     &
                             this%map_w2 )
    @assertEqual(this%mass_divergence(1), -7.0_r_def, tol)

    call fv_divergence_code( nlayers,                     &
                             this%mass_divergence,        &
                             this%cell_orientation,       &
                             this%mass_flux,              &
                             y_direction,                 &
                             ndf_w3,                      &
                             undf_w3,                     &
                             this%map_w3,                 &
                             ndf_w2,                      &
                             undf_w2,                     &
                             this%map_w2 )
    @assertEqual(this%mass_divergence(1), -8.0_r_def, tol)

    call fv_divergence_code( nlayers,                     &
                             this%mass_divergence,        &
                             this%cell_orientation,       &
                             this%mass_flux,              &
                             z_direction,                 &
                             ndf_w3,                      &
                             undf_w3,                     &
                             this%map_w3,                 &
                             ndf_w2,                      &
                             undf_w2,                     &
                             this%map_w2 )
    @assertEqual(this%mass_divergence(1), -7.0_r_def, tol)

    this%cell_orientation = 4.0_r_def
    this%mass_flux = (/ 3.0_r_def, 1.0_r_def, 10.0_r_def, 9.0_r_def, -12.0_r_def, -5.0_r_def /)
    ! The fluxes have the following setup for cell_orientation = 4:
    !          10.0
    !     9.0       1.0
    !          3.0
    ! Hence the x-direction divergence will be -7 and in the y-direction -8.
    call fv_divergence_code( nlayers,                     &
                             this%mass_divergence,        &
                             this%cell_orientation,       &
                             this%mass_flux,              &
                             x_direction,                 &
                             ndf_w3,                      &
                             undf_w3,                     &
                             this%map_w3,                 &
                             ndf_w2,                      &
                             undf_w2,                     &
                             this%map_w2 )
    @assertEqual(this%mass_divergence(1), -8.0_r_def, tol)

    call fv_divergence_code( nlayers,                     &
                             this%mass_divergence,        &
                             this%cell_orientation,       &
                             this%mass_flux,              &
                             y_direction,                 &
                             ndf_w3,                      &
                             undf_w3,                     &
                             this%map_w3,                 &
                             ndf_w2,                      &
                             undf_w2,                     &
                             this%map_w2 )
    @assertEqual(this%mass_divergence(1), 7.0_r_def, tol)

    call fv_divergence_code( nlayers,                     &
                             this%mass_divergence,        &
                             this%cell_orientation,       &
                             this%mass_flux,              &
                             y_direction,                 &
                             ndf_w3,                      &
                             undf_w3,                     &
                             this%map_w3,                 &
                             ndf_w2,                      &
                             undf_w2,                     &
                             this%map_w2 )
    @assertEqual(this%mass_divergence(1), 7.0_r_def, tol)

  end subroutine test_all

end module fv_divergence_kernel_mod_test
