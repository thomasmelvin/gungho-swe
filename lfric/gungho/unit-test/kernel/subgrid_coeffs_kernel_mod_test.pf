!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the subgrid rho calculation
!>
module subgrid_coeffs_kernel_mod_test

  use constants_mod, only : i_def, i_native, r_def, str_long
  use pFUnit_Mod

  implicit none

  private
  public :: subgrid_coeffs_test_type, subgrid_coeffs_test_constructor, &
            getParameters, test_approximation, rho_parameter_type

  @testParameter
  type, extends(AbstractTestParameter) :: rho_parameter_type
    integer(i_native) :: rho_approximation
    real(r_def)       :: rho(5)
    real(r_def)       :: answer(1:3)
    real(r_def)       :: cell_orientation(5)
    integer(i_native) :: direction
  contains
    procedure toString
  end type rho_parameter_type

  @testCase(testParameters={getParameters()}, constructor=subgrid_coeffs_test_constructor)
  type, extends(ParameterizedTestCase) :: subgrid_coeffs_test_type
    private
    integer(i_native) :: rho_approximation
    real(r_def)       :: rho(5)
    real(r_def)       :: answer(1:3)
    real(r_def)       :: cell_orientation(5)
    integer(i_native) :: direction
  contains
    procedure test_approximation
  end type subgrid_coeffs_test_type

  integer(i_def), parameter :: rho_stencil_length = 5

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  function subgrid_coeffs_test_constructor( testParameter ) &
                                                  result( subgrid_coeffs_test )

    implicit none

    type(rho_parameter_type), intent(in) :: testParameter
    type(subgrid_coeffs_test_type)       :: subgrid_coeffs_test

    subgrid_coeffs_test%rho_approximation = testParameter%rho_approximation
    subgrid_coeffs_test%rho               = testParameter%rho
    subgrid_coeffs_test%answer            = testParameter%answer
    subgrid_coeffs_test%cell_orientation  = testParameter%cell_orientation
    subgrid_coeffs_test%direction         = testParameter%direction

  end function subgrid_coeffs_test_constructor

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  function toString( this ) result( string )
    use subgrid_config_mod, only : key_from_rho_approximation
    implicit none
    class(rho_parameter_type), intent( in ) :: this
    character(:), allocatable :: string

    character(str_long) :: buffer
    write( buffer, '(I0, A)') &
                         this%rho_approximation, &
                         key_from_rho_approximation(this%rho_approximation)
    string = trim( buffer )
  end function toString

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  function getParameters() result( parameters )

    use subgrid_config_mod, &
                       only : rho_approximation_constant_subgrid,     &
                              rho_approximation_ppm_no_limiter,       &
                              rho_approximation_ppm_positive_only,    &
                              rho_approximation_ppm_positive_monotone
    use flux_direction_mod, only : x_direction, y_direction

    implicit none

    type(rho_parameter_type) :: parameters(11)

    parameters &
     = [ rho_parameter_type( rho_approximation_constant_subgrid,              &
                 (/ 3.0_r_def, 2.0_r_def, 1.0_r_def, 4.0_r_def, 5.0_r_def /), &
                             (/ 3.0_r_def, 0.0_r_def, 0.0_r_def /),           &
                 (/ 1.0_r_def, 1.0_r_def, 1.0_r_def, 1.0_r_def, 1.0_r_def /), &
                                                                x_direction), &
         rho_parameter_type( rho_approximation_constant_subgrid,              &
                 (/ 3.0_r_def, 2.0_r_def, 1.0_r_def, 4.0_r_def, 5.0_r_def /), &
                             (/ 3.0_r_def, 0.0_r_def, 0.0_r_def /),           &
                 (/ 3.0_r_def, 3.0_r_def, 3.0_r_def, 3.0_r_def, 3.0_r_def /), &
                                                                y_direction), &
         rho_parameter_type( rho_approximation_ppm_no_limiter,                &
           (/ 10.0_r_def+5.0_r_def/6.0_r_def, 9.0_r_def+5.0_r_def/6.0_r_def,  &
              10.0_r_def+5.0_r_def/6.0_r_def, 13.0_r_def+5.0_r_def/6.0_r_def, &
              18.0_r_def+5.0_r_def/6.0_r_def /),                              &
                             (/ 10.0_r_def, 1.0_r_def, 1.0_r_def /),          &
                 (/ 1.0_r_def, 1.0_r_def, 1.0_r_def, 1.0_r_def, 1.0_r_def /), &
                                                                x_direction), &
         rho_parameter_type( rho_approximation_ppm_no_limiter,                &
           (/ 10.0_r_def+5.0_r_def/6.0_r_def, 9.0_r_def+5.0_r_def/6.0_r_def,  &
              10.0_r_def+5.0_r_def/6.0_r_def, 13.0_r_def+5.0_r_def/6.0_r_def, &
              18.0_r_def+5.0_r_def/6.0_r_def /),                              &
                             (/ 10.0_r_def, 1.0_r_def, 1.0_r_def /),          &
                 (/ 2.0_r_def, 2.0_r_def, 2.0_r_def, 2.0_r_def, 2.0_r_def /), &
                                                               x_direction ), &
         rho_parameter_type( rho_approximation_ppm_no_limiter,                &
           (/ 10.0_r_def+5.0_r_def/6.0_r_def, 13.0_r_def+5.0_r_def/6.0_r_def, &
               18.0_r_def+5.0_r_def/6.0_r_def, 9.0_r_def+5.0_r_def/6.0_r_def, &
              10.0_r_def+5.0_r_def/6.0_r_def /),                              &
                             (/ 10.0_r_def, 1.0_r_def, 1.0_r_def /),          &
                 (/ 3.0_r_def, 3.0_r_def, 3.0_r_def, 3.0_r_def, 3.0_r_def /), &
                                                               x_direction ), &
         rho_parameter_type( rho_approximation_ppm_no_limiter,                &
           (/ 10.0_r_def+5.0_r_def/6.0_r_def, 9.0_r_def+5.0_r_def/6.0_r_def,  &
              10.0_r_def+5.0_r_def/6.0_r_def, 13.0_r_def+5.0_r_def/6.0_r_def, &
              18.0_r_def+5.0_r_def/6.0_r_def /),                              &
                             (/ 10.0_r_def, 1.0_r_def, 1.0_r_def /),          &
                 (/ 4.0_r_def, 4.0_r_def, 4.0_r_def, 4.0_r_def, 4.0_r_def /), &
                                                               y_direction ), &
         rho_parameter_type( rho_approximation_ppm_no_limiter,                &
           (/ 10.0_r_def+5.0_r_def/6.0_r_def, 9.0_r_def+5.0_r_def/6.0_r_def,  &
              10.0_r_def+5.0_r_def/6.0_r_def, 13.0_r_def+5.0_r_def/6.0_r_def, &
              18.0_r_def+5.0_r_def/6.0_r_def /),                              &
                             (/ 10.0_r_def, 1.0_r_def, 1.0_r_def /),          &
                 (/ 4.0_r_def, 4.0_r_def, 4.0_r_def, 4.0_r_def, 4.0_r_def /), &
                                                               y_direction ), &
         rho_parameter_type( rho_approximation_ppm_no_limiter,                &
           (/ 10.0_r_def+5.0_r_def/6.0_r_def, 13.0_r_def+5.0_r_def/6.0_r_def, &
              18.0_r_def+5.0_r_def/6.0_r_def,  9.0_r_def+5.0_r_def/6.0_r_def, &
              10.0_r_def+5.0_r_def/6.0_r_def /),                              &
                             (/ 10.0_r_def, 1.0_r_def, 1.0_r_def /),          &
                 (/ 2.0_r_def, 2.0_r_def, 2.0_r_def, 2.0_r_def, 2.0_r_def /), &
                                                               y_direction ), &
         rho_parameter_type( rho_approximation_ppm_no_limiter,                &
           (/ 10.0_r_def+5.0_r_def/6.0_r_def, 9.0_r_def+5.0_r_def/6.0_r_def,  &
              10.0_r_def+5.0_r_def/6.0_r_def, 13.0_r_def+5.0_r_def/6.0_r_def, &
              18.0_r_def+5.0_r_def/6.0_r_def /),                              &
                             (/ 10.0_r_def, 1.0_r_def, 1.0_r_def /),          &
                 (/ 1.0_r_def, 1.0_r_def, 1.0_r_def, 1.0_r_def, 1.0_r_def /), &
                                                               y_direction ), &
         rho_parameter_type( rho_approximation_ppm_positive_only,             &
           (/ 1.0_r_def/30.0_r_def, 1.0_r_def/30.0_r_def,                     &
              2.0_r_def+1.0_r_def/30.0_r_def, 2.0_r_def+1.0_r_def/30.0_r_def, &
              6.0_r_def+1.0_r_def/30.0_r_def /),                              &
                             (/ 0.0_r_def, -1.2_r_def, 1.9_r_def /) ,         &
                 (/ 1.0_r_def, 1.0_r_def, 1.0_r_def, 1.0_r_def, 1.0_r_def /), &
                                                               x_direction ), &
         rho_parameter_type( rho_approximation_ppm_positive_monotone,         &
           (/ 1.0_r_def/30.0_r_def, 1.0_r_def/30.0_r_def,                     &
              2.0_r_def+1.0_r_def/30.0_r_def, 2.0_r_def+1.0_r_def/30.0_r_def, &
              6.0_r_def+1.0_r_def/30.0_r_def /),                              &
                             (/ 0.0_r_def, 0.0_r_def, 0.1_r_def /),           &
                 (/ 1.0_r_def, 1.0_r_def, 1.0_r_def, 1.0_r_def, 1.0_r_def /), &
                                                               x_direction )  ]

  end function getParameters

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @test
  subroutine test_approximation( this )

    use, intrinsic :: iso_fortran_env, only : real64
    use subgrid_coeffs_kernel_mod,     only : subgrid_coeffs_code
    use flux_direction_mod,            only : x_direction, y_direction

    implicit none

    class(subgrid_coeffs_test_type), intent(inout) :: this

    real(r_def),    parameter :: tol     = 1.0e-12_r_def   ! r_def 64bit
    integer(i_def), parameter :: nlayers = 1
    integer(i_def), parameter :: cell    = 1
    integer(i_def), parameter :: undf_w3 = 5
    integer(i_def), parameter :: ndf_w3  = 1
    integer(i_def), parameter :: stencil_map(1,1:5) = reshape( (/1, 2, 3, 4, 5/), &
                                                               (/1, 5/) )
    real(r_def) :: use_tol
    real(r_def) :: cell_orientation(1:undf_w3)

    real(kind=r_def) :: a0(1:5)
    real(kind=r_def) :: a1(1:5)
    real(kind=r_def) :: a2(1:5)
    real(kind=r_def) :: coeffs(1:3)

    call subgrid_coeffs_code( nlayers,                &
                              this%rho_approximation, &
                              undf_w3,                &
                              this%rho,               &
                              this%cell_orientation,  &
                              ndf_w3,                 &
                              rho_stencil_length,     &
                              stencil_map,            &
                              this%direction,         &
                              a0, a1, a2 )
    if ( r_def == real64 ) then
      use_tol = tol
    else
      use_tol = 10.0_r_def*spacing( maxval( (/ a0(1), a1(1), a2(1) /)) )
    endif
    @assertEqual( this%answer(1), a0(1), use_tol)
    @assertEqual( this%answer(2), a1(1), use_tol)
    @assertEqual( this%answer(3), a2(1), use_tol)


  end subroutine test_approximation

end module subgrid_coeffs_kernel_mod_test
