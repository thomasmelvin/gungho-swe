!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the curl operator computation
!>
module compute_curl_operator_kernel_mod_test

    use constants_mod,                       only : i_def, r_def
    use get_unit_test_m3x3_dofmap_mod,       only : get_w0_m3x3_dofmap, &
                                                    get_w3_m3x3_dofmap
    use get_unit_test_m3x3_q3x3x3_sizes_mod, only : get_w0_m3x3_q3x3x3_size, &
                                                    get_w1_m3x3_q3x3x3_size, &
                                                    get_w2_m3x3_q3x3x3_size, &
                                                    get_w3_m3x3_q3x3x3_size
    use get_unit_test_q3x3x3_basis_mod,      only : get_w0_q3x3x3_diff_basis, &
                                                    get_w1_q3x3x3_diff_basis, &
                                                    get_w0_q3x3x3_basis, &
                                                    get_w2_q3x3x3_basis
    use get_unit_test_q3x3x3_quadrature_mod, &
      only : get_gaussian_q3x3x3_quadrature_weights_xy, &
             get_gaussian_q3x3x3_quadrature_weights_z
    use get_unit_test_3x3x3_chi_mod,         only : get_w0_3x3x3_field
    use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: compute_curl_operator_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type compute_curl_operator_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use finite_element_config_mod, only : cellshape_quadrilateral, &
                                          coord_system_xyz
    use feign_config_mod,          only : feign_finite_element_config
    use mesh_mod,                  only : PLANE_BI_PERIODIC

    implicit none

    class(compute_curl_operator_test_type), intent(inout) :: this

    integer(i_def) :: nlayers, dim, diff_dim, dim_w2, diff_dim_w1
    integer(i_def) :: ndf_w0, ndf_w2, ndf_w1
    integer(i_def) :: nqp_h, nqp_v
    integer(i_def) :: i

    call feign_finite_element_config(           &
             cellshape=cellshape_quadrilateral, &
             coord_order=0_i_def,               &
             coord_system=coord_system_xyz,     &
             element_order=0_i_def,             &
             rehabilitate=.true.,               &
             vorticity_in_w1=.false. )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(compute_curl_operator_test_type), intent(inout) :: this

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use compute_curl_operator_kernel_mod, &
                                    only : compute_curl_operator_code
    use mesh_mod,                   only : mesh_type

    implicit none

    class(compute_curl_operator_test_type), intent(inout) :: this

    real(kind=r_def), parameter :: tol = 1.0e-6_r_def
    real(kind=r_def), parameter :: dx = 6000.0_r_def
    real(r_def), parameter      :: dy = 1000.0_r_def
    real(r_def), parameter      :: dz = 2000.0_r_def
    integer(i_def), parameter   :: nlayers = 3

    integer :: i, j, k, cell
    integer(i_def) :: err

    integer(i_def) :: ndf_w0, undf_w0, ndf_w1, ndf_w2, ndf_pid, undf_pid
    integer(i_def) :: ncells, ncell_3d, nqp_h, nqp_v
    integer(i_def) :: unused

    integer(i_def), allocatable :: map_w0(:,:)
    integer(i_def), allocatable :: map_pid(:,:)
    real(r_def), allocatable :: chi1(:), chi2(:), chi3(:), panel_id(:)
    real(r_def), allocatable :: basis_w0(:,:,:,:)
    real(r_def), allocatable :: diff_basis_w0(:,:,:,:)
    real(r_def), allocatable :: diff_basis_w1(:,:,:,:)
    real(r_def), allocatable :: basis_w2(:,:,:,:)
    real(r_def), allocatable :: wh(:), wv(:)
    real(r_def), allocatable :: local_stencil(:,:,:)

    real(kind=r_def), dimension(6,12) :: answer

    call get_w0_m3x3_q3x3x3_size( ndf_w0, undf_w0, ncells, &
                                  unused, unused, nqp_h, nqp_v, nlayers )
    call get_w0_q3x3x3_basis( basis_w0 )
    call get_w0_q3x3x3_diff_basis( diff_basis_w0 )
    call get_w0_m3x3_dofmap( map_w0 )
    call get_w1_m3x3_q3x3x3_size( ndf_w1, unused, unused, &
                                  unused, unused, unused, unused, nlayers )
    call get_w1_q3x3x3_diff_basis( diff_basis_w1 )
    call get_w2_m3x3_q3x3x3_size( ndf_w2, unused, unused, &
                                  unused, unused, unused, unused, nlayers )
    call get_w2_q3x3x3_basis( basis_w2 )
    call get_w3_m3x3_q3x3x3_size( ndf_pid, undf_pid, unused, &
                                  unused, unused, unused, unused, nlayers )
    call get_w3_m3x3_dofmap( map_pid, 1 )
    call get_gaussian_q3x3x3_quadrature_weights_xy( wh )
    call get_gaussian_q3x3x3_quadrature_weights_z( wv )

    ! Compute coordinates
    allocate(chi1(undf_w0))
    allocate(chi2(undf_w0))
    allocate(chi3(undf_w0))
    allocate(panel_id(ncells))

    panel_id(:) = 1_r_def

    call get_w0_3x3x3_field(chi1, chi2, chi3, dx, dy, dz, &
                            map_w0, nlayers)

    ! Test the operator kernel
    cell = 1
    ncell_3d = ncells * nlayers
    allocate( local_stencil(ndf_w2, ndf_w1, ncell_3d) )
    local_stencil(:,:,:) = 0.0_r_def
    call compute_curl_operator_code( cell,            &
                                     nlayers,         &
                                     ncell_3d,        &
                                     local_stencil,   &
                                     chi1,            &
                                     chi2,            &
                                     chi3,            &
                                     panel_id,        &
                                     ndf_w2,          &
                                     basis_w2,        &
                                     ndf_w1,          &
                                     diff_basis_w1,   &
                                     ndf_w0,          &
                                     undf_w0,         &
                                     map_w0(:, cell), &
                                     basis_w0,        &
                                     diff_basis_w0,   &
                                     ndf_pid,         &
                                     undf_pid,        &
                                     map_pid,         &
                                     nqp_h,           &
                                     nqp_v,           &
                                     wh,              &
                                     wv )

    call curl_operator(answer)
    ! Normalise by average edge length
    answer(:,:) = answer(:,:) * (dx + dy + dz ) / 3.0_r_def
    local_stencil(:, :, 1 ) =  local_stencil(:, :, 1 ) &
                                  * (dx + dy + dz ) / 3.0_r_def
    @assertEqual(answer, local_stencil(:, :, 1 ), tol)

    deallocate( local_stencil )
    deallocate( chi3, chi2, chi1, panel_id )
    deallocate( wv, wh )
    deallocate( basis_w2 )
    deallocate( diff_basis_w1 )
    deallocate( map_w0, basis_w0, diff_basis_w0 )
    deallocate( map_pid )

  end subroutine test_all

  subroutine curl_operator( curl )
    use constants_mod, only: r_def
    implicit none

    real(kind=r_def), dimension(6,12), intent(inout) :: curl
    real(kind=r_def), dimension(6,6) :: m2
    real(kind=r_def), dimension(6,12) :: d21

    m2 = reshape( [ &
  0.9999999999999905E-03_r_def, &
  0.0000000000000000E+00_r_def, &
  0.4999999999999963E-03_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.2777777777777752E-04_r_def, &
  0.0000000000000000E+00_r_def, &
  0.1388888888888879E-04_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.4999999999999963E-03_r_def, &
  0.0000000000000000E+00_r_def, &
  0.9999999999999907E-03_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.1388888888888879E-04_r_def, &
  0.0000000000000000E+00_r_def, &
  0.2777777777777752E-04_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.1111111111111101E-03_r_def, &
  0.5555555555555515E-04_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.0000000000000000E+00_r_def, &
  0.5555555555555515E-04_r_def, &
  0.1111111111111101E-03_r_def  &
    ], shape(m2) )

  d21 = real(reshape( [ &
   1,  0,  0,  0, -1,  0, &
   0,  1,  0,  0,  1,  0, &
   0,  0,  1,  0,  1,  0, &
   0,  0,  0,  1, -1,  0, &
  -1, -1,  0,  0,  0,  0, &
   0,  1, -1,  0,  0,  0, &
   0,  0,  1,  1,  0,  0, &
   1,  0,  0, -1,  0,  0, &
  -1,  0,  0,  0,  0, -1, &
   0, -1,  0,  0,  0,  1, &
   0,  0, -1,  0,  0,  1, &
   0,  0,  0, -1,  0, -1  &
 ], shape(d21) ),r_def)

  curl = matmul(m2,d21)

    return
  end subroutine curl_operator

end module compute_curl_operator_kernel_mod_test
