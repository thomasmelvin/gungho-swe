!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the boundary computation of RHS of potential temperature
!> (valid for lowest order quadrilateral elements)
module rtheta_bd_kernel_mod_test

  use constants_mod,                 only : i_def, r_def
  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public   :: rtheta_bd_test_type
    private
  contains
    procedure setup
    procedure tearDown
    procedure test_all
  end type rtheta_bd_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(rtheta_bd_test_type), intent(inout) :: this

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(rtheta_bd_test_type), intent(inout) :: this

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use, intrinsic :: iso_fortran_env, only : real64
    use rtheta_bd_kernel_mod,          only : rtheta_bd_code

    use get_unit_test_qfaces_mod, only: get_number_quadrature_points_per_face, &
                                        get_w2_qfaces_cube_h_basis,            &
                                        get_wtheta_qfaces_cube_h_basis,        &
                                        get_quadrature_faces_h_weights

    use get_unit_test_m3x3_q3x3x3_sizes_mod, only: get_w2_m3x3_q3x3x3_size,    &
                                                   get_wtheta_m3x3_q3x3x3_size
    use get_unit_test_m3x3_dofmap_mod, only: get_m3x3_stencil_dofmap_cross, &
                                             get_w2_m3x3_dofmap,            &
                                             get_wtheta_m3x3_dofmap
    use get_unit_test_planar_mesh_mod, only: get_m3x3_adjacent_face,          &
                                             get_normals_to_horizontal_faces, &
                                             get_outward_normals_to_horizontal_faces

    implicit none

    class(rtheta_bd_test_type), intent(inout) :: this

    real(r_def), parameter :: tol    = 1.0e-6_r_def   ! r_def 64bit
    real(r_def), parameter :: tol32  = 1.0e-2_r_def   ! r_def 32bit
    real(r_def), parameter :: answer = 1.0_r_def
    real(r_def)            :: use_tol

    ! Mesh and reference element information
    real(r_def), allocatable    :: normals_to_horizontal_faces(:,:)
    real(r_def), allocatable    :: outward_normals_to_horizontal_faces(:,:)
    integer(i_def), allocatable :: adjacent_face(:,:)

    ! Quadrature weights
    real(kind=r_def), allocatable :: wqp_f(:,:)

    ! Test field data
    real(r_def), allocatable :: theta_data(:)
    real(r_def), allocatable :: r_theta_bd_data(:)
    real(r_def), allocatable :: u_data(:)

    ! Basis functions
    real(r_def), allocatable :: basis_w2_face(:,:,:,:)
    real(r_def), allocatable :: basis_wtheta_face(:,:,:,:)

    ! Dofmaps
    integer(i_def), allocatable :: map_w2(:,:)
    integer(i_def), allocatable :: map_wtheta(:,:)

    ! Stencil information
    integer(i_def), allocatable :: cross_stencil_w2_map(:,:,:)
    integer(i_def), allocatable :: cross_stencil_wtheta_map(:,:,:)
    integer(i_def)              :: cross_stencil_w2_size
    integer(i_def)              :: cross_stencil_wtheta_size

    integer(i_def) :: cell

    integer(i_def) :: nfaces_qr, nfaces_re_h
    integer(i_def) :: nlayers, nqp_f
    integer(i_def) :: ndf_wtheta, undf_wtheta
    integer(i_def) :: ndf_w2, undf_w2

    ! Dummy variable for passing into multi-getter routines where item is not needed
    integer(i_def) :: unused

    ! Get canned data for a 3-layer mesh
    nlayers = 3

    ! Get sizes
    call get_w2_m3x3_q3x3x3_size( ndf_w2, undf_w2, unused, &
                                  unused, unused,          &
                                  unused, unused,          &
                                  nlayers )

    call get_wtheta_m3x3_q3x3x3_size( ndf_wtheta, undf_wtheta, unused, &
                                      unused, unused,                  &
                                      unused, unused,                  &
                                      nlayers )

    ! Get number of points and weights for quadrature points on
    ! horizontal faces
    call get_number_quadrature_points_per_face(nqp_f)
    call get_quadrature_faces_h_weights(wqp_f)
    ! Get number of faces in the quadrature rule from quadrature
    ! weights array
    nfaces_qr = size( wqp_f, 2 )

    ! Get basis functions on horizontal faces
    call get_w2_qfaces_cube_h_basis(basis_w2_face)
    call get_wtheta_qfaces_cube_h_basis(basis_wtheta_face)

    ! Get dofmaps
    call get_w2_m3x3_dofmap(map_w2)
    call get_wtheta_m3x3_dofmap(map_wtheta)

    ! The kernel uses cross stencils
    call get_m3x3_stencil_dofmap_cross(cross_stencil_w2_map, map_w2)
    call get_m3x3_stencil_dofmap_cross(cross_stencil_wtheta_map, map_wtheta)
    ! Canned field has extent of 1 which gives size 5
    cross_stencil_w2_size=5
    cross_stencil_wtheta_size=5

    ! Get canned adjacency information for the mesh
    call get_m3x3_adjacent_face(adjacent_face)
    ! Get canned information for the reference cube
    call get_normals_to_horizontal_faces(normals_to_horizontal_faces)
    call get_outward_normals_to_horizontal_faces(outward_normals_to_horizontal_faces)
    ! Get number of reference cube horizontal faces from the horizontal
    ! normals array
    nfaces_re_h = size( normals_to_horizontal_faces, 2 )

    ! Create the data arrays
    allocate(r_theta_bd_data(undf_wtheta))
    allocate(theta_data(undf_wtheta))
    allocate(u_data(undf_w2))

    ! Initialise the data
    r_theta_bd_data(:) = 1.0_r_def
    theta_data(:) = 3000.0_r_def
    u_data(:) = 20.0_r_def

    ! Compute cell 5 only
    cell = 5

    ! Call the kernel
    call rtheta_bd_code( nlayers,                             &
                         r_theta_bd_data,                     &
                         theta_data,                          &
                         cross_stencil_wtheta_size,           &
                         cross_stencil_wtheta_map(:,:,cell),  &
                         u_data,                              &
                         cross_stencil_w2_size,               &
                         cross_stencil_w2_map(:,:,cell),      &
                         ndf_wtheta, undf_wtheta,             &
                         map_wtheta(:,cell),                  &
                         basis_wtheta_face,                   &
                         ndf_w2, undf_w2, map_w2(:,cell),     &
                         basis_w2_face,                       &
                         nfaces_re_h,                         &
                         normals_to_horizontal_faces,         &
                         outward_normals_to_horizontal_faces, &
                         adjacent_face(:,cell),               &
                         nfaces_qr, nqp_f, wqp_f )

    ! Simple test, check that when theta=constant, the code inputs no increment
    if ( r_def == real64 ) then
      use_tol = tol
    else
      use_tol = tol32
    end if
    @assertEqual( answer, r_theta_bd_data(:), use_tol )

    deallocate(cross_stencil_w2_map)
    deallocate(cross_stencil_wtheta_map)
    deallocate(r_theta_bd_data)
    deallocate(theta_data)
    deallocate(u_data)
    deallocate(wqp_f)
    deallocate(map_w2)
    deallocate(map_wtheta)
    deallocate(basis_w2_face)
    deallocate(basis_wtheta_face)
    deallocate(adjacent_face)
    deallocate(outward_normals_to_horizontal_faces)
    deallocate(normals_to_horizontal_faces)

  end subroutine test_all

end module rtheta_bd_kernel_mod_test
