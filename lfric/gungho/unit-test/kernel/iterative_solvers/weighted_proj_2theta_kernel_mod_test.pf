!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the theta weighted divergence operator computation
!>
module weighted_proj_2theta_kernel_mod_test

  use constants_mod, only: i_def, r_def
  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: weighted_proj_2theta_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type weighted_proj_2theta_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(weighted_proj_2theta_test_type), intent(inout) :: this

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(weighted_proj_2theta_test_type), intent(inout) :: this

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @test
  subroutine test_all( this )

    use weighted_proj_2theta_kernel_mod, only : weighted_proj_2theta_code

    use get_unit_test_m3x3_dofmap_mod,       only: get_w3_m3x3_dofmap

    use get_unit_test_m3x3_q3x3x3_sizes_mod, only: get_w0_m3x3_q3x3x3_size, &
                                                   get_w2_m3x3_q3x3x3_size, &
                                                   get_w3_m3x3_q3x3x3_size

    use get_unit_test_q3x3x3_basis_mod, only: get_w0_q3x3x3_basis,      &
                                              get_w2_q3x3x3_basis,      &
                                              get_w3_q3x3x3_basis,      &
                                              get_w0_q3x3x3_diff_basis, &
                                              get_w2_q3x3x3_diff_basis

    use get_unit_test_q3x3x3_quadrature_mod, only:     &
            get_gaussian_q3x3x3_quadrature_weights_xy, &
            get_gaussian_q3x3x3_quadrature_weights_z

    implicit none

    class(weighted_proj_2theta_test_type), intent(inout) :: this

    real(kind=r_def), parameter :: tol = 1.0e-6_r_def

    integer :: cell

    real(kind=r_def), dimension(6,8) :: answer

    real(r_def), allocatable :: exner_data(:)
    real(r_def), allocatable :: local_stencil(:,:,:)

    integer(i_def) :: nlayers, ncells, ncells_3d
    integer(i_def) :: dim_space, dim_space_diff
    integer(i_def) :: ndf_w0, undf_w0
    integer(i_def) :: ndf_w2, undf_w2
    integer(i_def) :: ndf_w3, undf_w3
    integer(i_def) :: nqp_h, nqp_v

    integer(i_def), allocatable :: map_w3(:,:)

    real(r_def), allocatable :: wh(:)
    real(r_def), allocatable :: wv(:)
    real(r_def), allocatable :: basis_w0(:,:,:,:)
    real(r_def), allocatable :: basis_w2(:,:,:,:)
    real(r_def), allocatable :: basis_w3(:,:,:,:)
    real(r_def), allocatable :: diff_basis_w0(:,:,:,:)
    real(r_def), allocatable :: diff_basis_w2(:,:,:,:)

    !=====================================
    ! Get infrastructure support data
    !=====================================
    nlayers = 3

    ! Get sizes
    call get_w0_m3x3_q3x3x3_size( ndf_w0, undf_w0, ncells,   &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, nlayers )
    call get_w2_m3x3_q3x3x3_size( ndf_w2, undf_w2, ncells,   &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, nlayers )
    call get_w3_m3x3_q3x3x3_size( ndf_w3, undf_w3, ncells,   &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, nlayers )

    ! Get maps
    call get_w3_m3x3_dofmap( map_w3 )

    ! Get basis functions
    call get_w0_q3x3x3_basis( basis_w0 )
    call get_w2_q3x3x3_basis( basis_w2 )
    call get_w3_q3x3x3_basis( basis_w3 )

    call get_w0_q3x3x3_diff_basis( diff_basis_w0 )
    call get_w2_q3x3x3_diff_basis( diff_basis_w2 )

    ! Get weights
    call get_gaussian_q3x3x3_quadrature_weights_xy(wh)
    call get_gaussian_q3x3x3_quadrature_weights_z(wv)

    ncells_3d = nlayers * ncells

    !=====================================
    ! Assign data for testing
    !=====================================
    allocate(exner_data(undf_w3))
    exner_data = 1.0_r_def

    allocate( local_stencil(ndf_w2, ndf_w0, ncells_3d) )
    local_stencil(:,:,:) = 0.0_r_def

    !=====================================
    ! Apply test on interior cell 1
    !=====================================
    cell = 1
    call weighted_proj_2theta_code( cell,            &
                                    nlayers,         &
                                    ncells_3d,       &
                                    local_stencil,   &
                                    exner_data,      &
                                    1.0_r_def,       &
                                    ndf_w2,          &
                                    basis_w2,        &
                                    diff_basis_w2,   &
                                    ndf_w0,          &
                                    basis_w0,        &
                                    diff_basis_w0,   &
                                    ndf_w3,          &
                                    undf_w3,         &
                                    map_w3(:,cell),  &
                                    basis_w3,        &
                                    nqp_h,           &
                                    nqp_v,           &
                                    wh,              &
                                    wv               &
                                   )

    call proj_operator(answer)
    @assertEqual(answer, local_stencil(:, :, 1 ), tol)

    deallocate( exner_data )
    deallocate( local_stencil )

    deallocate( map_w3 )
    deallocate( wh )
    deallocate( wv )
    deallocate( basis_w0 )
    deallocate( basis_w2 )
    deallocate( basis_w3 )
    deallocate( diff_basis_w0 )
    deallocate( diff_basis_w2 )

  end subroutine test_all

  subroutine proj_operator( proj )

    use constants_mod, only: r_def

    implicit none

    real(kind=r_def), dimension(6,8), intent(inout) :: proj

    proj = 0.25_r_def*real(reshape( [             &
                          -1,  1,  0,  0, -1,  0, &
                           0,  1,  1,  0, -1,  0, &
                           0,  0,  1, -1, -1,  0, &
                          -1,  0,  0, -1, -1,  0, &
                          -1,  1,  0,  0,  0,  1, &
                           0,  1,  1,  0,  0,  1, &
                           0,  0,  1, -1,  0,  1, &
                          -1,  0,  0, -1,  0,  1  &
                          ], shape(proj) ),r_def)

    return
  end subroutine proj_operator

end module weighted_proj_2theta_kernel_mod_test
