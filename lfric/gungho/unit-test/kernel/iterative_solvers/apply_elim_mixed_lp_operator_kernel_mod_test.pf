!-----------------------------------------------------------------------------
! (C) Crown copyright 2021 Met Office. All rights reserved.
! For further details please refer to the file COPYRIGHT.txt
! which you should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test computation of the LHS of the equation of state:
!!        lhs_exner = m3exner*exner + Q32*u - p3theta*theta.
module apply_elim_mixed_lp_operator_kernel_mod_test

  use constants_mod, only : i_def, r_def
  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: apply_elim_mixed_lp_operator_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type apply_elim_mixed_lp_operator_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(apply_elim_mixed_lp_operator_test_type), intent(inout) :: this

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(apply_elim_mixed_lp_operator_test_type), intent(inout) :: this

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  @Test( )
  subroutine test_all( this )

    use apply_elim_mixed_lp_operator_kernel_mod, only : apply_elim_mixed_lp_operator_code

    implicit none

    class(apply_elim_mixed_lp_operator_test_type), intent(inout) :: this

    real(kind=r_def), parameter :: tol = 1.0e-12_r_def

    ! Mesh
    integer(kind=i_def), parameter :: nlayers = 1
    integer(kind=i_def), parameter :: cell = 1
    integer(kind=i_def), parameter :: ncell = 1

    ! Spaces
    integer(kind=i_def), parameter :: ndf_wt = 2
    integer(kind=i_def), parameter :: ndf_w3 = 1
    integer(kind=i_def), parameter :: ndf_w2 = 4
    integer(kind=i_def), parameter :: undf_wt = nlayers + 1
    integer(kind=i_def), parameter :: undf_w3 = ndf_w3*nlayers
    integer(kind=i_def), parameter :: undf_w2 = ndf_w2*nlayers

    ! Maps
    integer(kind=i_def), dimension(ndf_wt) :: map_wt
    integer(kind=i_def), dimension(ndf_w3) :: map_w3
    integer(kind=i_def), dimension(ndf_w2) :: map_w2

    ! Operators
    real(kind=r_def), dimension(ndf_w3, ndf_w3, ncell) :: m3exner
    real(kind=r_def), dimension(ndf_w3, ndf_wt, ncell) :: p3theta
    real(kind=r_def), dimension(ndf_w3, ndf_w2, ncell) :: q32

    ! Fields
    real(kind=r_def), dimension(undf_w3) :: lhs_exner, exner
    real(kind=r_def), dimension(undf_wt) :: theta
    real(kind=r_def), dimension(undf_w2) :: u

    integer(kind=i_def) :: df
    real(kind=r_def)    :: answer

    map_wt = (/ 1_i_def, 2_i_def /)
    map_w3 = (/ 1_i_def /)
    map_w2 = (/ 1_i_def, 2_i_def, 3_i_def, 4_i_def /)

    ! Set up operators
    m3exner(:,:,1) = 1.1_r_def

    p3theta(:,1,1) = 300.0_r_def
    p3theta(:,2,1) = 310.1_r_def

    q32(:,1,1) = 3.0_r_def
    q32(:,2,1) = 3.1_r_def
    q32(:,3,1) = 1.1_r_def
    q32(:,4,1) = 2.1_r_def

    ! Set up the fields
    theta = (/ 300.0_r_def, 310.0_r_def /)
    exner = (/ 1.2_r_def /)
    u = (/ 0.8_r_def, 0.1_r_def, -3.0_r_def, 2.5_r_def /)
    lhs_exner = 0.0_r_def

    ! Compute m3exner*exner - p3thetar*theta + q32*u
    call apply_elim_mixed_lp_operator_code(cell,                    &
                                           nlayers,                 &
                                           lhs_exner,               &
                                           theta, u, exner,         &
                                           ncell, m3exner,          &
                                           ncell, q32,              &
                                           ncell, p3theta,          &
                                           ndf_w3, undf_w3, map_w3, &
                                           ndf_wt, undf_wt, map_wt, &
                                           ndf_w2, undf_w2, map_w2)

    do df = 1, ndf_w3
      answer = m3exner(df,df,1)*exner(df)    &
             - sum(p3theta(df,:,1)*theta(:)) &
             + sum(q32(df,:,1)*u(:))
      @assertEqual(answer, lhs_exner(df), tol)
    end do

  end subroutine test_all

end module apply_elim_mixed_lp_operator_kernel_mod_test
