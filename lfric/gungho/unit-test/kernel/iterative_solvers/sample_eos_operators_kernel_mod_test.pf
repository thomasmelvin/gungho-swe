!-----------------------------------------------------------------------------
! Copyright (c) 2021,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the computation of the LHS operators of the EoS for nonlinear equations by sampling
!> at W3 DoFs
!>
module sample_eos_operators_kernel_mod_test

  use constants_mod,                 only : i_def, r_def
  use pFUnit_Mod

  implicit none

  private
  public :: sample_eos_operators_test_type, test_all

  @TestCase
  type, extends(TestCase) :: sample_eos_operators_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type sample_eos_operators_test_type

  real(r_def), parameter :: bvf_square = 0.0001_r_def
  real(r_def), parameter :: theta_surf = 300.0_r_def
  real(r_def), parameter :: pert_width_scaling = 1.0_r_def
  integer(i_def),                                                  &
               parameter :: profile_size       = 4
  real(r_def), parameter :: profile_data(4)    = (/ 280.0_r_def,   &
                                                    300.0_r_def,   &
                                                    305.0_r_def,   &
                                                    400.0_r_def /)
  real(r_def), parameter :: profile_heights(4) = (/ 500.0_r_def,   &
                                                    4.0e3_r_def,   &
                                                    4.0e3_r_def,   &
                                                    40.0e3_r_def /)

  real(r_def), parameter :: gravity  = 10.0_r_def
  real(r_def), parameter :: radius   = 6000000_r_def
  real(r_def), parameter :: omega    = 8.0E-5_r_def
  real(r_def), parameter :: p_zero   = 100000.0_r_def
  real(r_def), parameter :: rd       = 300.0_r_def
  real(r_def), parameter :: cp       = 1000.0_r_def
  real(r_def), parameter :: kappa    = rd/cp
  real(r_def), parameter :: scaling  = 1.0_r_def

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use base_mesh_config_mod,      only : geometry_planar,    &
                                          topology_fully_periodic
    use finite_element_config_mod, only : cellshape_quadrilateral
    use feign_config_mod,          only : feign_base_mesh_config,           &
                                          feign_initial_temperature_config, &
                                          feign_planet_config
    use mesh_mod,                  only : PLANE_BI_PERIODIC
    use initial_temperature_config_mod,                   &
                                   only : perturb_none

    implicit none

    class(sample_eos_operators_test_type), intent(inout) :: this

    call feign_base_mesh_config                     &
             ( filename='foo',                      &
               prime_mesh_name='unit_test',         &
               geometry=geometry_planar,            &
               offline_partitioning=.false.,        &
               topology=topology_fully_periodic,    &
               fplane=.false., f_lat_deg=0.0_r_def )

    call feign_initial_temperature_config( bvf_square=bvf_square, &
                                           theta_surf=theta_surf, &
                                           pert_width_scaling=pert_width_scaling, &
                                           perturb=perturb_none,                  &
                                           profile_size=profile_size,             &
                                           profile_data=profile_data,             &
                                           profile_heights=profile_heights )

    call feign_planet_config( gravity=gravity, radius=radius, omega=omega, &
                              rd=rd, cp=cp, p_zero=p_zero,                 &
                              scaling_factor=scaling )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use configuration_mod,        only: final_configuration

    implicit none

    class(sample_eos_operators_test_type), intent(inout) :: this

    call final_configuration()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @test
  subroutine test_all( this )

    use sample_eos_operators_kernel_mod, only : sample_eos_operators_code

    use get_unit_test_m3x3_q3x3x3_sizes_mod, only: get_w3_m3x3_q3x3x3_size,    &
                                                   get_wtheta_m3x3_q3x3x3_size

    use get_unit_test_m3x3_dofmap_mod, only: get_w3_m3x3_dofmap,     &
                                             get_wtheta_m3x3_dofmap

    use get_unit_test_q3x3x3_basis_mod, only: get_w3_q3x3x3_basis,     &
                                              get_wtheta_q3x3x3_basis

    use get_unit_test_w3nodal_basis_mod, only: get_wtheta_w3nodal_basis

    implicit none

    class(sample_eos_operators_test_type), intent(inout) :: this

    real(r_def), parameter :: tol = 1.0e-7_r_def
    real(r_def)            :: answer_exner, answer_rho, answer_theta

    ! Required for calling kernel
    real(r_def),allocatable :: exner_data(:)
    real(r_def),allocatable :: rho_data(:)
    real(r_def),allocatable :: theta_data(:)

    real(r_def), allocatable :: m3exner(:,:,:)
    real(r_def), allocatable :: m3rho(:,:,:)
    real(r_def), allocatable :: p3theta(:,:,:)

    integer(i_def)            :: nlayers, ncells, ncell_3d
    integer(i_def)            :: ndf_wtheta, ndf_w3
    integer(i_def)            :: undf_wtheta, undf_w3

    integer, allocatable    :: map_w3(:,:)
    integer, allocatable    :: map_wtheta(:,:)

    real(r_def), allocatable :: basis_w3(:,:,:,:)
    real(r_def), allocatable :: basis_wtheta(:,:,:)

    ! Dummy variable for passing into multi-getter routines where item is not needed
    integer(i_def) :: unused

    integer(i_def) :: k
    integer(i_def) :: cell

    ! Use a 3 layer mesh
    nlayers=3

    ! Get sizes
    call get_w3_m3x3_q3x3x3_size( ndf_w3, undf_w3, ncells, &
                                  unused, unused,          &
                                  unused, unused,          &
                                  nlayers )
    call get_wtheta_m3x3_q3x3x3_size( ndf_wtheta, undf_wtheta, ncells, &
                                      unused, unused,          &
                                      unused, unused,          &
                                      nlayers )
   ! Get basis functions
    call get_w3_q3x3x3_basis(basis_w3)
    call get_wtheta_w3nodal_basis(basis_wtheta)

    ! Get dofmaps
    call get_w3_m3x3_dofmap(map_w3)
    call get_wtheta_m3x3_dofmap(map_wtheta)

    ncell_3d = ncells*nlayers

    ! Create Operators
    allocate(m3exner(ndf_w3,ndf_w3,ncell_3d))
    allocate(m3rho(ndf_w3,ndf_w3,ncell_3d))
    allocate(p3theta(ndf_w3,ndf_wtheta,ncell_3d))

    ! Create the data arrays
    allocate(exner_data(undf_w3))
    allocate(theta_data(undf_wtheta))
    allocate(rho_data(undf_w3))

    cell = 1_i_def

    ! Initialise the data
    exner_data(:) = 1.0_r_def
    rho_data(:)   = 1.0_r_def
    theta_data(:) = 300.0_r_def
    m3exner(:,:,:) = 0.0_r_def
    m3rho(:,:,:) = 0.0_r_def
    p3theta(:,:,:) = 0.0_r_def


    call sample_eos_operators_code( cell,               &
                                    nlayers,            &
                                    ncell_3d, m3exner,  &
                                    ncell_3d, m3rho,    &
                                    ncell_3d, p3theta,  &
                                    exner_data,         &
                                    rho_data,           &
                                    theta_data,         &
                                    kappa,              &
                                    rd,                 &
                                    p_zero,             &
                                    ndf_w3,             &
                                    undf_w3,            &
                                    map_w3(:,cell),     &
                                    basis_w3,           &
                                    ndf_wtheta,         &
                                    undf_wtheta,        &
                                    map_wtheta(:,cell), &
                                    basis_wtheta        &
                                    )
    answer_exner = (1.0_r_def-kappa)/kappa*(p_zero/(rd*300_r_def))
    answer_rho = 1.0_r_def
    answer_theta = 0.5_r_def * 1.0_r_def/300_r_def
    k = 1

    @assertEqual(answer_exner, m3exner(map_w3(1,cell)+k, map_w3(1,cell)+k, k), tol)
    @assertEqual(answer_rho, m3rho(map_w3(1,cell)+k, map_w3(1,cell)+k, k), tol)
    @assertEqual(answer_theta, p3theta(map_wtheta(1,cell)+k, map_w3(1,cell)+k, k), tol)


    deallocate(m3exner)
    deallocate(m3rho)
    deallocate(p3theta)
    deallocate(rho_data)
    deallocate(exner_data)
    deallocate(theta_data)
    deallocate(map_w3)
    deallocate(map_wtheta)
    deallocate(basis_w3)
    deallocate(basis_wtheta)

  end subroutine test_all

end module sample_eos_operators_kernel_mod_test
