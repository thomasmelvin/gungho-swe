!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------
!
!-------------------------------------------------------------------------------
module matrix_invert_mod_test
  implicit none

contains

  @test
  subroutine test_of_matrix_invert()
    use pFUnit_Mod
    use, intrinsic :: iso_fortran_env, only: real64
    use matrix_invert_mod, only : matrix_invert
    use constants_mod,     only : r_def
    implicit none

    real(kind=r_def), parameter :: tol = 1.0e-14_r_def  ! r_def 64bit tolerance
    real(kind=r_def) :: a(4,4), a_inv(4,4), answer(4,4)
    real(kind=r_def) :: use_tol, one

    ! This uses 2D P1_DG mass matrix as an example
    a(1,:) = 1.0_r_def/9.0_r_def*(/ 4.0_r_def, 2.0_r_def, 2.0_r_def, 1.0_r_def /)
    a(2,:) = 1.0_r_def/9.0_r_def*(/ 2.0_r_def, 4.0_r_def, 1.0_r_def, 2.0_r_def /)
    a(3,:) = 1.0_r_def/9.0_r_def*(/ 2.0_r_def, 1.0_r_def, 4.0_r_def, 2.0_r_def /)
    a(4,:) = 1.0_r_def/9.0_r_def*(/ 1.0_r_def, 2.0_r_def, 2.0_r_def, 4.0_r_def /)

    call matrix_invert(a, a_inv,4)

    answer = matmul(a, a_inv)

    one = 1.0_r_def

    if ( r_def == real64 ) then
      use_tol = tol
    else
      use_tol = 10.0_r_def*spacing( maxval(answer) )
    endif
    @assertEqual( one, answer(1,1), use_tol )
    @assertEqual( one, answer(2,2), use_tol )
    @assertEqual( one, answer(3,3), use_tol )
    @assertEqual( one, answer(4,4), use_tol )

  end subroutine test_of_matrix_invert

end module matrix_invert_mod_test
