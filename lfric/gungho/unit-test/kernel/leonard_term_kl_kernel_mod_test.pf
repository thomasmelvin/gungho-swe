!-----------------------------------------------------------------------------
! (C) Crown copyright 2021 Met Office. All rights reserved.
! For further details please refer to the file COPYRIGHT.txt
! which you should have received as part of this distribution.
!-----------------------------------------------------------------------------

module leonard_term_kl_kernel_mod_test


  use constants_mod,                       only : i_def, r_def
  use get_unit_test_m3x3_q3x3x3_sizes_mod, only : get_w3_m3x3_q3x3x3_size, &
                                                  get_wtheta_m3x3_q3x3x3_size
  use get_unit_test_m3x3_dofmap_mod,       only : get_w3_m3x3_dofmap,      &
                                                  get_wtheta_m3x3_dofmap,  &
                                                  get_m3x3_stencil_dofmap_cross
  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: leonard_term_kl_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type leonard_term_kl_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use feign_config_mod,           only : feign_finite_element_config, &
                                           feign_mixing_config
    use finite_element_config_mod,  only : cellshape_quadrilateral, &
                                           coord_system_xyz
    use mixing_config_mod,          only : method_3d_smag

    implicit none

    class(leonard_term_kl_test_type), intent(inout) :: this

    call feign_mixing_config( viscosity     = .false.,       &
                              viscosity_mu  = 0.0_r_def,     &
                              smagorinsky   = .false.,       &
                              mix_factor    = 0.2_r_def,     &
                              method        = method_3d_smag,&
                              leonard_term  = .false.,       &
                              leonard_kl    = 4.0_r_def )

    call feign_finite_element_config(      &
        cellshape=cellshape_quadrilateral, &
        element_order=0_i_def,             &
        coord_order=0_i_def,               &
        coord_system=coord_system_xyz,     &
        rehabilitate=.true.,               &
        vorticity_in_w1=.false. )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use configuration_mod, only: final_configuration

    implicit none

    class(leonard_term_kl_test_type), intent(inout) :: this

    ! Finalise namelists
    call final_configuration()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use leonard_term_kl_kernel_mod, only : leonard_term_kl_code

    implicit none

    class(leonard_term_kl_test_type), intent(inout) :: this

    integer(i_def) :: nlayers, ncells
    integer(i_def) :: ndf_w3, undf_w3, ndf_wt, undf_wt
    integer(i_def) :: dim_space, dim_space_diff
    integer(i_def) :: nqp_h, nqp_v

    integer(i_def), allocatable :: map_w3(:,:)
    integer(i_def), allocatable :: map_wt(:,:)
    integer(i_def), allocatable :: stencil_map_wt(:,:,:)

    real(r_def), allocatable :: w(:)
    real(r_def), allocatable :: kl(:)
    real(r_def), allocatable :: height_wth(:)

    real(r_def), parameter :: leonard_kl = 4.0_r_def
    real(r_def), parameter :: dt = 100.0_r_def
    real(r_def), parameter :: tol = 1.0e-10_r_def
    real(r_def), parameter :: dz = 100.0_r_def
    real(r_def) :: answer

    integer(i_def) :: icell, i, j, k

    integer(i_def) :: cell


    ! Variables for testing leonard_term_kl
    ! Get sizes of everything
    nlayers=3
    call get_w3_m3x3_q3x3x3_size( ndf_w3, undf_w3, ncells, &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, &
                                  nlayers )
    call get_wtheta_m3x3_q3x3x3_size( ndf_wt, undf_wt, ncells, &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, &
                                  nlayers )
    ! Setup maps
    call get_w3_m3x3_dofmap(map_w3)
    call get_wtheta_m3x3_dofmap(map_wt)
    call get_m3x3_stencil_dofmap_cross(stencil_map_wt, map_wt)

    ! Compute coordinates
    allocate(height_wth(undf_wt))
    icell = 1
    do j = 1,3
      do i = 1,3
        do k = 0,3
          height_wth((icell-1)*4+k+1) = real(k)*dz
        end do
        icell = icell + 1
      end do
    end do

    ! Create the data
    cell = 5
    k = 1
    allocate(w(undf_wt))
    allocate(kl(undf_w3))
    w(:) = 1.0_r_def
    kl(:) = 0.0_r_def

    w(stencil_map_wt(1,1,cell-1)+k) = 3.0_r_def

    ! Call the kernel
    call leonard_term_kl_code( nlayers,                               &
                               kl,                                    &
                               w,                                     &
                               5, stencil_map_wt(:,:,cell),           &
                               height_wth,                            &
                               leonard_kl,                            &
                               dt,                                    &
                               ndf_w3, undf_w3, map_w3(:,cell),       &
                               ndf_wt, undf_wt, map_wt(:,cell)        &
                              )

     answer = 3.0_r_def
     @assertEqual(answer, kl(map_w3(1,cell) + k), tol)

     deallocate(map_w3)
     deallocate(map_wt)
     deallocate(stencil_map_wt)
     deallocate(height_wth)
     deallocate(w)
     deallocate(kl)

  end subroutine test_all

end module leonard_term_kl_kernel_mod_test
