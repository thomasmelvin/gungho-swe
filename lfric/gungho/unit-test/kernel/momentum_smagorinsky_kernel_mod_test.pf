!-----------------------------------------------------------------------------
! (C) Crown copyright 2019 Met Office. All rights reserved.
! For further details please refer to the file COPYRIGHT.txt
! which you should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the Smagorinsky diffusion calculation for the wind field
!>
module momentum_smagorinsky_kernel_mod_test

  use constants_mod,                 only : i_def, r_def
  use get_unit_test_m3x3_q3x3x3_sizes_mod, only : get_w2_m3x3_q3x3x3_size,     &
                                                  get_w1_m3x3_q3x3x3_size,     &
                                                  get_wtheta_m3x3_q3x3x3_size
  use get_unit_test_m3x3_dofmap_mod,       only : get_w2_m3x3_dofmap,          &
                                                  get_w1_m3x3_dofmap,          &
                                                  get_wtheta_m3x3_dofmap,      &
                                                  get_m3x3_stencil_dofmap_cross
  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: momentum_smagorinsky_test_type
    private

  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type momentum_smagorinsky_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use chi_transform_mod,         only : init_chi_transforms
    use feign_config_mod,          only : feign_finite_element_config, &
                                          feign_mixing_config
    use mixing_config_mod,         only : method_3d_smag
    use finite_element_config_mod, only : cellshape_quadrilateral, &
                                          coord_system_xyz

    implicit none

    class(momentum_smagorinsky_test_type), intent(inout) :: this

    call feign_mixing_config( viscosity     = .false.,       &
                              viscosity_mu  = 0.0_r_def,     &
                              smagorinsky   = .false.,       &
                              mix_factor    = 0.2_r_def,     &
                              method        = method_3d_smag,&
                              leonard_term  = .false.,       &
                              leonard_kl    = 1.0_r_def )

    call feign_finite_element_config(      &
        cellshape=cellshape_quadrilateral, &
        coord_order=0_i_def,               &
        coord_system=coord_system_xyz,     &
        element_order=0_i_def,             &
        rehabilitate=.true.,               &
        vorticity_in_w1=.false. )

    call init_chi_transforms()

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use chi_transform_mod,        only: final_chi_transforms
    use configuration_mod,        only: final_configuration

    implicit none

    class(momentum_smagorinsky_test_type), intent(inout) :: this

    ! Finalise namelists
    call final_chi_transforms()
    call final_configuration()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use momentum_smagorinsky_kernel_mod, only : momentum_smagorinsky_code

    implicit none

    class(momentum_smagorinsky_test_type), intent(inout) :: this

    integer(i_def) :: nlayers, ncells
    integer(i_def) :: ndf_w2, undf_w2, &
                      ndf_w1, undf_w1, ndf_wt, undf_wt
    integer(i_def) :: dim_space, dim_space_diff
    integer(i_def) :: nqp_h, nqp_v

    integer(i_def), allocatable :: map_w2(:,:)
    integer(i_def), allocatable :: map_w1(:,:)
    integer(i_def), allocatable :: map_wt(:,:)
    integer(i_def), allocatable :: stencil_map_w2(:,:,:)
    integer(i_def), allocatable :: stencil_map_w1(:,:,:)
    integer(i_def), allocatable :: stencil_map_wt(:,:,:)

    real(r_def), allocatable :: u(:), dx_at_w2(:)
    real(r_def), allocatable :: u_inc(:)
    real(r_def), allocatable :: height_w1(:)
    real(r_def), allocatable :: height_w2(:)
    real(r_def), allocatable :: visc_m(:)

    real(r_def), parameter :: tol = 1.0e-12_r_def
    real(r_def), parameter :: dx = 1000.0_r_def, &
                              dy = 1000.0_r_def, &
                              dz = 2000.0_r_def

    real(r_def) :: answer

    integer(i_def) :: icell, i, j, k, df
    integer(i_def) :: cell
    cell = 5

    ! Variables for testing momentum_smagorinsky
    ! Get sizes of everything
    nlayers=3
    call get_w2_m3x3_q3x3x3_size( ndf_w2, undf_w2, ncells,   &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v,              &
                                  nlayers )
    call get_w1_m3x3_q3x3x3_size( ndf_w1, undf_w1, ncells,   &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v,              &
                                  nlayers )
    call get_wtheta_m3x3_q3x3x3_size( ndf_wt, undf_wt, ncells,   &
                                      dim_space, dim_space_diff, &
                                      nqp_h, nqp_v,              &
                                      nlayers )

    ! Setup maps
    call get_w2_m3x3_dofmap(map_w2)
    call get_m3x3_stencil_dofmap_cross(stencil_map_w2, map_w2)
    call get_w1_m3x3_dofmap(map_w1)
    call get_m3x3_stencil_dofmap_cross(stencil_map_w1, map_w1)
    call get_wtheta_m3x3_dofmap(map_wt)
    call get_m3x3_stencil_dofmap_cross(stencil_map_wt, map_wt)

    ! Compute coordinates
    allocate(height_w1(undf_w1))
    allocate(height_w2(undf_w2))
    icell = 1
    do j = 1,3
      do i = 1,3
        do k = 0,3
          do df=1,4
            height_w1(map_w1(df,icell)+k) = real(k,r_def)*dz
          end do
        end do
        do k = 0,2
          do df=1,4
            height_w2(map_w2(df,icell)+k) = (real(k,r_def)+0.5_r_def)*dz
          end do
        end do
        icell = icell + 1
      end do
    end do

    ! Create the data
    allocate(u(undf_w2))
    allocate(dx_at_w2(undf_w2))
    allocate(u_inc(undf_w2))
    allocate(visc_m(undf_wt))
    u(:) = 1.0_r_def
    u_inc(:) = 0.0_r_def
    visc_m(:) = 1.0_r_def
    dx_at_w2(:) = dx

    ! Call the kernel
    call momentum_smagorinsky_code( nlayers,                          &
                                    u_inc,                            &
                                    u,                                &
                                    5, stencil_map_w2(:,:,cell),      &
                                    dx_at_w2,                         &
                                    5, stencil_map_w2(:,:,cell),      &
                                    height_w2,                        &
                                    height_w1,                        &
                                    visc_m,                           &
                                    5, stencil_map_wt(:,:,cell),      &
                                    ndf_w2, undf_w2, map_w2(:,cell),  &
                                    ndf_w1, undf_w1, map_w1(:,cell),  &
                                    ndf_wt, undf_wt, map_wt(:,cell)   &
                                   )

    answer = 0.0_r_def
    @assertEqual(answer, u_inc(map_wt(1,cell) ), tol)

    deallocate(map_w2)
    deallocate(stencil_map_w2)
    deallocate(map_w1)
    deallocate(stencil_map_w1)
    deallocate(map_wt)
    deallocate(stencil_map_wt)
    deallocate(u)
    deallocate(u_inc)
    deallocate(visc_m)
    deallocate(dx_at_w2)
    deallocate(height_w1)
    deallocate(height_w2)

  end subroutine test_all

end module momentum_smagorinsky_kernel_mod_test
