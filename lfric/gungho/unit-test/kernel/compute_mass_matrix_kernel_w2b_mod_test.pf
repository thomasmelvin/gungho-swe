!-----------------------------------------------------------------------------
! (C) Crown copyright 2018 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!> Test the W2broken mass matrix computation using w2 module
!>
module compute_mass_matrix_kernel_w2b_mod_test

  use constants_mod,                       only : i_def, r_def
  use get_unit_test_m3x3_q3x3x3_sizes_mod, only : get_w0_m3x3_q3x3x3_size,  &
                                                  get_w2broken_m3x3_q3x3x3_size, &
                                                  get_w3_m3x3_q3x3x3_size
  use get_unit_test_m3x3_dofmap_mod,       only : get_w0_m3x3_dofmap, &
                                                  get_w3_m3x3_dofmap
  use get_unit_test_q3x3x3_basis_mod,      only : get_w0_q3x3x3_diff_basis, &
                                                  get_w0_q3x3x3_basis, &
                                                  get_w2broken_q3x3x3_basis
  use get_unit_test_q3x3x3_quadrature_mod, only : get_gaussian_q3x3x3_quadrature_weights_xy, &
                                                  get_gaussian_q3x3x3_quadrature_weights_z
  use get_unit_test_3x3x3_chi_mod,         only : get_w0_3x3x3_field
  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: compute_mass_matrix_w2b_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type compute_mass_matrix_w2b_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use finite_element_config_mod, only : cellshape_quadrilateral, &
                                          coord_system_xyz
    use feign_config_mod,          only : feign_finite_element_config

    implicit none

    class(compute_mass_matrix_w2b_test_type), intent(inout) :: this

    call feign_finite_element_config(           &
             cellshape=cellshape_quadrilateral, &
             coord_order=0_i_def,               &
             coord_system=coord_system_xyz,     &
             element_order=0_i_def,             &
             rehabilitate=.true.,               &
             vorticity_in_w1=.false. )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use configuration_mod,        only: final_configuration

    implicit none

    class(compute_mass_matrix_w2b_test_type), intent(inout) :: this

    call final_configuration()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  @Test
  subroutine test_all( this )

    use compute_mass_matrix_kernel_w2_mod, only : compute_mass_matrix_w2_code

    implicit none

    class(compute_mass_matrix_w2b_test_type), intent(inout) :: this

    real(kind=r_def) :: answer(6,6)
    real(r_def), parameter :: tol = 1.0e-6_r_def
    real(r_def), parameter :: dx = 6000.0_r_def, &
                              dy = 1000.0_r_def, &
                              dz = 2000.0_r_def

    integer(i_def) :: nlayers, ncells, ncell_3d, cell, icell
    integer(i_def) :: ndf_w0, undf_w0, ndf_w2broken, undf_w2broken, ndf_w3, undf_w3
    integer(i_def) :: dim_space, dim_space_diff
    integer(i_def) :: nqp_h, nqp_v

    integer(i_def) :: i, j, k

    integer(i_def), allocatable :: map_w0(:,:), map_w3(:,:)
    real(r_def), allocatable :: diff_basis_w0(:,:,:,:), &
                                basis_w2broken(:,:,:,:), &
                                basis_w0(:,:,:,:)
    real(r_def), allocatable :: wh(:), wv(:)
    real(r_def), allocatable :: chi1(:), chi2(:), chi3(:), panel_id(:)
    real(r_def), allocatable :: local_stencil(:,:,:)

    nlayers = 3
    call get_w0_m3x3_q3x3x3_size( ndf_w0, undf_w0, ncells, &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, &
                                  nlayers )
    call get_w3_m3x3_q3x3x3_size( ndf_w3, undf_w3, ncells, &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, &
                                  nlayers )
    call get_w2broken_m3x3_q3x3x3_size( ndf_w2broken, undf_w2broken, ncells, &
                                        dim_space, dim_space_diff, &
                                        nqp_h, nqp_v, &
                                        nlayers )
    call get_w0_m3x3_dofmap(map_w0)
    call get_w3_m3x3_dofmap(map_w3)
    call get_w0_q3x3x3_basis(basis_w0)
    call get_w0_q3x3x3_diff_basis(diff_basis_w0)
    call get_w2broken_q3x3x3_basis(basis_w2broken)
    call get_gaussian_q3x3x3_quadrature_weights_xy(wh)
    call get_gaussian_q3x3x3_quadrature_weights_z(wv)

    ! Compute coordinates
    allocate(chi1(undf_w0))
    allocate(chi2(undf_w0))
    allocate(chi3(undf_w0))
    allocate(panel_id(undf_w3))

    panel_id(:) = 1.0_r_def

    call get_w0_3x3x3_field(chi1, chi2, chi3, dx, dy, dz, &
                            map_w0, nlayers)

    ncell_3d = ncells*nlayers

    allocate(local_stencil(ndf_w2broken, ndf_w2broken, ncell_3d))
    local_stencil(:,:,:) = 0.0_r_def

    cell = 1
    call compute_mass_matrix_w2_code(  cell,                     &
                                       nlayers,                  &
                                       ncell_3d,                 &
                                       local_stencil,            &
                                       chi1,                     &
                                       chi2,                     &
                                       chi3,                     &
                                       panel_id,                 &
                                       ndf_w2broken,             &
                                       basis_w2broken,           &
                                       ndf_w0,                   &
                                       undf_w0,                  &
                                       map_w0(:,cell),           &
                                       basis_w0,                 &
                                       diff_basis_w0,            &
                                       ndf_w3,                   &
                                       undf_w3,                  &
                                       map_w3,                   &
                                       nqp_h,                    &
                                       nqp_v,                    &
                                       wh,                       &
                                       wv                        &
                                     )

    call mass_matrix_w2b(answer)
    ! Normalise by 1/average edge length
    answer(:,:) = answer(:,:) * ( dx + dy + dz ) / 3.0_r_def
    local_stencil(:, :, 1 ) = local_stencil(:, :, 1 ) &
                                * ( dx + dy + dz ) / 3.0_r_def

    ! Locally, the operator is identical to the conforming W2 mass
    @assertEqual(answer, local_stencil(:, :, 1), tol)

    deallocate(map_w0)
    deallocate(map_w3)
    deallocate(diff_basis_w0)
    deallocate(basis_w2broken)
    deallocate(wh)
    deallocate(wv)
    deallocate(chi1)
    deallocate(chi2)
    deallocate(chi3)
    deallocate(panel_id)
    deallocate(basis_w0)
    deallocate(local_stencil)

  end subroutine test_all

  subroutine mass_matrix_w2b( mm )

    implicit none

    real(kind=r_def), dimension(6,6), intent(inout) :: mm
    mm = reshape( [ &
      0.9999999999999905E-03_r_def, &
      0.0000000000000000E+00_r_def, &
      0.4999999999999963E-03_r_def, &
      0.0000000000000000E+00_r_def, &
      0.0000000000000000E+00_r_def, &
      0.0000000000000000E+00_r_def, &
      0.0000000000000000E+00_r_def, &
      0.2777777777777752E-04_r_def, &
      0.0000000000000000E+00_r_def, &
      0.1388888888888879E-04_r_def, &
      0.0000000000000000E+00_r_def, &
      0.0000000000000000E+00_r_def, &
      0.4999999999999963E-03_r_def, &
      0.0000000000000000E+00_r_def, &
      0.9999999999999907E-03_r_def, &
      0.0000000000000000E+00_r_def, &
      0.0000000000000000E+00_r_def, &
      0.0000000000000000E+00_r_def, &
      0.0000000000000000E+00_r_def, &
      0.1388888888888879E-04_r_def, &
      0.0000000000000000E+00_r_def, &
      0.2777777777777752E-04_r_def, &
      0.0000000000000000E+00_r_def, &
      0.0000000000000000E+00_r_def, &
      0.0000000000000000E+00_r_def, &
      0.0000000000000000E+00_r_def, &
      0.0000000000000000E+00_r_def, &
      0.0000000000000000E+00_r_def, &
      0.1111111111111101E-03_r_def, &
      0.5555555555555515E-04_r_def, &
      0.0000000000000000E+00_r_def, &
      0.0000000000000000E+00_r_def, &
      0.0000000000000000E+00_r_def, &
      0.0000000000000000E+00_r_def, &
      0.5555555555555515E-04_r_def, &
      0.1111111111111101E-03_r_def  &
      ], shape(mm) )

    return

  end subroutine mass_matrix_w2b

end module compute_mass_matrix_kernel_w2b_mod_test
