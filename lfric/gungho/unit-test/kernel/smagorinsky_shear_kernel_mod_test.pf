!-----------------------------------------------------------------------------
! (C) Crown copyright 2018 Met Office. All rights reserved.
! For further details please refer to the file COPYRIGHT.txt
! which you should have received as part of this distribution.
!-----------------------------------------------------------------------------

module smagorinsky_shear_kernel_mod_test


  use constants_mod,                       only : i_def, r_def
  use get_unit_test_m3x3_q3x3x3_sizes_mod, only : get_w2_m3x3_q3x3x3_size, &
                                                  get_w3_m3x3_q3x3x3_size, &
                                                  get_wtheta_m3x3_q3x3x3_size
  use get_unit_test_m3x3_dofmap_mod,       only : get_w2_m3x3_dofmap,      &
                                                  get_w3_m3x3_dofmap,      &
                                                  get_wtheta_m3x3_dofmap,  &
                                                  get_m3x3_stencil_dofmap_cross
  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: smagorinsky_shear_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type smagorinsky_shear_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use chi_transform_mod,          only : init_chi_transforms
    use feign_config_mod,           only : feign_finite_element_config
    use finite_element_config_mod,  only : cellshape_quadrilateral, &
                                           coord_system_xyz

    implicit none

    class(smagorinsky_shear_test_type), intent(inout) :: this

    call feign_finite_element_config(      &
        cellshape=cellshape_quadrilateral, &
        element_order=0_i_def,             &
        coord_order=0_i_def,               &
        coord_system=coord_system_xyz,     &
        rehabilitate=.true.,               &
        vorticity_in_w1=.false. )

    call init_chi_transforms()

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use chi_transform_mod, only: final_chi_transforms
    use configuration_mod, only: final_configuration

    implicit none

    class(smagorinsky_shear_test_type), intent(inout) :: this

    ! Finalise namelists
    call final_chi_transforms()
    call final_configuration()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use smagorinsky_shear_kernel_mod, only : smagorinsky_shear_code

    implicit none

    class(smagorinsky_shear_test_type), intent(inout) :: this

    integer(i_def) :: nlayers, ncells
    integer(i_def) :: ndf_w2, undf_w2, &
                      ndf_w3, undf_w3, ndf_wt, undf_wt
    integer(i_def) :: dim_space, dim_space_diff
    integer(i_def) :: nqp_h, nqp_v

    integer(i_def), allocatable :: map_w2(:,:)
    integer(i_def), allocatable :: map_w3(:,:)
    integer(i_def), allocatable :: map_wt(:,:)
    integer(i_def), allocatable :: stencil_map_w2(:,:,:)
    integer(i_def), allocatable :: stencil_map_w3(:,:,:)
    integer(i_def), allocatable :: stencil_map_wt(:,:,:)

    real(r_def), allocatable :: u(:), dx_at_w2(:)
    real(r_def), allocatable :: shear(:)
    real(r_def), allocatable :: height_wth(:)
    real(r_def), allocatable :: height_w3(:)

    real(r_def), parameter :: tol = 1.0e-10_r_def
    real(r_def), parameter :: dx = 1000.0_r_def, &
                              dy = 1000.0_r_def, &
                              dz = 2000.0_r_def
    real(r_def) :: answer

    integer(i_def) :: icell, i, j, k

    integer(i_def) :: cell


    ! Variables for testing smagorinsky_shear
    ! Get sizes of everything
    nlayers=3
    call get_w2_m3x3_q3x3x3_size( ndf_w2, undf_w2, ncells, &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, &
                                  nlayers )
    call get_w3_m3x3_q3x3x3_size( ndf_w3, undf_w3, ncells, &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, &
                                  nlayers )
    call get_wtheta_m3x3_q3x3x3_size( ndf_wt, undf_wt, ncells, &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, &
                                  nlayers )
    ! Setup maps
    call get_w2_m3x3_dofmap(map_w2)
    call get_m3x3_stencil_dofmap_cross(stencil_map_w2, map_w2)
    call get_w3_m3x3_dofmap(map_w3)
    call get_m3x3_stencil_dofmap_cross(stencil_map_w3, map_w3)
    call get_wtheta_m3x3_dofmap(map_wt)
    call get_m3x3_stencil_dofmap_cross(stencil_map_wt, map_wt)

    ! Compute coordinates
    allocate(height_wth(undf_wt))
    allocate(height_w3(undf_w3))
    icell = 1
    do j = 1,3
      do i = 1,3
        do k = 0,3
           height_wth((icell-1)*4+k+1) = real(k)*dz
        end do
        do k = 0,2
          height_w3((icell-1)*3+k+1) = (real(k)+0.5_r_def)*dz
        end do
        icell = icell + 1
      end do
    end do

    ! Create the data
    cell = 5
    allocate(u(undf_w2))
    allocate(dx_at_w2(undf_w2))
    allocate(shear(undf_wt))
    u(:) = 1.0_r_def
    dx_at_w2(:) = dx
    shear(:) = 0.0_r_def

    u(stencil_map_w2(5,1,cell)+0) = 0.0_r_def
    u(stencil_map_w2(5,1,cell)+1) = 1.0_r_def
    u(stencil_map_w2(5,1,cell)+2) = 2.0_r_def
    u(stencil_map_w2(5,1,cell)+3) = 3.0_r_def

    ! Call the kernel
    call smagorinsky_shear_code( nlayers,                               &
                                 shear,                                 &
                                 u,                                     &
                                 5, stencil_map_w2(:,:,cell),           &
                                 dx_at_w2,                              &
                                 height_wth,                            &
                                 height_w3,                             &
                                 ndf_wt, undf_wt, map_wt(:,cell),       &
                                 ndf_w2, undf_w2, map_w2(:,cell),       &
                                 ndf_w3, undf_w3, map_w3(:,cell)        &
                               )

     answer = 0.7071067811e-3_r_def
     k = 1
     @assertEqual(answer, shear(map_wt(1,cell) + k), tol)

     deallocate(map_w2)
     deallocate(stencil_map_w2)
     deallocate(map_w3)
     deallocate(stencil_map_w3)
     deallocate(map_wt)
     deallocate(stencil_map_wt)
     deallocate(height_wth)
     deallocate(height_w3)
     deallocate(u)
     deallocate(dx_at_w2)
     deallocate(shear)

  end subroutine test_all

end module smagorinsky_shear_kernel_mod_test
