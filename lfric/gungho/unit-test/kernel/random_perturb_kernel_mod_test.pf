!-----------------------------------------------------------------------------
! Copyright (c) 2022,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the pressure gradient computation
!>
module random_perturb_kernel_mod_test

  use constants_mod, only: i_def, r_def
  use pFUnit_Mod

  implicit none

  private
  public :: random_perturb_test_type, test_all

  @TestCase
  type, extends(TestCase) :: random_perturb_test_type
    private
    integer(i_def), allocatable :: map_wtheta(:)
    real(r_def), allocatable    :: theta(:)
    real(r_def), allocatable    :: height_wt(:)
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type random_perturb_test_type

  integer(i_def), parameter :: nlayers = 20
  integer(i_def), parameter :: ndf_wtheta = 1
  integer(i_def), parameter :: undf_wtheta = nlayers * ndf_wtheta

  real(r_def),    parameter :: dz = 400.0_r_def

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(random_perturb_test_type), intent(inout) :: this

    integer(i_def) :: i

    allocate(this%map_wtheta(ndf_wtheta))
    allocate(this%theta(undf_wtheta))
    allocate(this%height_wt(undf_wtheta))

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(random_perturb_test_type), intent(inout) :: this

    deallocate(this%map_wtheta)
    deallocate(this%theta)
    deallocate(this%height_wt)

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @test
  subroutine test_all( this )

    use random_perturb_kernel_mod, only : random_perturb_code

    implicit none

    class(random_perturb_test_type), intent(inout) :: this

    integer(i_def)         :: k

    real(r_def), parameter :: theta_pert_start = 5.0e3_r_def ! Height (m) at which perturbations start
    real(r_def), parameter :: theta_pert_end   = 7.0e3_r_def ! Height (m) at which perturbations end
    real(r_def), parameter :: theta_pert_size  = 0.5_r_def   ! Max size of perturbations (K)
    real(r_def), parameter :: theta_background = 300.0_r_def

    ! Single column with nlayers
    this%map_wtheta = (/ 1_i_def /)

    ! Create the data
    do k = 0, nlayers - 1
      this%height_wt(1 + k) = k * dz
    end do

    this%theta(:) = theta_background

    ! Test kernel
    call random_perturb_code(nlayers,                 &
                             this%theta,              &
                             this%height_wt,          &
                             ndf_wtheta, undf_wtheta, &
                             this%map_wtheta )

    ! Check that perturbation is of correct magnitude between specified heights
    do k = 1, nlayers - 1
      if ( this%height_wt(1 + k) <= theta_pert_end .and.    &
           this%height_wt(1 + k) >= theta_pert_start ) then
        @assertLessThanOrEqual(abs(this%theta(1 + k) - theta_background), theta_pert_size)
      else
        @assertEqual(this%theta(1 + k), theta_background)
      end if
    end do

  end subroutine test_all

end module random_perturb_kernel_mod_test
