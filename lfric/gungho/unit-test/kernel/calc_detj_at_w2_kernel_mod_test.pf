!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the gradient operator computation
!>
module calc_detj_at_w2_kernel_mod_test

    use constants_mod,                 only : i_def, r_def
    use pFUnit_Mod

    use get_unit_test_m3x3_q3x3x3_sizes_mod, only : get_w0_m3x3_q3x3x3_size, &
                                                    get_w2_m3x3_q3x3x3_size, &
                                                    get_w3_m3x3_q3x3x3_size

    use get_unit_test_m3x3_dofmap_mod,       only : get_w0_m3x3_dofmap, &
                                                    get_w2_m3x3_dofmap, &
                                                    get_w3_m3x3_dofmap

    use get_unit_test_q3x3x3_basis_mod, only: get_w0_q3x3x3_diff_basis, &
                                              get_w0_q3x3x3_basis

    use get_unit_test_3x3x3_chi_mod,    only : get_w0_3x3x3_field

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: calc_detj_at_w2_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type calc_detj_at_w2_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use finite_element_config_mod, only : cellshape_quadrilateral, &
                                          coord_system_xyz
    use formulation_config_mod,    only : eos_method_sampled,      &
                                          moisture_formulation_dry
    use feign_config_mod,          only : feign_finite_element_config, &
                                          feign_formulation_config

    implicit none

    class(calc_detj_at_w2_test_type), intent(inout) :: this

    call feign_finite_element_config(           &
             cellshape=cellshape_quadrilateral, &
             coord_order=0_i_def,               &
             coord_system=coord_system_xyz,     &
             element_order=0_i_def,             &
             rehabilitate=.true.,               &
             vorticity_in_w1=.false. )

    call feign_formulation_config( dlayer_on=.false.,               &
                                   dry_static_adjust=.false.,       &
                                   exner_from_eos=.false.,          &
                                   eos_method=eos_method_sampled,   &
                                   init_exner_bt=.false.,           &
                                   l_multigrid=.false.,             &
                                   rotating=.true.,                 &
                                   shallow=.false.,                 &
                                   moisture_formulation =           &
                                   moisture_formulation_dry,        &
                                   use_physics=.false.,             &
                                   use_wavedynamics=.false.,        &
                                   use_multires_coupling=.false.,   &
                                   si_momentum_equation=.true.,     &
                                   vector_invariant=.false. )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(calc_detj_at_w2_test_type), intent(inout) :: this

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use, intrinsic :: iso_fortran_env, only: real64
    use calc_detj_at_w2_kernel_mod,    only: calc_detj_at_w2_code

    implicit none

    class(calc_detj_at_w2_test_type), intent(inout) :: this

    real(kind=r_def), parameter :: tol = 1.0e-6_r_def
    real(kind=r_def), parameter :: dx = 11.0_r_def
    real(kind=r_def), parameter :: dy = 17.0_r_def
    real(kind=r_def), parameter :: dz = 23.0_r_def
    real(kind=r_def)            :: use_tol

    ! Fields
    real(r_def), allocatable :: detj_w2_p(:)
    real(r_def), allocatable :: chi1(:), chi2(:), chi3(:), panel_id(:)

    integer(kind=i_def) :: i, j, k, cell

    ! Dofmaps
    integer(i_def), allocatable :: map_w0(:,:)
    integer(i_def), allocatable :: map_w2(:,:)
    integer(i_def), allocatable :: map_pid(:,:)

    ! Basis functions
    real(r_def),    allocatable :: diff_basis_w0(:,:,:,:)
    real(r_def),    allocatable :: basis_w0(:,:,:,:)

    ! Sizes
    integer(kind=i_def) :: nlayers, ncells
    integer(kind=i_def) :: ndf_w0, undf_w0, ndf_w2, undf_w2, ndf_pid, undf_pid
    integer(kind=i_def) :: nqp_h, nqp_v
    integer(kind=i_def) :: dim_space, dim_space_diff

    nlayers = 3
    call get_w0_m3x3_q3x3x3_size( ndf_w0, undf_w0, ncells,   &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v,              &
                                  nlayers )
    call get_w2_m3x3_q3x3x3_size( ndf_w2, undf_w2, ncells,   &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v,              &
                                  nlayers )
    call get_w3_m3x3_q3x3x3_size( ndf_pid, undf_pid, ncells, &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, 1)

    call get_w0_m3x3_dofmap(map_w0)
    call get_w2_m3x3_dofmap(map_w2)
    call get_w3_m3x3_dofmap(map_pid)

    call get_w0_q3x3x3_diff_basis(diff_basis_w0)
    call get_w0_q3x3x3_basis(basis_w0)

    allocate(detj_w2_p(undf_w2))

    ! Compute coordinates
    allocate(chi1(undf_w0))
    allocate(chi2(undf_w0))
    allocate(chi3(undf_w0))
    allocate(panel_id(undf_pid))

    call get_w0_3x3x3_field(chi1, chi2, chi3, dx, dy, dz, &
                            map_w0,nlayers)
    panel_id(:) = 1_r_def

    ! Initialise the data
    detj_w2_p(:) = 0.0_r_def

    cell = 1

    call calc_detj_at_w2_code( nlayers,          &
                               detj_w2_p,        &
                               chi1,             &
                               chi2,             &
                               chi3,             &
                               panel_id,         &
                               ndf_w2,           &
                               undf_w2,          &
                               map_w2(:,cell),   &
                               ndf_w0,           &
                               undf_w0,          &
                               map_w0(:,cell),   &
                               basis_w0,         &
                               diff_basis_w0,    &
                               ndf_pid,          &
                               undf_pid,         &
                               map_pid           &
                               )

    ! dx = 11, dy = 17, dz = 23, hence volume is 11*17*23 = 4301
    if ( r_def == real64 ) then
      use_tol = tol
    else
      use_tol = 10.0_r_def*spacing( maxval(detj_w2_p(1:6)) )
    endif
    @assertEqual(4301.0_r_def, detj_w2_p(1), use_tol)
    @assertEqual(4301.0_r_def, detj_w2_p(2), use_tol)
    @assertEqual(4301.0_r_def, detj_w2_p(3), use_tol)
    @assertEqual(4301.0_r_def, detj_w2_p(4), use_tol)
    @assertEqual(4301.0_r_def, detj_w2_p(5), use_tol)
    @assertEqual(4301.0_r_def, detj_w2_p(6), use_tol)

    deallocate(detj_w2_p)
    deallocate(chi1)
    deallocate(chi2)
    deallocate(chi3)
    deallocate(panel_id)
    deallocate(map_w0)
    deallocate(map_w2)
    deallocate(map_pid)
    deallocate(basis_w0)
    deallocate(diff_basis_w0)

  end subroutine test_all

end module calc_detj_at_w2_kernel_mod_test
