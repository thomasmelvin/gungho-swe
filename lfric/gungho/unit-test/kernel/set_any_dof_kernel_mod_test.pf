!-----------------------------------------------------------------------------
! (c) Crown copyright 2021 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!> Test setting of a given dof to a real value.
!>
module set_any_dof_kernel_mod_test

  use constants_mod,                 only: i_def, r_def

  use get_unit_test_m3x3_q3x3x3_sizes_mod, only : get_w2_m3x3_q3x3x3_size,    &
                                                  get_wtheta_m3x3_q3x3x3_size
  use get_unit_test_m3x3_dofmap_mod,       only : get_w2_m3x3_dofmap,         &
                                                  get_wtheta_m3x3_dofmap

  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: set_any_dof_test_type
    private
  contains
    procedure setup
    procedure tearDown
    procedure test_all
  end type set_any_dof_test_type

  real(r_def), parameter    :: VALUE = 123.234_r_def ! An aribtrary value

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(set_any_dof_test_type), intent(inout) :: this

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use configuration_mod, only: final_configuration

    implicit none

    class(set_any_dof_test_type), intent(inout) :: this

    call final_configuration()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use set_any_dof_kernel_mod, only: set_any_dof_code
    implicit none

    class(set_any_dof_test_type), intent(inout) :: this

    real(r_def) :: answer

    ! Fields
    real(r_def), allocatable :: w2_field(:)
    real(r_def), allocatable :: wth_field(:)

    integer(i_def) :: cell, df

    ! Sizes
    integer(i_def)          :: nlayers, ncells, nqp_h, nqp_v
    integer(i_def)          :: ndf_w2, undf_w2
    integer(i_def)          :: ndf_wth, undf_wth
    integer(i_def)          :: dim_space, dim_space_diff

    ! Dofmaps
    integer(i_def), allocatable :: map_w2(:,:)
    integer(i_def), allocatable :: map_wth(:,:)

    ! The dof we wish to set
    integer(i_def) :: dof_to_set

    nlayers = 3
    call get_w2_m3x3_q3x3x3_size( ndf_w2, undf_w2, ncells,     &
                                  dim_space, dim_space_diff,   &
                                  nqp_h, nqp_v,                &
                                  nlayers )
    call get_w2_m3x3_dofmap(map_w2)
    call get_wtheta_m3x3_q3x3x3_size( ndf_wth, undf_wth, ncells,   &
                                      dim_space, dim_space_diff,   &
                                      nqp_h, nqp_v,                &
                                      nlayers )
    call get_wtheta_m3x3_dofmap(map_wth)

    ! Create the data
    allocate( w2_field( undf_w2 ) )
    allocate( wth_field( undf_wth ) )

    ! Set 2nd dof of W2 field
    cell = 5
    dof_to_set = 2
    w2_field(:) = VALUE**2 ! Another arbitrary value that is not = VALUE

    call set_any_dof_code( nlayers,         &
                           w2_field,        &
                           dof_to_set,      &
                           VALUE,           &
                           ndf_w2, undf_w2, &
                           map_w2(:,cell)   &
                           )

    ! Check a couple of levels
    answer = w2_field( map_w2( dof_to_set, cell ) )
    @assertEqual( answer, VALUE )

    answer = w2_field( map_w2( dof_to_set, cell ) + 1 )
    @assertEqual( answer, VALUE )

    ! Check another dof hasn't been modified
    answer = w2_field( map_w2( dof_to_set - 1, cell ) )
    @assertEqual( answer, VALUE**2 )

    ! Set 6th dof of W2 field
    cell = 5
    dof_to_set = 6
    w2_field(:) = VALUE**2 ! Another arbitrary value that is not = VALUE
    call set_any_dof_code( nlayers,         &
                           w2_field,        &
                           dof_to_set,      &
                           VALUE,           &
                           ndf_w2, undf_w2, &
                           map_w2(:,cell)   &
                           )

    ! Check a couple of levels
    answer = w2_field( map_w2( dof_to_set, cell ) )
    @assertEqual( answer, VALUE )

    answer = w2_field( map_w2( dof_to_set, cell ) + 1 )
    @assertEqual( answer, VALUE )

    ! Check another dof hasn't been modified
    answer = w2_field( map_w2( dof_to_set - 1, cell ) )
    @assertEqual( answer, VALUE**2 )

    ! Set 2nd dof of Wtheta field
    cell = 5
    dof_to_set = 2
    wth_field(:) = VALUE**2 ! Another arbitrary value that is not = VALUE
    call set_any_dof_code( nlayers,           &
                           wth_field,         &
                           dof_to_set,        &
                           VALUE,             &
                           ndf_wth, undf_wth, &
                           map_wth(:,cell)    &
                           )

    ! Check a couple of levels
    answer = wth_field( map_wth( dof_to_set, cell ) )
    @assertEqual( answer, VALUE )

    answer = wth_field( map_wth( dof_to_set, cell ) + 1 )
    @assertEqual( answer, VALUE )

    ! Check another dof hasn't been modified
    answer = wth_field( map_wth( dof_to_set - 1, cell ) )
    @assertEqual( answer, VALUE**2 )

    ! Check we haven't gone out of bounds on this column
    cell=4
    do df = map_wth( 1, cell ), map_wth( 1, cell+1 )-1
      answer = wth_field( df )
      @assertEqual( answer, VALUE**2 )
    end do
    cell=6
    do df = map_wth( 1, cell ), map_wth( 1, cell+1 )-1
      answer = wth_field( df )
      @assertEqual( answer, VALUE**2 )
    end do


    deallocate(w2_field)
    deallocate(map_w2)
    deallocate(wth_field)
    deallocate(map_wth)

  end subroutine test_all

end module set_any_dof_kernel_mod_test
