!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

module compute_dof_level_kernel_mod_test

  use constants_mod, only : i_def, r_def
  use get_unit_test_m3x3_dofmap_mod, &
    only : get_w2_m3x3_dofmap
  use get_unit_test_m3x3_q3x3x3_sizes_mod, &
    only : get_w2_m3x3_q3x3x3_size
  use get_unit_test_nodal_coords_mod, &
    only : get_w2_nodal_coords
  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: compute_dof_level_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type compute_dof_level_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use finite_element_config_mod, only : cellshape_quadrilateral

    implicit none

    class(compute_dof_level_test_type), intent(inout) :: this

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(compute_dof_level_test_type), intent(inout) :: this

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use compute_dof_level_kernel_mod, only: compute_dof_level_code

    implicit none

    class(compute_dof_level_test_type), intent(inout) :: this

    real(r_def),    parameter :: tol = 1.0e-6_r_def
    integer(i_def), parameter :: nlayers = 3

    integer(i_def) :: cell, k

    integer(i_def) :: ndf_w2, undf_w2
    integer(i_def) :: ncells
    integer(i_def) :: unused

    integer(i_def), allocatable :: map_w2(:,:)

    real(r_def), allocatable :: w2_nodal_coords(:,:)
    real(r_def), allocatable :: level(:)

    real(r_def) :: answer

    call get_w2_m3x3_q3x3x3_size( ndf_w2, undf_w2, ncells, &
                                  unused, unused, &
                                  unused, unused, nlayers=nlayers)
    call get_w2_m3x3_dofmap( map_w2 )
    call get_w2_nodal_coords( w2_nodal_coords )

    ! Test flux computation
    allocate( level(undf_w2) )
    level(:) = 0.0_r_def

    ! Call the kernel
    do cell = 1, ncells
      call compute_dof_level_code( nlayers,         &
                                   level,           &
                                   ndf_w2,          &
                                   undf_w2,         &
                                   map_w2(:, cell), &
                                   w2_nodal_coords )
    end do

    !Test the answer
    do k = 0, nlayers - 1
      answer = 0.5_r_def + real(k,r_def)
      @assertEqual(answer, level(map_w2(1, ncells) + k ), tol)
      answer = real(k,r_def)
      @assertEqual(answer, level(map_w2(5, ncells) + k ), tol)
      answer = 1.0_r_def + real(k,r_def)
      @assertEqual(answer, level(map_w2(6, ncells) + k ), tol)
    end do

    deallocate( level )
    deallocate( w2_nodal_coords )
    deallocate( map_w2 )

  end subroutine test_all

end module compute_dof_level_kernel_mod_test
