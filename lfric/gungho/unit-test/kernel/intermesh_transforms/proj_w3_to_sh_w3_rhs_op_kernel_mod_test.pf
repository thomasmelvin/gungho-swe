!-----------------------------------------------------------------------------
! (c) Crown copyright 2020 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!> Test the proj_w3_to_sh_w3_rhs_op kernel
!>
module proj_w3_to_sh_w3_rhs_op_kernel_mod_test
  use constants_mod,                       only : i_def, r_def
  use get_unit_test_m3x3_q3x3x3_sizes_mod, only : get_w0_m3x3_q3x3x3_size,  &
                                                  get_w3_m3x3_q3x3x3_size
  use get_unit_test_m3x3_dofmap_mod,       only : get_w0_m3x3_dofmap,       &
                                                  get_w3_m3x3_dofmap
  use get_unit_test_q3x3x3_basis_mod,      only : get_w0_q3x3x3_diff_basis, &
                                                  get_w0_q3x3x3_basis
  use get_unit_test_q3x3x3_quadrature_mod, only : get_gaussian_q3x3x3_quadrature_weights_xy, &
                                                  get_gaussian_q3x3x3_quadrature_weights_z
  use pFUnit_Mod
  implicit none

  private

  public :: proj_w3_to_sh_w3_rhs_op_kernel_test_type, test_all

  @TestCase
  type, extends(TestCase) :: proj_w3_to_sh_w3_rhs_op_kernel_test_type
    private

  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type proj_w3_to_sh_w3_rhs_op_kernel_test_type

contains
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use finite_element_config_mod, only : cellshape_quadrilateral, &
                                          coord_system_xyz
    use feign_config_mod,          only : feign_finite_element_config


    implicit none

    class(proj_w3_to_sh_w3_rhs_op_kernel_test_type), intent(inout) :: this

    call feign_finite_element_config(           &
             cellshape=cellshape_quadrilateral, &
             coord_order=0_i_def,               &
             coord_system=coord_system_xyz,     &
             element_order=0_i_def,             &
             rehabilitate=.true.,               &
             vorticity_in_w1=.false. )


  end subroutine setUp
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use configuration_mod,        only: final_configuration

    implicit none


    class(proj_w3_to_sh_w3_rhs_op_kernel_test_type), intent(inout) :: this

    call final_configuration()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  @Test
  subroutine test_all( this)

    use, intrinsic :: iso_fortran_env, only : real64
    use proj_w3_to_sh_w3_rhs_op_kernel_mod,   only : proj_w3_to_sh_w3_rhs_op_code

    implicit none

    class(proj_w3_to_sh_w3_rhs_op_kernel_test_type), intent(inout) :: this

    real(kind=r_def), parameter :: tol = 1.0e-12_r_def  ! r_def 64bit tolerance
    real(kind=r_def), parameter :: dx = 4.0_r_def
    real(kind=r_def), parameter :: dy = 3.0_r_def
    real(kind=r_def), parameter :: dz = 2.0_r_def
    real(kind=r_def), parameter :: dV = dx * dy * dz
    real(kind=r_def)            :: answer, use_tol

    ! Fields
    real(kind=r_def),    allocatable :: T_ip1(:), T_i(:)
    real(kind=r_def),    allocatable :: dummy_w3_sh(:)

    integer(kind=i_def) :: nlayers, nlayers_sh
    integer(kind=i_def) :: ncells, cell, icell, ncells_sh
    integer(kind=i_def) :: ndf_w3, ndf_w3_sh, ndf_dl_w0, ndf_pid
    integer(kind=i_def) :: undf_w3, undf_w3_sh, undf_dl_w0, undf_pid
    integer(kind=i_def) :: dim_space, dim_space_diff
    integer(kind=i_def) :: nqp_h, nqp_v
    integer(kind=i_def) :: i, j, k
    integer(kind=i_def), allocatable :: map_dl_w0(:,:)
    integer(kind=i_def), allocatable :: map_w3(:,:)
    integer(kind=i_def), allocatable :: map_w3_sh(:,:)
    integer(kind=i_def), allocatable :: map_pid(:,:)
    real(kind=r_def), allocatable    :: panel_id(:)
    real(kind=r_def), allocatable    :: basis_w0(:,:,:,:)
    real(kind=r_def), allocatable    :: diff_basis_w0(:,:,:,:)
    real(kind=r_def), allocatable    :: wh(:), wv(:)
    real(kind=r_def), allocatable    :: dl_chi1(:), dl_chi2(:), dl_chi3(:)


    nlayers = 3
    nlayers_sh = nlayers + 1
    call get_w3_m3x3_q3x3x3_size( ndf_w3, undf_w3, ncells,   &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v,              &
                                  nlayers )
    call get_w3_m3x3_q3x3x3_size( ndf_w3_sh, undf_w3_sh, ncells_sh, &
                                  dim_space, dim_space_diff,        &
                                  nqp_h, nqp_v,                     &
                                  nlayers_sh )

    ! Manually do W0 values
    ndf_dl_w0 = 8
    undf_dl_w0 = 63

    ndf_pid = 1
    undf_pid = ncells

    call get_w0_m3x3_dofmap(map_dl_w0, 6)
    call get_w3_m3x3_dofmap(map_w3, nlayers)
    call get_w3_m3x3_dofmap(map_w3_sh, nlayers_sh)
    call get_w3_m3x3_dofmap(map_pid, 1)
    call get_w0_q3x3x3_basis(basis_w0)
    call get_w0_q3x3x3_diff_basis(diff_basis_w0)
    call get_gaussian_q3x3x3_quadrature_weights_xy(wh)
    call get_gaussian_q3x3x3_quadrature_weights_z(wv)

    ! Compute coordinates
    allocate(dl_chi1(undf_dl_w0))
    allocate(dl_chi2(undf_dl_w0))
    allocate(dl_chi3(undf_dl_w0))
    allocate(panel_id(ncells))

    panel_id(:) = 1_r_def

    icell = 1
    do j = 1,3
      do i = 1,3
        do k = 0,6
          dl_chi1(map_dl_w0(1,icell)+k) = real(i-1)*dx
          dl_chi2(map_dl_w0(1,icell)+k) = real(j-1)*dy
          dl_chi3(map_dl_w0(1,icell)+k) = real(k)*0.5*dz
        end do
        icell = icell + 1
      end do
    end do

    allocate( dummy_w3_sh( undf_w3_sh ) )
    allocate( T_ip1( undf_w3 ) )
    allocate( T_i( undf_w3 ) )

    cell = 5
    call proj_w3_to_sh_w3_rhs_op_code(                                    &
                                        nlayers,                          &
                                        T_ip1,                            &
                                        T_i,                              &
                                        dummy_w3_sh,                      &
                                        dl_chi1,                          &
                                        dl_chi2,                          &
                                        dl_chi3,                          &
                                        panel_id,                         &
                                        ndf_w3, undf_w3,                  &
                                        map_w3(:,cell),                   &
                                        ndf_w3_sh, undf_w3_sh,            &
                                        map_w3_sh(:,cell),                &
                                        ndf_dl_w0, undf_dl_w0,            &
                                        map_dl_w0(:,cell),                &
                                        basis_w0, diff_basis_w0,          &
                                        ndf_pid, undf_pid, map_pid,       &
                                        nqp_h, nqp_v, wh, wv              &
                                      )

    answer = dV / 2.0

    if ( r_def == real64 ) then
      use_tol = tol
      do k = 0, nlayers - 1
         @assertEqual(answer, T_ip1(map_w3(1, cell)+k), use_tol)
         @assertEqual(answer, T_i(map_w3(1, cell)+k), use_tol)
      end do
    else
      do k = 0, nlayers - 1
         use_tol = 10.0_r_def*spacing( T_ip1(map_w3(1, cell)+k) )
         @assertEqual(answer, T_ip1(map_w3(1, cell)+k), use_tol)
         use_tol = 10.0_r_def*spacing( T_i(map_w3(1, cell)+k) )
         @assertEqual(answer, T_i(map_w3(1, cell)+k), use_tol)
      end do
    end if

    deallocate( map_dl_w0 )
    deallocate( map_w3 )
    deallocate( map_w3_sh )
    deallocate( map_pid )
    deallocate( basis_w0 )
    deallocate( diff_basis_w0 )
    deallocate( wh )
    deallocate( wv )
    deallocate( dl_chi1 )
    deallocate( dl_chi2 )
    deallocate( dl_chi3 )
    deallocate( panel_id )
    deallocate( T_ip1 )
    deallocate( T_i )
    deallocate( dummy_w3_sh )

  end subroutine test_all

end module proj_w3_to_sh_w3_rhs_op_kernel_mod_test
