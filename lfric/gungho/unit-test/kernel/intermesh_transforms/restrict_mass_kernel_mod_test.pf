!-----------------------------------------------------------------------------
! (C) Crown copyright 2021 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!> Test for the mass restriction kernel
module restrict_mass_kernel_mod_test
  use pFUnit_mod
  use constants_mod, only : i_def, r_def

  implicit none
  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: restrict_mass_test_type
     private
   contains
     procedure :: test_all
  end type restrict_mass_test_type

contains
  @test
  subroutine test_all( this )
    use restrict_mass_kernel_mod, only : restrict_mass_kernel_code
    implicit none
    class(restrict_mass_test_type), intent(inout) :: this

    ! Scalars
    integer(kind=i_def) :: lp_x, lp_y, df
    integer(kind=i_def) :: nlayers
    integer(kind=i_def) :: ncell_f_per_c_x ! number of fine cells per coarse in x
    integer(kind=i_def) :: ncell_f_per_c_y ! number of fine cells per coarse in y
    integer(kind=i_def) :: ncell_f         ! number of fine cells
    integer(kind=i_def) :: ndf             ! number of dofs per cell. Same on each mesh
    integer(kind=i_def) :: undf_f, undf_c

    ! Integer Arrays
    integer(kind=i_def), allocatable, dimension(:,:) :: cell_map
    integer(kind=i_def), allocatable, dimension(:,:) :: map_f ! Cell and dof valued
    integer(kind=i_def), allocatable, dimension(:)   :: map_c ! only dof valued

    ! Real Arrays
    real(kind=r_def), allocatable, dimension(:) :: coarse_field
    real(kind=r_def), allocatable, dimension(:) :: coarse_answer
    real(kind=r_def), allocatable, dimension(:) :: fine_field
    real(kind=r_def), parameter :: tol = 1.0e-12_r_def
    real(kind=r_def)            :: n_per_layer

    ! set the scalars by hand
    nlayers = 3
    ncell_f_per_c_x = 2
    ncell_f_per_c_y = 3
    n_per_layer = real(ncell_f_per_c_x * ncell_f_per_c_y, r_def)

    ncell_f = 1_i_def * ncell_f_per_c_x * ncell_f_per_c_y ! only need one coarse cell
    ndf = 1 ! keep it simple (W3, discontinuous)
    undf_f = nlayers * ncell_f * ndf ! true for W3 on a single coarse column
    undf_c = nlayers * 1_i_def

    allocate( cell_map(ncell_f_per_c_x, ncell_f_per_c_y) )
    allocate( map_f(ndf,ncell_f), map_c(ndf) )
    allocate( coarse_field(undf_c) )
    allocate( coarse_answer(undf_c) )
    allocate( fine_field(undf_f) )

    ! Set cell map and dof maps
    do lp_y = 1, ncell_f_per_c_y
      do lp_x = 1, ncell_f_per_c_x
       cell_map(lp_x, lp_y) = lp_x + (lp_y - 1)*ncell_f_per_c_x
      end do
    end do
    do lp_x = 1, ncell_f
       map_f(1,lp_x) = 1 + (lp_x-1)*nlayers
    end do
    map_c(1) = 1

    ! Set initial values for fine field
    do df = 1, undf_f
      ! Just use the DoF indices themselves
      fine_field(df) = real(df, r_def)
    end do

    ! Set answer values
    do df = 1, undf_c
      ! Formula is sum of integers
      coarse_answer(df) = n_per_layer * ( real(df, r_def) &
                + real(nlayers, r_def) * 0.5_r_def * (n_per_layer - 1.0_r_def) )
    end do

    ! Set incorrect values initially for coarse field
    coarse_field(:) = 0.0_r_def

    call restrict_mass_kernel_code( nlayers,         &
                                    cell_map,        &
                                    ncell_f_per_c_x, &
                                    ncell_f_per_c_y, &
                                    ncell_f,         &
                                    coarse_field,    &
                                    fine_field,      &
                                    undf_c,          &
                                    map_c,           &
                                    ndf,             &
                                    undf_f,          &
                                    map_f            )

    do df = 1, undf_c
      @assertEqual( coarse_field(df), coarse_answer(df), tol )
    end do

    deallocate( cell_map )
    deallocate( map_f )
    deallocate( map_c )
    deallocate( coarse_field )
    deallocate( coarse_answer )
    deallocate( fine_field )

  end subroutine test_all

end module restrict_mass_kernel_mod_test
