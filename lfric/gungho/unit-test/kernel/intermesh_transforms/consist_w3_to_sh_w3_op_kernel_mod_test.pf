!-----------------------------------------------------------------------------
! (c) Crown copyright 2022 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!> Test the consist_w3_to_sh_w3_op kernel
!>
module consist_w3_to_sh_w3_op_kernel_mod_test
  use constants_mod,                       only : i_def, r_def
  use get_unit_test_m3x3_q3x3x3_sizes_mod, only : get_w3_m3x3_q3x3x3_size
  use get_unit_test_m3x3_dofmap_mod,       only : get_w3_m3x3_dofmap
  use pFUnit_Mod
  implicit none

  private

  public :: consist_w3_to_sh_w3_op_kernel_test_type, test_all

  @TestCase
  type, extends(TestCase) :: consist_w3_to_sh_w3_op_kernel_test_type
    private

  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type consist_w3_to_sh_w3_op_kernel_test_type

contains
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use finite_element_config_mod, only : cellshape_quadrilateral, &
                                          coord_system_xyz
    use feign_config_mod,          only : feign_finite_element_config


    implicit none

    class(consist_w3_to_sh_w3_op_kernel_test_type), intent(inout) :: this

    call feign_finite_element_config(           &
             cellshape=cellshape_quadrilateral, &
             coord_order=0_i_def,               &
             coord_system=coord_system_xyz,     &
             element_order=0_i_def,             &
             rehabilitate=.true.,               &
             vorticity_in_w1=.false. )


  end subroutine setUp
  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use configuration_mod,        only: final_configuration

    implicit none


    class(consist_w3_to_sh_w3_op_kernel_test_type), intent(inout) :: this

    call final_configuration()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  @Test
  subroutine test_all( this)

    use, intrinsic :: iso_fortran_env, only : real64
    use consist_w3_to_sh_w3_op_kernel_mod,   only : consist_w3_to_sh_w3_op_code

    implicit none

    class(consist_w3_to_sh_w3_op_kernel_test_type), intent(inout) :: this

    real(kind=r_def), parameter :: tol = 1.0e-12_r_def  ! r_def 64bit tolerance
    real(kind=r_def), parameter :: dx = 4.0_r_def
    real(kind=r_def), parameter :: dy = 3.0_r_def
    real(kind=r_def)            :: dz, dz_sh_i, dz_sh_ip1
    real(kind=r_def)            :: use_tol

    ! Fields
    real(kind=r_def),    allocatable :: T_ip1(:), T_i(:)
    real(kind=r_def),    allocatable :: answer_ip1(:), answer_i(:)
    real(kind=r_def),    allocatable :: heights(:), heights_sh(:)
    real(kind=r_def),    allocatable :: mm_w3_sh_inv(:,:,:)
    real(kind=r_def),    allocatable :: mm_w3(:,:,:)

    integer(kind=i_def) :: nlayers, nlayers_sh, ncells_3d, ncells_3d_sh
    integer(kind=i_def) :: ncells_2d, cell, icell, ncells_2d_sh
    integer(kind=i_def) :: ndf_w3, ndf_w3_sh
    integer(kind=i_def) :: undf_w3, undf_w3_sh
    integer(kind=i_def) :: dim_space, dim_space_diff
    integer(kind=i_def) :: nqp_h, nqp_v
    integer(kind=i_def) :: i, k, ik
    integer(kind=i_def), allocatable :: map_w3(:,:)


    nlayers = 3
    nlayers_sh = nlayers + 1
    call get_w3_m3x3_q3x3x3_size( ndf_w3, undf_w3, ncells_2d, &
                                  dim_space, dim_space_diff,  &
                                  nqp_h, nqp_v,               &
                                  nlayers )
    call get_w3_m3x3_q3x3x3_size( ndf_w3_sh, undf_w3_sh, ncells_2d_sh, &
                                  dim_space, dim_space_diff,           &
                                  nqp_h, nqp_v,                        &
                                  nlayers_sh )


    ncells_3d = nlayers*ncells_2d
    ncells_3d_sh = nlayers_sh*ncells_2d_sh

    call get_w3_m3x3_dofmap(map_w3, nlayers)

    allocate( T_ip1( undf_w3 ) )
    allocate( T_i( undf_w3 ) )
    allocate( mm_w3( ndf_w3, ndf_w3, ncells_3d ) )
    allocate( mm_w3_sh_inv( ndf_w3_sh, ndf_w3_sh, ncells_3d_sh ) )
    allocate( heights( nlayers+1 ) )
    allocate( heights_sh( nlayers_sh+1 ) )
    allocate( answer_ip1( undf_w3 ) )
    allocate( answer_i( undf_w3 ) )

    ! Fill in heights
    do i = 1, nlayers + 1
      ! Quadratic heights
      heights(i) = (real((i-1),r_def)**2)
    end do
    heights_sh(1) = heights(1)
    heights_sh(nlayers_sh+1) = heights(nlayers+1)
    do i = 2, nlayers_sh
      heights_sh(i) = 0.5_r_def * (heights(i-1)+heights(i))
    end do

    ! Make mass matrices and answer fields
    do cell = 1, ncells_2d
      ! answer fields and original mesh matrix
      do k = 1, nlayers
        ik = (cell-1)*nlayers + k
        ! Get heights of different levels
        dz = heights(k+1) - heights(k)
        dz_sh_ip1 = heights_sh(k+2) - heights_sh(k+1)
        dz_sh_i = heights_sh(k+1) - heights_sh(k)
        mm_w3(1,1,ik) = dx*dy*dz  ! Value is the volume of the cell
        answer_i(map_w3(1,cell)+k-1) = 0.5_r_def * dz / dz_sh_i
        answer_ip1(map_w3(1,cell)+k-1) = 0.5_r_def * dz / dz_sh_ip1
      end do
      ! shifted mesh mass matrix
      do k = 1, nlayers_sh
        ik = (cell-1)*nlayers_sh + k
        dz = heights_sh(k+1) - heights_sh(k)
        mm_w3_sh_inv(1,1,ik) = 1.0_r_def / (dx*dy*dz)  ! Value is the 1/volume of the cell
      end do

    end do

    ! Set T_ip1 and T_i to be initially wrong
    T_ip1(:) = 0.0_r_def
    T_i(:) = 0.0_r_def

    cell = 5
    call consist_w3_to_sh_w3_op_code(                                   &
                                      cell,                             &
                                      nlayers,                          &
                                      T_ip1,                            &
                                      T_i,                              &
                                      ncells_3d_sh,                     &
                                      mm_w3_sh_inv,                     &
                                      ncells_3d,                        &
                                      mm_w3,                            &
                                      ndf_w3, undf_w3,                  &
                                      map_w3(:,cell),                   &
                                      ndf_w3_sh                         &
                                    )

    if ( r_def == real64 ) then
      use_tol = tol
      do k = 0, nlayers - 1
        @assertEqual(answer_ip1(map_w3(1, cell)+k), T_ip1(map_w3(1, cell)+k), use_tol)
        @assertEqual(answer_i(map_w3(1, cell)+k), T_i(map_w3(1, cell)+k), use_tol)
      end do
    else
      do k = 0, nlayers - 1
        use_tol = 10.0_r_def*spacing( T_ip1(map_w3(1, cell)+k) )
        @assertEqual(answer_ip1(map_w3(1, cell)+k), T_ip1(map_w3(1, cell)+k), use_tol)
        use_tol = 10.0_r_def*spacing( T_i(map_w3(1, cell)+k) )
        @assertEqual(answer_i(map_w3(1, cell)+k), T_i(map_w3(1, cell)+k), use_tol)
      end do
    end if

    deallocate( map_w3 )
    deallocate( T_ip1 )
    deallocate( T_i )
    deallocate( mm_w3_sh_inv )
    deallocate( mm_w3 )
    deallocate( answer_i )
    deallocate( answer_ip1 )
    deallocate( heights )
    deallocate( heights_sh )

  end subroutine test_all

end module consist_w3_to_sh_w3_op_kernel_mod_test
