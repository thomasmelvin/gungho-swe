!-----------------------------------------------------------------------------
! (c) Crown copyright 2018 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!> Test the sorting of columns of data to remove static instability
!>
module sort_ref_kernel_mod_test

  use constants_mod, only: i_def, r_def
  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: sort_ref_test_type
    private
  contains
    procedure setup
    procedure tearDown
    procedure test_all
  end type sort_ref_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(sort_ref_test_type), intent(inout) :: this

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(sort_ref_test_type), intent(inout) :: this

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @test
  subroutine test_all( this )

    use sort_ref_kernel_mod, only : sort_ref_code

    use get_unit_test_m3x3_q3x3x3_sizes_mod, only: get_wtheta_m3x3_q3x3x3_size
    use get_unit_test_m3x3_dofmap_mod,       only: get_wtheta_m3x3_dofmap

    implicit none

    class(sort_ref_test_type), intent(inout) :: this

    integer(i_def) :: nlayers, ncells
    integer(i_def) :: ndf_wtheta, undf_wtheta
    integer(i_def) :: dim_space, dim_space_diff
    integer(i_def) :: nqp_h, nqp_v

    integer(i_def), allocatable :: map_wtheta(:,:)

    real(r_def) :: dth ! Change in theta across a model layer

    real(r_def), allocatable :: theta_data(:)

    real(r_def) :: answer

    integer(i_def) :: k, cell

    ! Get infrastructure support data
    !=====================================
    nlayers = 5

    ! Get sizes
    call get_wtheta_m3x3_q3x3x3_size( ndf_wtheta, undf_wtheta, ncells, &
                                      dim_space, dim_space_diff,       &
                                      nqp_h, nqp_v, nlayers )
    ! Get maps
    call get_wtheta_m3x3_dofmap( map_wtheta )

    !=====================================
    ! Assign data for testing

    allocate(theta_data(undf_wtheta))
    theta_data(:) = 300.0_r_def

    ! Test kernel only on interior cell 5
    cell=5
    ! Create the data, including some static instability low down
    do k = 1, nlayers/2
      theta_data( map_wtheta(1,cell) + k ) = &
                                theta_data(map_wtheta(1,cell) + k) + 1.0_r_def
    end do

    call sort_ref_code( nlayers,    &
                        theta_data, &
                        ndf_wtheta, &
                        ndf_wtheta, &
                        map_wtheta(:,cell) )

    ! The answer returns the min dth.  If the kernel is sorts correctly, then
    ! this should be 0.0 (otherwise it is negative).
    answer = 0.0_r_def
    do k = 1, nlayers
      dth = theta_data(map_wtheta(1,cell) + k) - &
            theta_data(map_wtheta(1,cell) + k - 1)
      answer = min(answer, dth)
    end do

    @assertEqual( 0.0_r_def, answer )

    deallocate( theta_data )
    deallocate( map_wtheta )

  end subroutine test_all

end module sort_ref_kernel_mod_test
