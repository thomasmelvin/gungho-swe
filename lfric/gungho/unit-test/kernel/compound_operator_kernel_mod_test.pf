!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the divergence operator computation
!>
module compound_operator_kernel_mod_test

    use constants_mod, only : i_def, r_def
    use get_unit_test_m3x3_dofmap_mod, &
      only : get_w2_m3x3_dofmap
    use get_unit_test_m3x3_q3x3x3_sizes_mod, &
      only : get_w2_m3x3_q3x3x3_size, &
             get_w3_m3x3_q3x3x3_size
    use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: compound_operator_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type compound_operator_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use finite_element_config_mod, only : cellshape_quadrilateral, &
                                          coord_system_xyz
    use feign_config_mod,          only : feign_finite_element_config
    use mesh_mod,                  only : PLANE_BI_PERIODIC

    implicit none

    class(compound_operator_test_type), intent(inout) :: this

    call feign_finite_element_config(      &
      cellshape=cellshape_quadrilateral,   &
      coord_order=0_i_def,                 &
      coord_system=coord_system_xyz,       &
      element_order=1_i_def,               &
      rehabilitate=.true., vorticity_in_w1=.false. )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(compound_operator_test_type), intent(inout) :: this

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use compound_operator_kernel_mod, only : compound_operator_kernel_code

    implicit none

    class(compound_operator_test_type), intent(inout) :: this

    real(r_def), parameter :: tol = 1.0e-12_r_def
    real(r_def), parameter :: tau = 0.5_r_def
    integer(i_def), parameter :: nlayers = 3

    integer :: cell
    integer(i_def) :: unused

    integer(i_def) :: ndf_w2, ndf_w3, undf_w2
    integer(i_def) :: ncells, ncell_3d
    integer(i_def), allocatable :: map_w2(:,:)

    real(r_def), allocatable :: dstar(:,:,:)
    real(r_def), allocatable :: m_w3_1(:,:,:)
    real(r_def), allocatable :: m_w3_2(:,:,:)
    real(r_def), allocatable :: div(:,:,:)
    real(r_def), allocatable :: rho(:)

    real(r_def) :: answer(1, 6)

    call get_w2_m3x3_q3x3x3_size( ndf_w2, undf_w2, ncells, &
                                  unused, unused, &
                                  unused, unused, nlayers=nlayers )
    call get_w2_m3x3_dofmap( map_w2, nlayers=nlayers )
    call get_w3_m3x3_q3x3x3_size( ndf_w3, unused, unused, &
                                  unused, unused, &
                                  unused, unused, nlayers=nlayers )

    ! Test the operator kernel
    ncell_3d = ncells * nlayers
    allocate( m_w3_1(ndf_w3, ndf_w3, ncell_3d) )
    m_w3_1 = 2.0_r_def

    allocate( m_w3_2(ndf_w3, ndf_w3, ncell_3d) )
    m_w3_2 = 6.0_r_def

    allocate( div(ndf_w3, ndf_w2, ncell_3d) )
    do cell = 1, ncell_3d
      div(:,:,cell) = reshape( [1.0_r_def, 2.0_r_def, 3.0_r_def, &
                                4.0_r_def, 5.0_r_def, 6.0_r_def], [1,6] )
    end do

    allocate( rho(undf_w2) )
    rho(:) = 2.0_r_def

    cell = 1
    allocate( dstar(ndf_w3, ndf_w2, ncell_3d) )
    call compound_operator_kernel_code( cell,     &
                                        nlayers,  &
                                        ncell_3d, &
                                        dstar,    &
                                        ncell_3d, &
                                        m_w3_1,   &
                                        ncell_3d, &
                                        m_w3_2,   &
                                        ncell_3d, &
                                        div,      &
                                        rho,      &
                                        tau,      &
                                        ndf_w3,   &
                                        ndf_w2,   &
                                        undf_w2,  &
                                        map_w2(:,cell) )

    ! Given the inputs prepared above the result should be as follows.
    ! (Generated by a supposed successful run of this test)
    answer = reshape( [12.00_r_def, 24.00_r_def, 36.00_r_def,  &
                       48.00_r_def, 60.00_r_def, 72.00_r_def], &
                      [1, 6] )

    @assertEqual( answer, dstar(:, :, 1 ), tol )

    deallocate( dstar )
    deallocate( rho )
    deallocate( div )
    deallocate( m_w3_2, m_w3_1 )
    deallocate( map_w2 )

  end subroutine test_all

end module compound_operator_kernel_mod_test
