!-----------------------------------------------------------------------------
! (c) Crown copyright 2020 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------
!

!> Test split_vector_field_kernel to split full 3D wind into
!> horizontal and vertical components.
!>
!
module split_vector_field_kernel_mod_test

  use constants_mod, only : i_def, r_def
  use pFUnit_Mod

  implicit none

  private

  public :: test_all

  @TestCase
  type, public, extends(TestCase) :: split_vector_field_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type split_vector_field_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(split_vector_field_test_type), intent(inout) :: this

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(split_vector_field_test_type), intent(inout) :: this

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @test
  subroutine test_all( this )

    use split_vector_field_kernel_mod, only : split_vector_field_code

    implicit none

    class(split_vector_field_test_type), intent(inout) :: this

    real(r_def),    parameter :: tol    = 1.0e-15_r_def

    integer(i_def), parameter :: nlayers = 1
    integer(i_def), parameter :: ndf_w2  = 6
    integer(i_def), parameter :: nfaces_h  = 4
    integer(i_def), parameter :: undf_w2 = nfaces_h*nlayers & ! horizontal dofs
                                         + (nlayers+1)        ! + vertical dofs

    integer(i_def) :: map_w2(ndf_w2)

    real(r_def) :: w2_field_in(undf_w2),    &
                   w2_field_out_h(undf_w2), &
                   w2_field_out_v(undf_w2), &
                   basis(3,ndf_w2,ndf_w2)

     integer(i_def) :: df

    ! Create the dof map for any number of layers
    ! dofs are contiguous in the vertical and so each entry is
    ! offset by nlayers

    do df = 1, nfaces_h
      map_w2(df) = 1 + (df-1)*nlayers
    end do

    ! Vertical dofs are contiguous and so
    ! map(6) needs to be 1 more than map(5)

    map_w2(nfaces_h+1) = 1 + nfaces_h*nlayers
    map_w2(ndf_w2)     = map_w2(nfaces_h+1) + 1

    ! Create the basis function array
    ! Nodal points are (x,z,y) = (0,1/2,1/2)
    !                            (1/2,0,1/2)
    !                            (1,0,1/2)
    !                            (1/2,1,1/2)
    !                            (1/2,1/2,0)
    !                            (1/2,1/2,1)
    ! Basis functions are (1-x,0,0)
    !                     (0,-(1-y),0)
    !                     (x,0,0)
    !                     (0,-y,0)
    !                     (0,0,1-z)
    !                     (0,0,z)
    basis = 0.0_r_def
    basis(1,1,:) = 0.5_r_def
    basis(1,1,1) = 1.0_r_def
    basis(1,1,3) = 0.0_r_def
    basis(2,2,:) =-0.5_r_def
    basis(2,2,2) =-1.0_r_def
    basis(2,2,4) = 0.0_r_def
    basis(1,3,:) = 0.5_r_def
    basis(1,3,1) = 0.0_r_def
    basis(1,3,3) = 1.0_r_def
    basis(2,4,:) =-0.5_r_def
    basis(2,4,2) = 0.0_r_def
    basis(2,4,4) = 1.0_r_def
    basis(3,5,:) = 0.5_r_def
    basis(3,5,5) = 1.0_r_def
    basis(3,5,6) = 0.0_r_def
    basis(3,6,:) =-0.5_r_def
    basis(3,6,5) = 0.0_r_def
    basis(3,6,6) = 1.0_r_def

    ! Set up the input W2 field with data at all dofs
    w2_field_in(1:6) = (/  101.0_r_def,102.0_r_def,103.0_r_def,   &
                           104.0_r_def, 105.0_r_def, 106.0_r_def /)

    ! Set up the output wind field with zeroes
    w2_field_out_h = 0.0_r_def
    w2_field_out_v = 0.0_r_def

    call split_vector_field_code( nlayers,              &
                                  w2_field_out_h,       &
                                  w2_field_out_v,       &
                                  w2_field_in,          &
                                  ndf_w2,               &
                                  undf_w2,              &
                                  map_w2,               &
                                  basis )


    @assertEqual(101.0_r_def, w2_field_out_h(1), tol)
    @assertEqual(102.0_r_def, w2_field_out_h(2), tol)
    @assertEqual(103.0_r_def, w2_field_out_h(3), tol)
    @assertEqual(104.0_r_def, w2_field_out_h(4), tol)
    @assertEqual(  0.0_r_def, w2_field_out_h(5), tol)
    @assertEqual(  0.0_r_def, w2_field_out_h(6), tol)

    @assertEqual(  0.0_r_def, w2_field_out_v(1), tol)
    @assertEqual(  0.0_r_def, w2_field_out_v(2), tol)
    @assertEqual(  0.0_r_def, w2_field_out_v(3), tol)
    @assertEqual(  0.0_r_def, w2_field_out_v(4), tol)
    @assertEqual(105.0_r_def, w2_field_out_v(5), tol)
    @assertEqual(106.0_r_def, w2_field_out_v(6), tol)

  end subroutine test_all

end module split_vector_field_kernel_mod_test
