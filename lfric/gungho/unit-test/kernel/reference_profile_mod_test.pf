!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------
!
!-------------------------------------------------------------------------------
module reference_profile_mod_test

  use constants_mod, only : r_def, i_def
  use pFUnit_Mod

  implicit none

  private
  public :: reference_profile_test_type, test_all

  @TestCase
  type, extends(TestCase) :: reference_profile_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type reference_profile_test_type

  real(r_def), parameter :: gravity  = 10.0_r_def
  real(r_def), parameter :: radius   = 6000000_r_def
  real(r_def), parameter :: omega    = 8.0E-5_r_def
  real(r_def), parameter :: p_zero   = 100000.0_r_def
  real(r_def), parameter :: rd       = 300.0_r_def
  real(r_def), parameter :: cp       = 1000.0_r_def
  real(r_def), parameter :: scaling  = 1.0_r_def

  real(r_def), parameter :: bvf_square = 0.0001_r_def
  real(r_def), parameter :: theta_surf = 300.0_r_def
  real(r_def), parameter :: pert_width_scaling = 1.0_r_def
  integer(i_def),                                                  &
               parameter :: profile_size       = 4
  real(r_def), parameter :: profile_data(4)    = (/ 280.0_r_def,   &
                                                    300.0_r_def,   &
                                                    305.0_r_def,   &
                                                    400.0_r_def /)
  real(r_def), parameter :: profile_heights(4) = (/ 500.0_r_def,   &
                                                    4.0e3_r_def,   &
                                                    4.0e3_r_def,   &
                                                    40.0e3_r_def /)


  real(r_def), parameter :: surface_pressure = 1000.0e2_r_def

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use base_mesh_config_mod,      only : geometry_planar,    &
                                          topology_fully_periodic
    use finite_element_config_mod, only : cellshape_quadrilateral, &
                                          coord_system_xyz
    use feign_config_mod,          only : feign_base_mesh_config,           &
                                          feign_initial_temperature_config, &
                                          feign_planet_config,              &
                                          feign_finite_element_config,      &
                                          feign_initial_pressure_config

    use initial_pressure_config_mod,                      &
                                   only : method_balanced
    use initial_temperature_config_mod,                   &
                                   only : perturb_none

    implicit none

    class(reference_profile_test_type), intent(inout) :: this

    call feign_base_mesh_config( filename='foo',                   &
                                 prime_mesh_name='unit_test',      &
                                 geometry=geometry_planar,         &
                                 offline_partitioning=.false.,     &
                                 topology=topology_fully_periodic, &
                                 fplane=.false., f_lat_deg=0.0_r_def )

    call feign_initial_temperature_config( bvf_square=bvf_square,                 &
                                           theta_surf=theta_surf,                 &
                                           pert_width_scaling=pert_width_scaling, &
                                           perturb=perturb_none,                  &
                                           profile_size=profile_size,             &
                                           profile_data=profile_data,             &
                                           profile_heights=profile_heights  )

    call feign_initial_pressure_config( method = method_balanced,             &
                                        surface_pressure = surface_pressure )

    call feign_planet_config( gravity=gravity, radius=radius, omega=omega, &
                              rd=rd, cp=cp, p_zero=p_zero,                 &
                              scaling_factor=scaling )

    call feign_finite_element_config(                       &
         cellshape = cellshape_quadrilateral,               &
         coord_order = 0_i_def,                             &
         coord_system = coord_system_xyz,                   &
         element_order = 0_i_def,                           &
         rehabilitate = .true.,                             &
         vorticity_in_w1 =.false. )

  end subroutine setUp


  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use configuration_mod,        only: final_configuration

    implicit none

    class(reference_profile_test_type), intent(inout) :: this

    call final_configuration()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use idealised_config_mod,  only : test_gravity_wave
    use reference_profile_mod, only : reference_profile

    implicit none

    class(reference_profile_test_type), intent(inout) :: this

    real(r_def), parameter :: tol = 1.0e-14
    real(r_def), parameter :: kappa = rd / cp

    real(kind=r_def) :: exner, theta, rho, x(3)
    real(kind=r_def) :: exner_exact, theta_exact, rho_exact

    x = (/ 0.0_r_def, 0.0_r_def, 1000.0_r_def /)

    ! Test the reference profile (exner, rho, theta) computation for
    ! the gravity wave test at the point x
    call reference_profile(exner, rho, theta, x, test_gravity_wave)

    theta_exact = 300.0_r_def * exp ( bvf_square/gravity*x(3))
    exner_exact = 1.0_r_def - gravity**2/(Cp*300.0_r_def*bvf_square)   &
              * (1.0_r_def - exp ( - bvf_square/gravity * x(3) ))
    rho_exact = p_zero/(Rd*theta_exact) * exner_exact ** ((1.0_r_def - kappa)/kappa)

    @assertEqual( theta_exact, theta, tol )
    @assertEqual( exner_exact, exner, tol )
    @assertEqual( rho_exact,   rho,   tol )

  end subroutine test_all

end module reference_profile_mod_test
