!-----------------------------------------------------------------------------
! (c) Crown copyright 2020 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

! Test the multi_insert_kernel

module multi_insert_kernel_mod_test

  use constants_mod, only : r_def, i_def
  use pFUnit_Mod

  implicit none

  private
  public:: test_of_multi_insert

  @TestCase
  type, extends(TestCase), public :: multi_insert_test_type
    private
    real(r_def), allocatable ::               &
      input_field(:), answer_output_field(:), &
      output_field(:)
    integer(i_def), allocatable :: int_ans_out_field(:), int_out_field(:)

  contains
    procedure setUp
    procedure tearDown
    procedure test_of_multi_insert
  end type multi_insert_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(multi_insert_test_type), intent(inout) :: this

    integer(kind=i_def) :: undf_in
    integer(kind=i_def) :: undf_out

    undf_in = 3_i_def
    undf_out = 5_i_def

    allocate( this%input_field(undf_in) )
    allocate( this%answer_output_field(undf_out) )
    allocate( this%output_field(undf_out) )
    allocate( this%int_ans_out_field(undf_out) )
    allocate( this%int_out_field(undf_out) )


  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(multi_insert_test_type), intent(inout) :: this

    deallocate( this%input_field, this%answer_output_field, &
                this%output_field, this%int_ans_out_field,  &
                this%int_out_field)

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_of_multi_insert( this )

    use multi_insert_kernel_mod, only : multi_insert_code
    use int_multi_insert_kernel_mod, only : int_multi_insert_code

    implicit none

    class(multi_insert_test_type), intent(inout) :: this

    real(kind=r_def), parameter :: tol = 1.0e-14_r_def

    integer(kind=i_def) :: ndata_in, nlayers, i, ndata_out, start_ind

    integer(kind=i_def)              :: ndf_in, undf_in
    integer(kind=i_def), allocatable :: map_in(:)
    integer(kind=i_def)              :: ndf_out, undf_out
    integer(kind=i_def), allocatable :: map_out(:)

    start_ind = 2_i_def
    ndata_in = 3_i_def

    ndf_in  = ndata_in
    undf_in = ndata_in
    allocate(map_in(ndf_in))
    do i=1_i_def, ndf_in
      map_in(i) = i
    end do

    ndata_out = 5_i_def

    ndf_out  = ndata_out
    undf_out = ndata_out
    allocate(map_out(ndf_out))
    do i=1_i_def, ndf_out
      map_out(i) = i
    end do

    ! Set input data
    this%input_field(map_in(1)+0) =  3.0_r_def
    this%input_field(map_in(1)+1) =  1.0_r_def
    this%input_field(map_in(1)+2) = -1.0_r_def

    ! Set answers
    this%answer_output_field(map_out(1)+0) = 0.0_r_def
    this%answer_output_field(map_out(1)+1) = 3.0_r_def
    this%answer_output_field(map_out(1)+2) = 1.0_r_def
    this%answer_output_field(map_out(1)+3) = -1.0_r_def
    this%answer_output_field(map_out(1)+4) = 0.0_r_def
    this%output_field(:) = 0.0_r_def

    this%int_ans_out_field(map_out(1)+0) = 0_i_def
    this%int_ans_out_field(map_out(1)+1) = 3_i_def
    this%int_ans_out_field(map_out(1)+2) = 1_i_def
    this%int_ans_out_field(map_out(1)+3) = -1_i_def
    this%int_ans_out_field(map_out(1)+4) = 0_i_def
    this%int_out_field(:) = 0_i_def

    call multi_insert_code(nlayers,                    &
                           this%output_field(:),       &
                           this%input_field(:),        &
                           start_ind,                  &
                           ndata_in,                   &
                           ndf_out, undf_out, map_out, &
                           ndf_in, undf_in, map_in)

    @assertEqual( this%answer_output_field(:), this%output_field(:), tol )

    call int_multi_insert_code(nlayers,                    &
                               this%int_out_field(:),      &
                               this%input_field(:),        &
                               start_ind,                  &
                               ndata_in,                   &
                               ndf_out, undf_out, map_out, &
                               ndf_in, undf_in, map_in)

    @assertEqual( this%int_ans_out_field(:), this%int_out_field(:) )

  end subroutine test_of_multi_insert

end module multi_insert_kernel_mod_test
