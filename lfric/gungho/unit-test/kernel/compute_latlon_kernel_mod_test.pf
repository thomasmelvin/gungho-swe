!-----------------------------------------------------------------------------
! (C) Crown copyright 2019 Met Office. All rights reserved.
! The file LICENCE, distributed with this code, contains details of the terms
! under which the code may be used.
!-----------------------------------------------------------------------------

module compute_latlon_kernel_mod_test

  use constants_mod, only : i_def, r_def, pi
  use get_unit_test_m3x3_dofmap_mod, &
    only : get_w3_m3x3_dofmap, get_wchi_m3x3_dofmap
  use get_unit_test_m3x3_q3x3x3_sizes_mod, &
    only : get_w3_m3x3_q3x3x3_size, get_wchi_m3x3_q3x3x3_size
  use get_unit_test_q3x3x3_basis_mod, &
    only : get_wchi_q3x3x3_basis

  use pFUnit_Mod

  implicit none

  private
  public test_all

  @TestCase
  type, extends(TestCase), public  :: compute_latlon_kernel_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type compute_latlon_kernel_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use chi_transform_mod,          only : init_chi_transforms
    use feign_config_mod,           only : feign_finite_element_config
    use finite_element_config_mod,  only : cellshape_quadrilateral, &
                                           coord_system_xyz


    use extrusion_config_mod, only: method_uniform

    implicit none

    class(compute_latlon_kernel_test_type), intent(inout) :: this

    integer(kind=i_def) :: nlayers

    call feign_finite_element_config(      &
        cellshape=cellshape_quadrilateral, &
        coord_order=0_i_def,               &
        coord_system=coord_system_xyz,     &
        element_order=0_i_def,             &
        rehabilitate=.true.,               &
        vorticity_in_w1=.false. )

    call init_chi_transforms()

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use chi_transform_mod, only: final_chi_transforms
    use configuration_mod, only: final_configuration

    implicit none

    class(compute_latlon_kernel_test_type), intent(inout) :: this

    ! Finalise namelists
    call final_configuration()
    call final_chi_transforms()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use compute_latlon_kernel_mod, only: compute_latlon_code

    implicit none

    class(compute_latlon_kernel_test_type), intent(inout) :: this

    real(r_def),    parameter :: tol = 1.0e-12_r_def
    integer(i_def), parameter :: nlayers = 1
    integer(i_def) :: k, df_w3

    integer(i_def) :: ndf_w3, undf_w3, ndf_chi, undf_chi
    integer(i_def) :: unused
    integer(i_def), allocatable :: map_w3(:,:), map_chi(:,:)
    real(r_def), allocatable :: chi_1(:), chi_2(:), chi_3(:), panel_id(:)
    real(r_def), allocatable :: basis_chi(:,:,:,:)

    real(r_def), allocatable :: latitude(:), longitude(:)
    real(r_def), allocatable :: lat_answer(:), lon_answer(:)

    call get_w3_m3x3_q3x3x3_size( ndf_w3, undf_w3, unused, &
                                  unused, unused, unused,  &
                                  unused, nlayers=nlayers)
    call get_w3_m3x3_dofmap( map_w3 )
    call get_wchi_m3x3_q3x3x3_size( ndf_chi, undf_chi, unused, &
                                  unused, unused, unused,      &
                                  unused, nlayers=nlayers)
    call get_wchi_m3x3_dofmap( map_chi )

    call get_wchi_q3x3x3_basis( basis_chi )

    ! Test latlon kernel
    allocate( latitude(undf_w3) )
    allocate( longitude(undf_w3) )
    allocate( chi_1(undf_chi) )
    allocate( chi_2(undf_chi) )
    allocate( chi_3(undf_chi) )
    allocate( panel_id(undf_w3) )
    allocate( lat_answer(undf_w3) )
    allocate( lon_answer(undf_w3) )

    chi_1(:) = 1.0_r_def
    chi_2(:) = 2.0_r_def
    chi_3(:) = 1.0_r_def
    panel_id(:) = 1.0_r_def

    ! Call the kernel
    call compute_latlon_code(nlayers,                         &
                             latitude, longitude,             &
                             chi_1, chi_2, chi_3,             &
                             panel_id,                        &
                             ndf_w3, undf_w3, map_w3(:,1),    &
                             ndf_chi, undf_chi, map_chi(:,1), &
                             basis_chi(:,:,1,:),              &
                             ndf_w3, undf_w3, map_w3          &
                            )

    !Test the answer
    k = 0
    df_w3 = 1
    lon_answer(map_w3(df_w3,1) + k) = 1.1071487177940904_r_def  !
    lat_answer(map_w3(df_w3,1) + k) = 0.42053433528396511_r_def !
    @assertEqual(lat_answer(map_w3(df_w3,1) + k), latitude(map_w3(df_w3,1) + k), tol)
    @assertEqual(lon_answer(map_w3(df_w3,1) + k), longitude(map_w3(df_w3,1) + k), tol)

    deallocate( latitude )
    deallocate( longitude )
    deallocate( chi_1 )
    deallocate( chi_2 )
    deallocate( chi_3 )
    deallocate( panel_id )
    deallocate( lat_answer )
    deallocate( lon_answer )

  end subroutine test_all

end module compute_latlon_kernel_mod_test
