!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

module calc_departure_wind_kernel_mod_test

  use constants_mod,                 only : i_def, r_def

  use get_unit_test_m3x3_q3x3x3_sizes_mod, only : get_w0_m3x3_q3x3x3_size, &
                                                  get_w2_m3x3_q3x3x3_size, &
                                                  get_w3_m3x3_q3x3x3_size

  use get_unit_test_m3x3_dofmap_mod,       only : get_w0_m3x3_dofmap, &
                                                  get_w2_m3x3_dofmap, &
                                                  get_w3_m3x3_dofmap

  use get_unit_test_q3x3x3_basis_mod,      only : get_w0_q3x3x3_diff_basis, &
                                                  get_w0_q3x3x3_basis
  use get_unit_test_w2nodal_basis_mod,     only : get_w2_w2nodal_basis

  use get_unit_test_3x3x3_chi_mod,         only : get_w0_3x3x3_field

  use pFUnit_Mod

  implicit none

  private
  public :: test_all

  @TestCase
  type, extends(TestCase), public :: calc_departure_wind_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type calc_departure_wind_test_type

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use finite_element_config_mod, only : cellshape_quadrilateral, &
                                          coord_system_xyz
    use formulation_config_mod,    only : eos_method_sampled,      &
                                          moisture_formulation_dry
    use feign_config_mod,          only : feign_finite_element_config, &
                                          feign_formulation_config

    implicit none

    class(calc_departure_wind_test_type), intent(inout) :: this

    call feign_finite_element_config(           &
             cellshape=cellshape_quadrilateral, &
             coord_order=0_i_def,               &
             coord_system=coord_system_xyz,     &
             element_order=0_i_def,             &
             rehabilitate=.true.,               &
             vorticity_in_w1=.false. )

    call feign_formulation_config( dlayer_on=.false.,               &
                                   dry_static_adjust=.false.,       &
                                   exner_from_eos=.false.,          &
                                   eos_method=eos_method_sampled,   &
                                   init_exner_bt=.false.,           &
                                   l_multigrid=.false.,             &
                                   rotating=.true.,                 &
                                   shallow=.false.,                 &
                                   moisture_formulation =           &
                                   moisture_formulation_dry,        &
                                   use_physics=.false.,             &
                                   use_wavedynamics=.false.,        &
                                   use_multires_coupling=.false.,   &
                                   si_momentum_equation=.true.,     &
                                   vector_invariant=.false. )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(calc_departure_wind_test_type), intent(inout) :: this

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use, intrinsic :: iso_fortran_env, only  : real64
    use calc_departure_wind_kernel_mod, only : calc_departure_wind_code

    implicit none

    class(calc_departure_wind_test_type), intent(inout) :: this

    real(kind=r_def), parameter  :: tol = 1.0e-12_r_def   ! r_def 64bit tolerance
    real(kind=r_def), parameter  :: dx = 6.0_r_def
    real(kind=r_def), parameter  :: dy = 1.0_r_def
    real(kind=r_def), parameter  :: dz = 2.0_r_def
    real(kind=r_def)             :: answer, physical_wind_value
    real(kind=r_def)             :: tst, use_tol

    ! Fields
    real(r_def), allocatable :: u_piola(:)
    real(r_def), allocatable :: u_departure_wind(:)
    real(r_def), allocatable :: chi1(:), chi2(:), chi3(:)
    real(r_def), allocatable :: panel_id(:)

    ! Dofmaps
    integer(i_def), allocatable :: map_w0(:,:)
    integer(i_def), allocatable :: map_w2(:,:)
    integer(i_def), allocatable :: map_pid(:,:)

    ! Basis functions
    real(r_def),    allocatable :: basis_w0(:,:,:,:)
    real(r_def),    allocatable :: diff_basis_w0(:,:,:,:)
    real(r_def),    allocatable :: nodal_basis_w2(:,:,:)

    integer(kind=i_def)          :: i, j, k, cell, df

    ! Sizes
    integer(kind=i_def)          :: nlayers, ncells
    integer(kind=i_def)          :: ndf_w0, ndf_w2, ndf_pid
    integer(kind=i_def)          :: undf_w0, undf_w2, undf_pid
    integer(kind=i_def)          :: dim_space, dim_space_diff
    integer(kind=i_def)          :: nqp_h, nqp_v

    nlayers = 3
    call get_w0_m3x3_q3x3x3_size( ndf_w0, undf_w0, ncells,   &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v,              &
                                  nlayers )
    call get_w2_m3x3_q3x3x3_size( ndf_w2, undf_w2, ncells,   &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v,              &
                                  nlayers )
    call get_w3_m3x3_q3x3x3_size( ndf_pid, undf_pid, ncells, &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, 1 )

    call get_w0_m3x3_dofmap(map_w0)
    call get_w2_m3x3_dofmap(map_w2)
    call get_w3_m3x3_dofmap(map_pid, 1)

    call get_w0_q3x3x3_diff_basis(diff_basis_w0)
    call get_w0_q3x3x3_basis(basis_w0)
    call get_w2_w2nodal_basis(nodal_basis_w2)

    allocate(u_piola(undf_w2))
    allocate(u_departure_wind(undf_w2))

    ! Compute coordinates
    allocate(chi1(undf_w0))
    allocate(chi2(undf_w0))
    allocate(chi3(undf_w0))
    allocate(panel_id(undf_pid))

    panel_id(:) = 1.0_r_def
    call get_w0_3x3x3_field(chi1, chi2, chi3, dx, dy, dz, &
                            map_w0,nlayers)

    cell = 1

    physical_wind_value = 3.0_r_def
    do df =  1,ndf_w2
      u_piola(map_w2(df,cell)) = physical_wind_value &
               * dot_product( nodal_basis_w2(:,df,df), abs(nodal_basis_w2(:,df,df)) )
    end do
    u_departure_wind(:) = 0.0_r_def

    call calc_departure_wind_code(nlayers,                 &
                                  u_departure_wind,        &
                                  u_piola,                 &
                                  chi1,                    &
                                  chi2,                    &
                                  chi3,                    &
                                  panel_id,                &
                                  ndf_w2, undf_w2,         &
                                  map_w2(:, cell),         &
                                  nodal_basis_w2,          &
                                  ndf_w0, undf_w0,         &
                                  map_w0(:, cell),         &
                                  basis_w0,                &
                                  diff_basis_w0,           &
                                  ndf_pid, undf_pid,       &
                                  map_pid(:,cell)          &
                                  )

    answer = physical_wind_value/(dx*dy*dz)
    if ( r_def == real64 ) then
       use_tol = tol
       do df = 1,ndf_w2
         @assertEqual(answer, u_departure_wind(map_w2(df, cell)), use_tol)
       end do
    else
       do df = 1,ndf_w2
         tst   = u_departure_wind( map_w2(df, cell) )
         use_tol = 10.0_r_def*spacing( tst )
         @assertEqual(answer, tst, use_tol)
       end do
    endif

    deallocate(u_departure_wind)
    deallocate(u_piola)
    deallocate(chi1)
    deallocate(chi2)
    deallocate(chi3)
    deallocate(panel_id)
    deallocate(map_w0)
    deallocate(map_w2)
    deallocate(map_pid)
    deallocate(nodal_basis_w2)
    deallocate(basis_w0)
    deallocate(diff_basis_w0)

  end subroutine test_all

end module calc_departure_wind_kernel_mod_test
