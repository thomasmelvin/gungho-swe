!-----------------------------------------------------------------------------
! Copyright (c) 2022,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the total mass factor for moist dynamics
!>
module moist_dyn_mass_kernel_mod_test

  use constants_mod, only: i_def, r_def
  use pFUnit_Mod

  implicit none

  private
  public :: moist_dyn_mass_test_type, test_all

  @TestCase
  type, extends(TestCase) :: moist_dyn_mass_test_type
    private
    integer(i_def), allocatable :: map_wtheta(:)
    real(r_def),    allocatable :: mr(:,:)
    real(r_def),    allocatable :: moist_dyn_mass(:)
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type moist_dyn_mass_test_type

  integer(i_def), parameter :: nummr = 6
  integer(i_def), parameter :: nlayers = 5
  integer(i_def), parameter :: ndf_wtheta = 2
  integer(i_def), parameter :: undf_wtheta = nlayers * ndf_wtheta

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    implicit none

    class(moist_dyn_mass_test_type), intent(inout) :: this

    allocate(this%map_wtheta(ndf_wtheta))
    allocate(this%mr(undf_wtheta, nummr))
    allocate(this%moist_dyn_mass(undf_wtheta))

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    implicit none

    class(moist_dyn_mass_test_type), intent(inout) :: this

    deallocate(this%map_wtheta)
    deallocate(this%mr)
    deallocate(this%moist_dyn_mass)

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @test
  subroutine test_all( this )

    use, intrinsic :: iso_fortran_env, only : real64
    use moist_dyn_mass_kernel_mod,     only : moist_dyn_mass_code

    implicit none

    class(moist_dyn_mass_test_type), intent(inout) :: this

    real(r_def), parameter :: tol = 1.0e-9_r_def   ! r_def 64bit
    real(r_def)            :: answer, use_tol

    integer(i_def)         :: i, k, df
    real(r_def)            :: z_factor

    ! Single column with nlayers
    ! Fields are p/wise linear discontinuous functions
    this%map_wtheta = (/ 1_i_def, 1_i_def + nlayers /)

    ! Create the data
    do k = 0, nlayers - 1
      do df = 1, ndf_wtheta
        z_factor = 1.0_r_def - real(k + df - 1_i_def, kind = r_def) /   &
                               real(nlayers, kind = r_def)
        do i = 1, nummr
          this%mr(this%map_wtheta(df) + k, i) = 0.01_r_def * z_factor / &
                                                real(i, kind = r_def)
        end do
      end do
    end do

    ! Test kernel
    call moist_dyn_mass_code(nlayers,                 &
                             this%moist_dyn_mass,     &
                             this%mr(:,1),            &
                             this%mr(:,2),            &
                             this%mr(:,3),            &
                             this%mr(:,4),            &
                             this%mr(:,5),            &
                             this%mr(:,6),            &
                             ndf_wtheta, undf_wtheta, &
                             this%map_wtheta )

    ! Check continuity at internal cell boundaries
    do k = 1, nlayers - 1
      answer =  this%moist_dyn_mass(this%map_wtheta(2) + k - 1)
      @assertEqual(this%moist_dyn_mass(this%map_wtheta(1) + k), answer, tol)
    end do

    ! Check total mass factor
    ! For r_def 64bit
    do k = 1, nlayers - 1
      do df = 1, ndf_wtheta
        z_factor = 1.0_r_def - real(k + df - 1_i_def, kind = r_def) / &
                               real(nlayers, kind = r_def)
        answer = 0.0_r_def
        do i = 1, nummr
          answer = answer + 1.0_r_def / real(i, kind = r_def)
        end do
        answer = 1.0_r_def + 0.01_r_def * z_factor * answer
        if ( r_def == real64 ) then
          use_tol = tol
        else
          use_tol = 10.0_r_def * spacing( answer )
        end if
        @assertEqual( this%moist_dyn_mass( this%map_wtheta(df) + k ), answer, use_tol )
      end do
    end do

  end subroutine test_all

end module moist_dyn_mass_kernel_mod_test
