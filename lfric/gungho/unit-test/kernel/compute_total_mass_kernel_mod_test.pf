!-----------------------------------------------------------------------------
! Copyright (c) 2017,  Met Office, on behalf of HMSO and Queen's Printer
! For further details please refer to the file LICENCE.original which you
! should have received as part of this distribution.
!-----------------------------------------------------------------------------

!> Test the initial rho computation
!>
module compute_total_mass_kernel_mod_test

  use constants_mod,                       only : i_def, r_def
  use get_unit_test_m3x3_q3x3x3_sizes_mod, only : get_w0_m3x3_q3x3x3_size, &
                                                  get_w3_m3x3_q3x3x3_size
  use get_unit_test_m3x3_dofmap_mod,       only : get_w0_m3x3_dofmap, &
                                                  get_w3_m3x3_dofmap
  use get_unit_test_q3x3x3_basis_mod,      only : get_w0_q3x3x3_diff_basis, &
                                                  get_w0_q3x3x3_basis,      &
                                                  get_w3_q3x3x3_basis
  use get_unit_test_q3x3x3_quadrature_mod, only : get_gaussian_q3x3x3_quadrature_weights_xy, &
                                                  get_gaussian_q3x3x3_quadrature_weights_z
  use get_unit_test_3x3x3_chi_mod,         only : get_w0_3x3x3_field
  use pFUnit_Mod

  implicit none

  private

  public :: compute_total_mass_kernel_test_type, test_all

  @TestCase
  type, extends(TestCase) :: compute_total_mass_kernel_test_type
    private
  contains
    procedure setUp
    procedure tearDown
    procedure test_all
  end type compute_total_mass_kernel_test_type

  integer(i_def), parameter :: element_order = 0

  real(r_def), parameter :: gravity  = 10.0_r_def
  real(r_def), parameter :: radius   = 6000000_r_def
  real(r_def), parameter :: omega    = 8.0E-5_r_def
  real(r_def), parameter :: p_zero   = 100000.0_r_def
  real(r_def), parameter :: rd       = 300.0_r_def
  real(r_def), parameter :: cp       = 1000.0_r_def
  real(r_def), parameter :: scaling  = 1.0_r_def

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp( this )

    use base_mesh_config_mod,      only : geometry_planar, &
                                          topology_fully_periodic
    use finite_element_config_mod, only : cellshape_quadrilateral, &
                                          coord_system_xyz
    use feign_config_mod,          only : feign_finite_element_config, &
                                          feign_planet_config, &
                                          feign_base_mesh_config

    implicit none

    class(compute_total_mass_kernel_test_type), intent(inout) :: this

    call feign_base_mesh_config( filename='foo',                   &
                                 prime_mesh_name='unit_test',      &
                                 geometry=geometry_planar,         &
                                 offline_partitioning=.false.,     &
                                 topology=topology_fully_periodic, &
                                 fplane=.false., f_lat_deg=0.0_r_def )

    call feign_finite_element_config(           &
             cellshape=cellshape_quadrilateral, &
             coord_order=0_i_def,               &
             coord_system=coord_system_xyz,     &
             element_order=0_i_def,             &
             rehabilitate=.true.,               &
             vorticity_in_w1=.false. )

    call feign_planet_config( gravity=gravity, radius=radius, omega=omega, &
                              rd=rd, cp=cp, p_zero=p_zero,                 &
                              scaling_factor=scaling )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown( this )

    use configuration_mod,        only: final_configuration

    implicit none

    class(compute_total_mass_kernel_test_type), intent(inout) :: this

    call final_configuration()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_all( this )

    use, intrinsic :: iso_fortran_env, only : real64
    use compute_total_mass_kernel_mod, only : compute_total_mass_code

    implicit none

    class(compute_total_mass_kernel_test_type), intent(inout) :: this

    real(r_def), parameter :: tol = 1.0e-2_r_def     ! r_def 64bit
    real(r_def), parameter :: dx  = 6000.0_r_def, &
                              dy  = 2000.0_r_def, &
                              dz  = 2000.0_r_def

    real(kind=r_def) :: answer, use_tol

    integer(i_def) :: nlayers, ncells, ncell_3d, cell, icell
    integer(i_def) :: ndf_w0, undf_w0, ndf_w3, undf_w3
    integer(i_def) :: ndf_pid, undf_pid
    integer(i_def) :: dim_space, dim_space_diff
    integer(i_def) :: nqp_h, nqp_v

    integer(i_def) :: i, j, k

    integer(i_def), allocatable :: map_w0(:,:)
    integer(i_def), allocatable :: map_w3(:,:)
    integer(i_def), allocatable :: map_pid(:,:)
    real(r_def), allocatable :: basis_w0(:,:,:,:)
    real(r_def), allocatable :: diff_basis_w0(:,:,:,:)
    real(r_def), allocatable :: basis_w3(:,:,:,:)
    real(r_def), allocatable :: wh(:), wv(:)

    real(r_def), allocatable :: panel_id(:)
    real(r_def), allocatable :: chi1(:), chi2(:), chi3(:)
    real(r_def), allocatable :: mass(:)
    real(r_def), allocatable :: rho(:)

    nlayers = 3
    call get_w0_m3x3_q3x3x3_size( ndf_w0, undf_w0, ncells, &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, &
                                  nlayers )
    call get_w3_m3x3_q3x3x3_size( ndf_w3, undf_w3, ncells, &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, &
                                  nlayers )
    call get_w3_m3x3_q3x3x3_size( ndf_pid, undf_pid, ncells, &
                                  dim_space, dim_space_diff, &
                                  nqp_h, nqp_v, 1 )
    call get_w0_m3x3_dofmap(map_w0)
    call get_w3_m3x3_dofmap(map_w3)
    call get_w3_m3x3_dofmap(map_pid, 1)
    call get_w0_q3x3x3_diff_basis(diff_basis_w0)
    call get_w0_q3x3x3_basis(basis_w0)
    call get_w3_q3x3x3_basis(basis_w3)
    call get_gaussian_q3x3x3_quadrature_weights_xy(wh)
    call get_gaussian_q3x3x3_quadrature_weights_z(wv)

    ! Compute coordinates
    allocate(chi1(undf_w0))
    allocate(chi2(undf_w0))
    allocate(chi3(undf_w0))
    allocate(panel_id(undf_w3))

    panel_id(:) = 1_r_def

    call get_w0_3x3x3_field(chi1, chi2, chi3, dx, dy, dz, &
                            map_w0, nlayers)

    allocate(mass(undf_w3))
    allocate(rho(undf_w3))
    mass(:) = 0.0_r_def
    rho(:) = 2.0_r_def

    cell = 1
    call compute_total_mass_code(                          &
                                 nlayers,                  &
                                 mass,                     &
                                 rho,                      &
                                 chi1,                     &
                                 chi2,                     &
                                 chi3,                     &
                                 panel_id,                 &
                                 ndf_w3, undf_w3,          &
                                 map_w3(:,cell),           &
                                 basis_w3,                 &
                                 ndf_w0, undf_w0,          &
                                 map_w0(:,cell),           &
                                 basis_w0,                 &
                                 diff_basis_w0,            &
                                 ndf_pid, undf_pid,        &
                                 map_pid(:,cell),          &
                                 nqp_h, nqp_v,             &
                                 wh, wv)


    answer = dx*dy*dz*rho(1)
    if ( r_def == real64 ) then
      use_tol = tol
    else
      use_tol = 10.0_r_def*spacing( mass(map_w3(1, cell)) )
    end if
    @assertEqual(answer, mass(map_w3(1, cell)), use_tol)

    deallocate(map_w0)
    deallocate(map_w3)
    deallocate(map_pid)
    deallocate(basis_w0)
    deallocate(diff_basis_w0)
    deallocate(basis_w3)
    deallocate(wh)
    deallocate(wv)

    deallocate(chi1)
    deallocate(chi2)
    deallocate(chi3)
    deallocate(panel_id)
    deallocate(mass)
    deallocate(rho)

  end subroutine test_all

end module compute_total_mass_kernel_mod_test
