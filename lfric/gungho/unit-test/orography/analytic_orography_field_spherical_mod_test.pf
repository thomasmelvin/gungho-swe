!-----------------------------------------------------------------------
! (C) Crown copyright 2017 Met Office. All rights reserved.
! For further details please refer to the file COPYRIGHT.txt
! which you should have received as part of this distribution.
!-----------------------------------------------------------------------
!> @brief Test suite to verify assignment of orography profile to spherical
!>        coordinates using Witch-of-Agnesi mountain.
!-------------------------------------------------------------------------------
module analytic_orography_field_spherical_mod_test

  use constants_mod,              only : i_def, r_def, PI, str_def, &
                                         str_max_filename
  use global_mesh_mod,            only : global_mesh_type
  use analytic_orography_mod,     only : orography_profile
  use ugrid_mesh_data_mod,        only : ugrid_mesh_data_type

  use pFUnit_Mod

  implicit none

  private
  public :: setUp, tearDown, test_analytic_orography_field_spherical

  @testCase
  type, public, extends(TestCase) :: analytic_orography_field_spherical_test_type
    real(r_def) :: mountain_height
    real(r_def) :: half_width
    real(r_def) :: lambda_centre_dec
    real(r_def) :: phi_centre_dec
    real(r_def) :: lambda_focus_dec
    real(r_def) :: phi_focus_dec
  contains
    procedure     :: setUp
    procedure     :: tearDown
    procedure     :: test_analytic_orography_field_spherical
  end type analytic_orography_field_spherical_test_type

  character(str_def), parameter   :: mesh_name     = 'unit_test'
  character(len=str_max_filename) :: filename      = "data/mesh_C16.nc"
  real(r_def),        parameter   :: domain_top    = 10000.0_r_def
  integer(i_def),     parameter   :: npanels       = 6_i_def
  integer(i_def),     parameter   :: nlayers       = 10_i_def
  integer(i_def),     parameter   :: element_order = 0_i_def
  integer(i_def),     parameter   :: total_ranks   = 1_i_def
  integer(i_def),     parameter   :: local_rank    = 0_i_def
  integer(i_def),     parameter   :: xproc         = 1_i_def
  integer(i_def),     parameter   :: yproc         = 1_i_def

  real(r_def), parameter :: gravity  = 10.0_r_def
  real(r_def), parameter :: radius   = 6371229.0_r_def
  real(r_def), parameter :: omega    = 8.0E-5_r_def
  real(r_def), parameter :: p_zero   = 100000.0_r_def
  real(r_def), parameter :: rd       = 300.0_r_def
  real(r_def), parameter :: cp       = 1000.0_r_def
  real(r_def), parameter :: scaling  = 125.0_r_def
contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp(this)

    use agnesi_orography_spherical_mod, only : agnesi_spherical_type
    use base_mesh_config_mod,           only : geometry_spherical, &
                                               topology_fully_periodic
    use finite_element_config_mod,      only : cellshape_quadrilateral, &
                                               coord_system_xyz
    use feign_config_mod,               only : feign_finite_element_config, &
                                               feign_base_mesh_config, &
                                               feign_planet_config,    &
                                               feign_extrusion_config, &
                                               feign_orography_agnesi_spherical_config
    use orography_agnesi_spherical_config_mod, only :              &
                                        lambda_centre, phi_centre, &
                                        lambda_focus, phi_focus
    use extrusion_config_mod,    only : method_uniform, stretching_method_linear

    implicit none

    class(analytic_orography_field_spherical_test_type), intent(inout) :: this

    ! Set mesh configuration
    call feign_base_mesh_config(                                    &
                         filename        = filename,                &
                         prime_mesh_name = mesh_name,               &
                         geometry        = geometry_spherical,      &
                         offline_partitioning = .false.,            &
                         topology        = topology_fully_periodic, &
                         fplane          = .false.,                 &
                         f_lat_deg       = 0.0_r_def )

    ! Set planet parameters
    call feign_planet_config( gravity        = gravity, &
                              radius         = radius,  &
                              omega          = omega,   &
                              rd             = rd,      &
                              cp             = cp,      &
                              p_zero         = p_zero,  &
                              scaling_factor = scaling )

    ! Set Witch-of-Agnesi spherical configuration
    this%mountain_height   = 100.0_r_def
    this%half_width        = 2500.0_r_def
    this%lambda_centre_dec = 1.5_r_def
    this%phi_centre_dec    = 0.0_r_def
    this%lambda_focus_dec  = 1.5_r_def
    this%phi_focus_dec     = 0.25_r_def
    call feign_orography_agnesi_spherical_config(                           &
                                mountain_height   = this%mountain_height,   &
                                half_width        = this%half_width,        &
                                lambda_centre_dec = this%lambda_centre_dec, &
                                phi_centre_dec    = this%phi_centre_dec,    &
                                lambda_focus_dec  = this%lambda_focus_dec,  &
                                phi_focus_dec     = this%phi_focus_dec )

    call feign_extrusion_config( method=method_uniform, &
                                 domain_top=domain_top, &
                                 number_of_layers=nlayers, &
                                 stretching_height=1.0_r_def, &
                                 stretching_method=stretching_method_linear)

    call feign_finite_element_config( cellshape=cellshape_quadrilateral, &
                                      coord_order=0_i_def,               &
                                      coord_system=coord_system_xyz,     &
                                      element_order=0_i_def,             &
                                      rehabilitate=.true.,               &
                                      vorticity_in_w1=.false. )

    ! Initialise Witch-of-Agnesi spherical orography type
    allocate( orography_profile,                                    &
              source = agnesi_spherical_type( this%mountain_height, &
                                              this%half_width,      &
                                              lambda_centre,        &
                                              phi_centre,           &
                                              lambda_focus,         &
                                              phi_focus ) )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown(this)

    use configuration_mod,        only: final_configuration

    implicit none

    class(analytic_orography_field_spherical_test_type), intent(inout) :: this

    deallocate( orography_profile )
    call final_configuration()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_analytic_orography_field_spherical(this)

    use, intrinsic :: iso_fortran_env,  only : real64
    use local_mesh_mod,                 only : local_mesh_type
    use mesh_mod,                       only : mesh_type
    use partition_mod,                  only : partition_type,        &
                                               partitioner_interface, &
                                               partitioner_cubedsphere_serial
    use extrusion_mod,                  only : uniform_extrusion_type, &
                                               PRIME_EXTRUSION
    use extrusion_config_mod,           only : method_uniform
    use planet_config_mod,              only : scaled_radius
    use assign_orography_field_mod,     only : analytic_orography_spherical_xyz
    use coord_transform_mod,            only : xyz2llr, llr2xyz
    use orography_helper_functions_mod, only : eta2z_linear

    implicit none
    ! Arguments
    class(analytic_orography_field_spherical_test_type), intent(inout) :: this
    ! Mesh and partition types
    type(ugrid_mesh_data_type)                :: ugrid_mesh_data
    type(global_mesh_type),           pointer :: global_mesh_ptr => null()
    type(global_mesh_type),           target  :: global_mesh
    type(mesh_type)                           :: mesh
    type(partition_type)                      :: partition
    procedure(partitioner_interface), pointer :: partitioner_ptr => null()
    type(local_mesh_type),            pointer :: local_mesh_ptr
    type(local_mesh_type),            target  :: local_mesh
    type(uniform_extrusion_type)              :: extrusion
    ! Test parameters
    integer(i_def), parameter :: ndf = 1, undf = nlayers*ndf
    integer(i_def)            :: itest, i, map(1)
    real(r_def), parameter    :: tol = 1.0e-3_r_def  ! r_def 64bit tolerance
    real(r_def)               :: use_tol
    real(r_def)               :: height_flat_surface, height_domain_top
    real(r_def)               :: chi_1(undf), chi_2(undf), chi_3(undf)
    real(r_def)               :: chi_1_cart(undf), chi_2_cart(undf), chi_3_cart(undf)
    real(r_def)               :: panel_id(undf)
    real(r_def)               :: eta(0:nlayers)
    real(r_def)               :: vertex_coords_2d(3,1), chi_surf, chi_test

    ! Add global mesh
    call ugrid_mesh_data%read_from_file(trim(filename), mesh_name)
    global_mesh = global_mesh_type( ugrid_mesh_data, npanels )
    call ugrid_mesh_data%clear()
    global_mesh_ptr => global_mesh

    ! Assign partitioner
    partitioner_ptr => partitioner_cubedsphere_serial
    partition = partition_type( global_mesh_ptr, &
                                partitioner_ptr, &
                                xproc,           &
                                yproc,           &
                                1,               &
                                local_rank,      &
                                total_ranks )
    call local_mesh%initialise( global_mesh_ptr, partition )
    call local_mesh%init_cell_owner()
    local_mesh_ptr => local_mesh

    extrusion = uniform_extrusion_type( radius, domain_top, nlayers, &
                                        PRIME_EXTRUSION )

    ! Construct a mesh which is  uniform in vertical for purpose of the test
    mesh = mesh_type( local_mesh_ptr, extrusion )

    ! Set map for chi coordinates
    map(1)  = 1

    ! Test assigning orography for selected number of points
    i = local_mesh%get_lid_from_gid(888)
    call local_mesh%get_vert_coords(local_mesh%get_vert_on_cell(1,i),&
                                    vertex_coords_2d(:,1))
    ! Create horizontal chi_1 and chi_2 fields from mesh coordinates
    chi_1 = vertex_coords_2d(1,1)
    chi_2 = vertex_coords_2d(2,1)
    ! Get physical height of flat domain surface (scaled_radius in spherical
    ! coordinates)
    height_flat_surface = scaled_radius
    ! Get domain top
    height_domain_top = domain_top + height_flat_surface
    ! Create uniform chi_3 field
    call mesh%get_eta(eta)
    do i = 1, undf
      chi_3(i) = eta2z_linear(eta(i-1), height_flat_surface, height_domain_top)
    end do
    panel_id(:) = 1.0_r_def
    ! Transform coordinate field to (x, y, z) as it is currently in the model
    do i = 1, undf
      call llr2xyz(chi_1(i), chi_2(i), chi_3(i), &
                   chi_1_cart(i), chi_2_cart(i), chi_3_cart(i))
    end do
    ! Test spherical orography assignment
    call analytic_orography_spherical_xyz( nlayers, ndf, undf, map, &
                                           ndf, undf, map,          &
                                           height_flat_surface,     &
                                           height_domain_top,       &
                                           chi_1_cart, chi_2_cart, chi_3_cart, &
                                           panel_id )
    ! Transform coordinate field back to (long, lat, r) for comparison
    do i = 1, undf
      call xyz2llr(chi_1_cart(i), chi_2_cart(i), chi_3_cart(i), &
                   chi_1(i), chi_2(i), chi_3(i))
    end do

    if ( r_def == real64 ) then
      use_tol = tol
    else
      use_tol = 10.0_r_def*spacing( maxval( chi_3 ) )
    end if

    ! Test selected chi_3
    itest = 1
    chi_surf = chi_3(itest)
    chi_test = this%mountain_height + height_flat_surface
    @assertEqual( chi_surf, chi_test, use_tol )

    itest = 5
    chi_surf = chi_3(itest)
    chi_test = 55029.832_r_def
    @assertEqual( chi_surf, chi_test, use_tol )

    return
  end subroutine test_analytic_orography_field_spherical

end module analytic_orography_field_spherical_mod_test
