!-----------------------------------------------------------------------
! (C) Crown copyright 2017 Met Office. All rights reserved.
! For further details please refer to the file COPYRIGHT.txt
! which you should have received as part of this distribution.
!-----------------------------------------------------------------------
!> @brief Test suite to verify assignment of orography profile to Cartesian
!>        coordinates using Schar mountain.
!-------------------------------------------------------------------------------
module analytic_orography_field_cartesian_mod_test

  use constants_mod,              only : i_def, r_def, str_def, str_max_filename
  use global_mesh_mod,            only : global_mesh_type
  use analytic_orography_mod,     only : orography_profile
  use ugrid_mesh_data_mod,        only : ugrid_mesh_data_type

  use pFUnit_Mod

  implicit none

  private
  public :: setUp, tearDown, test_analytic_orography_field_cartesian

  @testCase
  type, public, extends(TestCase) :: analytic_orography_field_cartesian_test_type
    real(r_def)         :: mountain_height
    real(r_def)         :: half_width_x
    real(r_def)         :: half_width_y
    real(r_def)         :: wavelength
    real(r_def)         :: x_centre
    real(r_def)         :: y_centre
    integer(kind=i_def) :: direction
  contains
    procedure     :: setUp
    procedure     :: tearDown
    procedure     :: test_analytic_orography_field_cartesian
  end type analytic_orography_field_cartesian_test_type

  character(str_def), parameter   :: mesh_name        = 'unit_test'
  character(len=str_max_filename) :: filename         = "data/mesh_BiP40x40-5x5.nc"
  real(r_def),        parameter   :: domain_bottom    = 0.0_r_def
  real(r_def),        parameter   :: domain_top       = 10000.0_r_def
  real(r_def),        parameter   :: surface_pressure = 1000.0e2_r_def
  integer(i_def),     parameter   :: npanels          = 1_i_def
  integer(i_def),     parameter   :: nlayers          = 10_i_def
  integer(i_def),     parameter   :: element_order    = 0_i_def
  integer(i_def),     parameter   :: total_ranks      = 1_i_def
  integer(i_def),     parameter   :: local_rank       = 0_i_def
  integer(i_def),     parameter   :: xproc            = 1_i_def
  integer(i_def),     parameter   :: yproc            = 1_i_def

contains

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine setUp(this)

    use schar_orography_cartesian_mod, only : schar_cartesian_type
    use base_mesh_config_mod,          only : geometry_planar,    &
                                              topology_fully_periodic
    use finite_element_config_mod,     only : cellshape_quadrilateral, &
                                              coord_system_xyz
    use feign_config_mod,              only : feign_finite_element_config,   &
                                              feign_base_mesh_config,        &
                                              feign_domain_size_config,      &
                                              feign_extrusion_config,        &
                                              feign_initial_pressure_config, &
                                              feign_orography_schar_cartesian_config
    use orography_schar_cartesian_config_mod, &
                                       only : direction_x
    use extrusion_config_mod,          only : method_uniform, stretching_method_linear

    use initial_pressure_config_mod,   only : method_balanced

    implicit none

    class(analytic_orography_field_cartesian_test_type), intent(inout) :: this

    ! Set mesh configuration
    call feign_base_mesh_config(                                    &
                         filename        = filename,                &
                         prime_mesh_name = mesh_name,               &
                         geometry        = geometry_planar,         &
                         offline_partitioning = .false.,            &
                         topology        = topology_fully_periodic, &
                         fplane          = .false.,                 &
                         f_lat_deg       = 0.0_r_def )

    call feign_extrusion_config( method=method_uniform, &
                                 domain_top=domain_top, &
                                 number_of_layers=nlayers, &
                                 stretching_height=1.0_r_def, &
                                 stretching_method=stretching_method_linear)

    ! Set domain size
    call feign_domain_size_config( planar_domain_max_x =  100.0_r_def, &
                                   planar_domain_max_y =  100.0_r_def, &
                                   planar_domain_min_x = -100.0_r_def, &
                                   planar_domain_min_y = -100.0_r_def )

    call feign_finite_element_config( cellshape=cellshape_quadrilateral, &
                                      coord_order=0_i_def,               &
                                      coord_system=coord_system_xyz,     &
                                      element_order=0_i_def,             &
                                      rehabilitate=.true.,               &
                                      vorticity_in_w1=.false. )

    call feign_initial_pressure_config( method = method_balanced,             &
                                        surface_pressure = surface_pressure )

    ! Set Schar Cartesian configuration
    this%mountain_height = 250.0_r_def
    this%half_width_x    = 20.0_r_def
    this%half_width_y    = 20.0_r_def
    this%wavelength      = 20.0_r_def
    this%x_centre        = 90.0_r_def
    this%y_centre        = 90.0_r_def
    this%direction       = int(direction_x, i_def)
    call feign_orography_schar_cartesian_config(       &
               mountain_height = this%mountain_height, &
               half_width_x    = this%half_width_x,    &
               half_width_y    = this%half_width_y,    &
               wavelength      = this%wavelength,      &
               x_centre        = this%x_centre,        &
               y_centre        = this%y_centre,        &
               direction       = direction_x )

    ! Initialise Schar Cartesian orography type
    allocate( orography_profile,                                   &
              source = schar_cartesian_type( this%mountain_height, &
                                             this%half_width_x,    &
                                             this%half_width_y,    &
                                             this%wavelength,      &
                                             this%x_centre,        &
                                             this%y_centre,        &
                                             this%direction ) )

  end subroutine setUp

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  subroutine tearDown(this)

    use configuration_mod,        only: final_configuration

    implicit none

    class(analytic_orography_field_cartesian_test_type), intent(inout) :: this

    deallocate( orography_profile )
    call final_configuration()

  end subroutine tearDown

  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  @Test
  subroutine test_analytic_orography_field_cartesian(this)

    use local_mesh_mod,                        only : local_mesh_type
    use mesh_mod,                              only : mesh_type
    use partition_mod,                         only : partition_type,        &
                                                      partitioner_interface, &
                                                      partitioner_planar
    use extrusion_mod,                         only : uniform_extrusion_type, &
                                                      PRIME_EXTRUSION
    use mesh_constructor_helper_functions_mod, only : domain_size_type
    use orography_helper_functions_mod,        only : calc_domain_size_horizontal
    use assign_orography_field_mod,            only : analytic_orography_cartesian
    use orography_helper_functions_mod,        only : eta2z_linear

    implicit none
    ! Arguments
    class(analytic_orography_field_cartesian_test_type), intent(inout)  :: this
    ! Mesh, partition and domain size types
    type(ugrid_mesh_data_type)                :: ugrid_mesh_data
    type(global_mesh_type),           pointer :: global_mesh_ptr => null()
    type(global_mesh_type),           target  :: global_mesh
    type(mesh_type)                           :: mesh
    type(domain_size_type)                    :: domain_size
    type(partition_type)                      :: partition
    procedure(partitioner_interface), pointer :: partitioner_ptr => null()
    type(local_mesh_type),            pointer :: local_mesh_ptr
    type(local_mesh_type),            target  :: local_mesh
    type(uniform_extrusion_type)              :: extrusion
    ! Test parameters
    integer(i_def), parameter :: ndf = 1, undf = nlayers*ndf
    integer(i_def)            :: itest, i, map(1)
    real(r_def), parameter    :: tol = 1.0e-3_r_def
    real(r_def)               :: height_flat_surface, height_domain_top
    real(r_def)               :: chi_1(undf), chi_2(undf), chi_3(undf)
    real(r_def)               :: panel_id(undf)
    real(r_def)               :: eta(0:nlayers)
    real(r_def)               :: vertex_coords_2d(3,1), chi_surf, chi_test

    ! Add global mesh
    call ugrid_mesh_data%read_from_file(trim(filename), mesh_name)
    global_mesh = global_mesh_type( ugrid_mesh_data, npanels )
    call ugrid_mesh_data%clear()
    global_mesh_ptr => global_mesh

    ! Assign partitioner
    partitioner_ptr => partitioner_planar
    partition = partition_type( global_mesh_ptr, &
                                partitioner_ptr, &
                                xproc,           &
                                yproc,           &
                                1,               &
                                local_rank,      &
                                total_ranks )
    call local_mesh%initialise( global_mesh_ptr, partition )
    call local_mesh%init_cell_owner()
    local_mesh_ptr => local_mesh

    extrusion = uniform_extrusion_type( domain_bottom, domain_top, nlayers, &
                                        PRIME_EXTRUSION )
    ! Construct a mesh which is uniform in vertical for purpose of the test
    mesh = mesh_type( local_mesh_ptr, extrusion )

    ! Get domain size required for the biperiodic coordinate transform
    domain_size = mesh%get_domain_size()
    ! Calculate horizontal domain size from the domain_size object
    call calc_domain_size_horizontal(domain_size%minimum%x, &
                                     domain_size%maximum%x, &
                                     domain_size%minimum%y, &
                                     domain_size%maximum%y)

    ! Set map for chi coordinates
    map(1)  = 1

    ! Test assigning orography for selected number of points
    i = local_mesh%get_lid_from_gid(119)
    call local_mesh%get_vert_coords(local_mesh%get_vert_on_cell(1,i),&
                                    vertex_coords_2d(:,1))
    ! Create horizontal chi_1 and chi_2 fields from mesh coordinates
    chi_1 = vertex_coords_2d(1,1)
    chi_2 = vertex_coords_2d(2,1)
    ! Get physical height of flat domain surface (0 in Cartesian coordinates)
    height_flat_surface = 0.0_r_def
    ! Get domain top
    height_domain_top = domain_top + height_flat_surface
    ! Create uniform chi_3 field
    call mesh%get_eta(eta)
    do i = 1, undf
      chi_3(i) = eta2z_linear(eta(i-1), height_flat_surface, height_domain_top)
    end do
    panel_id(:) = 1.0_r_def
    ! Test Cartesian orography assignment
    call analytic_orography_cartesian( nlayers, ndf, undf, map, &
                                       ndf, undf, map,          &
                                       height_flat_surface,     &
                                       height_domain_top,       &
                                       chi_1, chi_2, chi_3,     &
                                       panel_id )

    ! Test selected chi_3
    itest = 1
    chi_surf = chi_3(itest)
    chi_test = this%mountain_height
    @assertEqual( chi_surf, chi_test, tol )

    itest = 5
    chi_surf = chi_3(itest)
    chi_test = eta(itest-1)*height_domain_top + (1.0 - eta(itest-1))*this%mountain_height
    @assertEqual( chi_surf, chi_test, tol )

    return
  end subroutine test_analytic_orography_field_cartesian

end module analytic_orography_field_cartesian_mod_test
